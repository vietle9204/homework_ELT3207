
light_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000040c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a4  080005a4  000015a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005a8  080005a8  000015a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005ac  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080005b0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005b0  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a3e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e7  00000000  00000000  00003a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00004060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000163  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c82  00000000  00000000  000043bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000220a  00000000  00000000  0001803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ebe5  00000000  00000000  0001a247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098e2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000610  00000000  00000000  00098e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00099480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800058c 	.word	0x0800058c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800058c 	.word	0x0800058c

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	db0a      	blt.n	800023e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <__NVIC_SetPriority+0x4c>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800023c:	e00a      	b.n	8000254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4908      	ldr	r1, [pc, #32]	@ (8000264 <__NVIC_SetPriority+0x50>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	3b04      	subs	r3, #4
 800024c:	0112      	lsls	r2, r2, #4
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	440b      	add	r3, r1
 8000252:	761a      	strb	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <main>:
void led_control();

uint16_t adc_value = 0;

int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	init_led();
 800026c:	f000 f810 	bl	8000290 <init_led>
	init_TIM_PWM();
 8000270:	f000 f832 	bl	80002d8 <init_TIM_PWM>
	init_ADC();
 8000274:	f000 f878 	bl	8000368 <init_ADC>
	led_control();
 8000278:	f000 f866 	bl	8000348 <led_control>
	ADC1->CR2 |= ADC_CR2_SWSTART;
 800027c:	4b03      	ldr	r3, [pc, #12]	@ (800028c <main+0x24>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a02      	ldr	r2, [pc, #8]	@ (800028c <main+0x24>)
 8000282:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000286:	6093      	str	r3, [r2, #8]
	while(1)
 8000288:	bf00      	nop
 800028a:	e7fd      	b.n	8000288 <main+0x20>
 800028c:	40012000 	.word	0x40012000

08000290 <init_led>:

	}
}

void init_led()
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  //bật clock GPIOA.
 8000294:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <init_led+0x40>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000298:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <init_led+0x40>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(3 << (PWM_led * 2));  // Xóa cấu hình cũ
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <init_led+0x44>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <init_led+0x44>)
 80002a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002aa:	6013      	str	r3, [r2, #0]

	GPIOA->MODER  |=  (2 << (PWM_led * 2));  // Chọn chế độ Alternate Function (AF)
 80002ac:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <init_led+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a08      	ldr	r2, [pc, #32]	@ (80002d4 <init_led+0x44>)
 80002b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002b6:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1] |=  (1 << ((PWM_led- 8) * 4)); // Chọn AF1 (TIM1)
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <init_led+0x44>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002bc:	4a05      	ldr	r2, [pc, #20]	@ (80002d4 <init_led+0x44>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020000 	.word	0x40020000

080002d8 <init_TIM_PWM>:



void init_TIM_PWM()
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;       // cấp xung clock cho timer1.
 80002dc:	4b18      	ldr	r3, [pc, #96]	@ (8000340 <init_TIM_PWM+0x68>)
 80002de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e0:	4a17      	ldr	r2, [pc, #92]	@ (8000340 <init_TIM_PWM+0x68>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6453      	str	r3, [r2, #68]	@ 0x44

	TIM1->PSC = 99;                           // chia tần: tầ số dếm = 100MHz/(99+1) = 1MH.
 80002e8:	4b16      	ldr	r3, [pc, #88]	@ (8000344 <init_TIM_PWM+0x6c>)
 80002ea:	2263      	movs	r2, #99	@ 0x63
 80002ec:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 255;                         //chu kỳ PWM : 0.255ms
 80002ee:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <init_TIM_PWM+0x6c>)
 80002f0:	22ff      	movs	r2, #255	@ 0xff
 80002f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR1 = 0;		 				  // độ rộng xung mặc định = 0.
 80002f4:	4b13      	ldr	r3, [pc, #76]	@ (8000344 <init_TIM_PWM+0x6c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	635a      	str	r2, [r3, #52]	@ 0x34

	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M;
 80002fa:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <init_TIM_PWM+0x6c>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <init_TIM_PWM+0x6c>)
 8000300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000304:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= 7 << TIM_CCMR1_OC1M_Pos;  //chọn chế độ PWM mode 2.
 8000306:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <init_TIM_PWM+0x6c>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <init_TIM_PWM+0x6c>)
 800030c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000310:	6193      	str	r3, [r2, #24]

	TIM1->BDTR |= TIM_BDTR_MOE;			     //cho phép timer1 xuất tín hiệu ngõ ra.
 8000312:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <init_TIM_PWM+0x6c>)
 8000314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000316:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <init_TIM_PWM+0x6c>)
 8000318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800031c:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->CCER |= TIM_CCER_CC1E;              //chọn kênh CH1 của timer 1(PA8)
 800031e:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <init_TIM_PWM+0x6c>)
 8000320:	6a1b      	ldr	r3, [r3, #32]
 8000322:	4a08      	ldr	r2, [pc, #32]	@ (8000344 <init_TIM_PWM+0x6c>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6213      	str	r3, [r2, #32]

	TIM1->CR1 |= TIM_CR1_CEN;                //bật bộ đếm cho timer1.
 800032a:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <init_TIM_PWM+0x6c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a05      	ldr	r2, [pc, #20]	@ (8000344 <init_TIM_PWM+0x6c>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40023800 	.word	0x40023800
 8000344:	40010000 	.word	0x40010000

08000348 <led_control>:

void led_control()
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	TIM1->CCR1 =  adc_value;    // cập nhật độ rông xung = arr - adc_value : do PWM mode 2
 800034c:	4b04      	ldr	r3, [pc, #16]	@ (8000360 <led_control+0x18>)
 800034e:	881a      	ldrh	r2, [r3, #0]
 8000350:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <led_control+0x1c>)
 8000352:	635a      	str	r2, [r3, #52]	@ 0x34
//	TIM1->EGR |= TIM_EGR_UG;           // Cập nhật giá trị mới ngay lập tức
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000020 	.word	0x20000020
 8000364:	40010000 	.word	0x40010000

08000368 <init_ADC>:

void init_ADC()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  //bật clock GPIOA.
 800036c:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <init_ADC+0x98>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000370:	4a23      	ldr	r2, [pc, #140]	@ (8000400 <init_ADC+0x98>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(3 << (ADC_pin * 2));  // Xóa cấu hình cũ
 8000378:	4b22      	ldr	r3, [pc, #136]	@ (8000404 <init_ADC+0x9c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a21      	ldr	r2, [pc, #132]	@ (8000404 <init_ADC+0x9c>)
 800037e:	f023 0303 	bic.w	r3, r3, #3
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |= (3 << (ADC_pin * 2));  // Chọn chế độ analog
 8000384:	4b1f      	ldr	r3, [pc, #124]	@ (8000404 <init_ADC+0x9c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a1e      	ldr	r2, [pc, #120]	@ (8000404 <init_ADC+0x9c>)
 800038a:	f043 0303 	orr.w	r3, r3, #3
 800038e:	6013      	str	r3, [r2, #0]

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;    // cấp clock cho ADC1.
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <init_ADC+0x98>)
 8000392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000394:	4a1a      	ldr	r2, [pc, #104]	@ (8000400 <init_ADC+0x98>)
 8000396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800039a:	6453      	str	r3, [r2, #68]	@ 0x44

	ADC1->CR1 &= ~ADC_CR1_RES_Msk;        //xóa cà đặt cũ
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <init_ADC+0xa0>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4a19      	ldr	r2, [pc, #100]	@ (8000408 <init_ADC+0xa0>)
 80003a2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80003a6:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= 2 << ADC_CR1_RES_Pos;    //chọn độ phân giải 8 bit;
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <init_ADC+0xa0>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	4a16      	ldr	r2, [pc, #88]	@ (8000408 <init_ADC+0xa0>)
 80003ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003b2:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= ADC_CR1_EOCIE;			//bật ngắt cho ADC1.
 80003b4:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <init_ADC+0xa0>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a13      	ldr	r2, [pc, #76]	@ (8000408 <init_ADC+0xa0>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6053      	str	r3, [r2, #4]

	ADC1->SMPR2 |= (3 << (ADC_pin * 3));              // Thời gian lấy mẫu 3 cycles
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <init_ADC+0xa0>)
 80003c2:	691b      	ldr	r3, [r3, #16]
 80003c4:	4a10      	ldr	r2, [pc, #64]	@ (8000408 <init_ADC+0xa0>)
 80003c6:	f043 0303 	orr.w	r3, r3, #3
 80003ca:	6113      	str	r3, [r2, #16]

	ADC1->SQR3 |= (ADC_pin << 0);                // Chọn kênh 1 (PA1)
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <init_ADC+0xa0>)
 80003ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000408 <init_ADC+0xa0>)
 80003d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003d2:	6353      	str	r3, [r2, #52]	@ 0x34

	NVIC_EnableIRQ(ADC_IRQn); 				// cấu hình ngắt chi ADC
 80003d4:	2012      	movs	r0, #18
 80003d6:	f7ff feff 	bl	80001d8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(ADC_IRQn, 1); 		// Đặt mức ưu tiên cho ngắt ADC
 80003da:	2101      	movs	r1, #1
 80003dc:	2012      	movs	r0, #18
 80003de:	f7ff ff19 	bl	8000214 <__NVIC_SetPriority>

	ADC1->CR2 |= ADC_CR2_CONT;				//chê độ đọc liên tục.
 80003e2:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <init_ADC+0xa0>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	4a08      	ldr	r2, [pc, #32]	@ (8000408 <init_ADC+0xa0>)
 80003e8:	f043 0302 	orr.w	r3, r3, #2
 80003ec:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON;              //bật ADC1.
 80003ee:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <init_ADC+0xa0>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4a05      	ldr	r2, [pc, #20]	@ (8000408 <init_ADC+0xa0>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6093      	str	r3, [r2, #8]
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40023800 	.word	0x40023800
 8000404:	40020000 	.word	0x40020000
 8000408:	40012000 	.word	0x40012000

0800040c <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
    if (ADC1->SR & (1 << 1))
 8000410:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <ADC_IRQHandler+0x30>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f003 0302 	and.w	r3, r3, #2
 8000418:	2b00      	cmp	r3, #0
 800041a:	d00c      	beq.n	8000436 <ADC_IRQHandler+0x2a>
    {  // Kiểm tra cờ EOC
        adc_value = ADC1->DR;   	// Đọc giá trị ADC
 800041c:	4b07      	ldr	r3, [pc, #28]	@ (800043c <ADC_IRQHandler+0x30>)
 800041e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000420:	b29a      	uxth	r2, r3
 8000422:	4b07      	ldr	r3, [pc, #28]	@ (8000440 <ADC_IRQHandler+0x34>)
 8000424:	801a      	strh	r2, [r3, #0]
        led_control();              //cập nhật độ sáng led.
 8000426:	f7ff ff8f 	bl	8000348 <led_control>
        ADC1->SR &= ~(1 << 1);  	// Xóa cờ EOC
 800042a:	4b04      	ldr	r3, [pc, #16]	@ (800043c <ADC_IRQHandler+0x30>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a03      	ldr	r2, [pc, #12]	@ (800043c <ADC_IRQHandler+0x30>)
 8000430:	f023 0302 	bic.w	r3, r3, #2
 8000434:	6013      	str	r3, [r2, #0]
    }
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40012000 	.word	0x40012000
 8000440:	20000020 	.word	0x20000020

08000444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000448:	bf00      	nop
 800044a:	e7fd      	b.n	8000448 <NMI_Handler+0x4>

0800044c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <HardFault_Handler+0x4>

08000454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <MemManage_Handler+0x4>

0800045c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <BusFault_Handler+0x4>

08000464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <UsageFault_Handler+0x4>

0800046c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049a:	f000 f83f 	bl	800051c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <SystemInit+0x20>)
 80004aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ae:	4a05      	ldr	r2, [pc, #20]	@ (80004c4 <SystemInit+0x20>)
 80004b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000500 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004cc:	f7ff ffea 	bl	80004a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	@ (8000508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004f6:	f000 f825 	bl	8000544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fa:	f7ff feb5 	bl	8000268 <main>
  bx  lr    
 80004fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800050c:	080005ac 	.word	0x080005ac
  ldr r2, =_sbss
 8000510:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000514:	20000028 	.word	0x20000028

08000518 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <DMA1_Stream0_IRQHandler>
	...

0800051c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <HAL_IncTick+0x20>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_IncTick+0x24>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a04      	ldr	r2, [pc, #16]	@ (8000540 <HAL_IncTick+0x24>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000
 8000540:	20000024 	.word	0x20000024

08000544 <__libc_init_array>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4d0d      	ldr	r5, [pc, #52]	@ (800057c <__libc_init_array+0x38>)
 8000548:	4c0d      	ldr	r4, [pc, #52]	@ (8000580 <__libc_init_array+0x3c>)
 800054a:	1b64      	subs	r4, r4, r5
 800054c:	10a4      	asrs	r4, r4, #2
 800054e:	2600      	movs	r6, #0
 8000550:	42a6      	cmp	r6, r4
 8000552:	d109      	bne.n	8000568 <__libc_init_array+0x24>
 8000554:	4d0b      	ldr	r5, [pc, #44]	@ (8000584 <__libc_init_array+0x40>)
 8000556:	4c0c      	ldr	r4, [pc, #48]	@ (8000588 <__libc_init_array+0x44>)
 8000558:	f000 f818 	bl	800058c <_init>
 800055c:	1b64      	subs	r4, r4, r5
 800055e:	10a4      	asrs	r4, r4, #2
 8000560:	2600      	movs	r6, #0
 8000562:	42a6      	cmp	r6, r4
 8000564:	d105      	bne.n	8000572 <__libc_init_array+0x2e>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f855 3b04 	ldr.w	r3, [r5], #4
 800056c:	4798      	blx	r3
 800056e:	3601      	adds	r6, #1
 8000570:	e7ee      	b.n	8000550 <__libc_init_array+0xc>
 8000572:	f855 3b04 	ldr.w	r3, [r5], #4
 8000576:	4798      	blx	r3
 8000578:	3601      	adds	r6, #1
 800057a:	e7f2      	b.n	8000562 <__libc_init_array+0x1e>
 800057c:	080005a4 	.word	0x080005a4
 8000580:	080005a4 	.word	0x080005a4
 8000584:	080005a4 	.word	0x080005a4
 8000588:	080005a8 	.word	0x080005a8

0800058c <_init>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr

08000598 <_fini>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr
