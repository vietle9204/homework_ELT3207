
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000574  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800070c  0800070c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800070c  0800070c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800070c  0800070c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800070c  0800070c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800070c  0800070c  0000170c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000710  08000710  00001710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000714  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08000718  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000718  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000184c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005b3  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00003e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000177  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013cac  00000000  00000000  000041bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022e9  00000000  00000000  00017e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ec97  00000000  00000000  0001a154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098deb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000660  00000000  00000000  00098e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00099490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006f4 	.word	0x080006f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080006f4 	.word	0x080006f4

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <main>:
void motor_direction();
void delay(uint32_t time_delay);
void init_button();

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
    init_motor_DC();   // Khởi tạo GPIO cho động cơ
 8000218:	f000 f80a 	bl	8000230 <init_motor_DC>
    init_TIM_PWM();    // Khởi tạo PWM điều khiển tốc độ động cơ
 800021c:	f000 f85c 	bl	80002d8 <init_TIM_PWM>
    init_interrupt();  // Khởi tạo ngắt ngoài
 8000220:	f000 f894 	bl	800034c <init_interrupt>
    init_button();     // Khởi tạo nút nhấn
 8000224:	f000 f938 	bl	8000498 <init_button>
    motor_run();       // Chạy động cơ ban đầu
 8000228:	f000 f8dc 	bl	80003e4 <motor_run>
    while(1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x18>

08000230 <init_motor_DC>:
        // Vòng lặp chính - không làm gì, chờ xử lý ngắt
    }
}

void init_motor_DC()
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Bật clock cho GPIOA
 8000234:	4b26      	ldr	r3, [pc, #152]	@ (80002d0 <init_motor_DC+0xa0>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a25      	ldr	r2, [pc, #148]	@ (80002d0 <init_motor_DC+0xa0>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA8 làm PWM.
    GPIOA->MODER  &= ~(3 << (motor_ena * 2));  // Xóa cấu hình cũ
 8000240:	4b24      	ldr	r3, [pc, #144]	@ (80002d4 <init_motor_DC+0xa4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a23      	ldr	r2, [pc, #140]	@ (80002d4 <init_motor_DC+0xa4>)
 8000246:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800024a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  (2 << (motor_ena * 2));  // Chọn chế độ Alternate Function (AF)
 800024c:	4b21      	ldr	r3, [pc, #132]	@ (80002d4 <init_motor_DC+0xa4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a20      	ldr	r2, [pc, #128]	@ (80002d4 <init_motor_DC+0xa4>)
 8000252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000256:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] |=  (1 << ((motor_ena - 8) * 4)); // Chọn AF1 (TIM1)
 8000258:	4b1e      	ldr	r3, [pc, #120]	@ (80002d4 <init_motor_DC+0xa4>)
 800025a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800025c:	4a1d      	ldr	r2, [pc, #116]	@ (80002d4 <init_motor_DC+0xa4>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6253      	str	r3, [r2, #36]	@ 0x24

    // PA9 làm đầu vào IN1.
    GPIOA->MODER  &= ~(3 << (motor_in1 * 2)); // Xóa cấu hình cũ
 8000264:	4b1b      	ldr	r3, [pc, #108]	@ (80002d4 <init_motor_DC+0xa4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a1a      	ldr	r2, [pc, #104]	@ (80002d4 <init_motor_DC+0xa4>)
 800026a:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800026e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  (1 << (motor_in1 * 2)); // Cấu hình làm output
 8000270:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <init_motor_DC+0xa4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a17      	ldr	r2, [pc, #92]	@ (80002d4 <init_motor_DC+0xa4>)
 8000276:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800027a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR  &= ~(3 << (motor_in1 * 2)); // Xóa cấu hình pull-up/pull-down
 800027c:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <init_motor_DC+0xa4>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a14      	ldr	r2, [pc, #80]	@ (80002d4 <init_motor_DC+0xa4>)
 8000282:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000286:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR  |=  (2 << (motor_in1 * 2)); // Kéo xuống (pull-down)
 8000288:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <init_motor_DC+0xa4>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a11      	ldr	r2, [pc, #68]	@ (80002d4 <init_motor_DC+0xa4>)
 800028e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000292:	60d3      	str	r3, [r2, #12]

    // PA10 làm đầu vào IN2.
    GPIOA->MODER  &= ~(3 << (motor_in2 * 2)); // Xóa cấu hình cũ
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <init_motor_DC+0xa4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0e      	ldr	r2, [pc, #56]	@ (80002d4 <init_motor_DC+0xa4>)
 800029a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800029e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  (1 << (motor_in2 * 2)); // Cấu hình làm output
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <init_motor_DC+0xa4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <init_motor_DC+0xa4>)
 80002a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002aa:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR  &= ~(3 << (motor_in2 * 2)); // Xóa cấu hình pull-up/pull-down
 80002ac:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <init_motor_DC+0xa4>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a08      	ldr	r2, [pc, #32]	@ (80002d4 <init_motor_DC+0xa4>)
 80002b2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80002b6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR  |=  (2 << (motor_in2 * 2)); // Kéo xuống (pull-down)
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <init_motor_DC+0xa4>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a05      	ldr	r2, [pc, #20]	@ (80002d4 <init_motor_DC+0xa4>)
 80002be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002c2:	60d3      	str	r3, [r2, #12]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020000 	.word	0x40020000

080002d8 <init_TIM_PWM>:

void init_TIM_PWM()
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;       // cấp xung clock cho timer1.
 80002dc:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <init_TIM_PWM+0x6c>)
 80002de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e0:	4a18      	ldr	r2, [pc, #96]	@ (8000344 <init_TIM_PWM+0x6c>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6453      	str	r3, [r2, #68]	@ 0x44

	TIM1->PSC = 99;                           // chia tần: tầ số dếm = 100MHz/(99+1) = 1MH.
 80002e8:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <init_TIM_PWM+0x70>)
 80002ea:	2263      	movs	r2, #99	@ 0x63
 80002ec:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 1999;                         //chu kỳ PWM : (1999+1)/10^6 = 2ms.
 80002ee:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <init_TIM_PWM+0x70>)
 80002f0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80002f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR1 = 1000;		 				  // độ rộng xung =  1/2 ARR
 80002f6:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <init_TIM_PWM+0x70>)
 80002f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002fc:	635a      	str	r2, [r3, #52]	@ 0x34

	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M;
 80002fe:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <init_TIM_PWM+0x70>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a11      	ldr	r2, [pc, #68]	@ (8000348 <init_TIM_PWM+0x70>)
 8000304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000308:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= 6 << TIM_CCMR1_OC1M_Pos;  //chọn chế độ PWM mode 1.
 800030a:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <init_TIM_PWM+0x70>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a0e      	ldr	r2, [pc, #56]	@ (8000348 <init_TIM_PWM+0x70>)
 8000310:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000314:	6193      	str	r3, [r2, #24]

	TIM1->BDTR |= TIM_BDTR_MOE;			     //cho phép timer1 xuất tín hiệu ngõ ra.
 8000316:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <init_TIM_PWM+0x70>)
 8000318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800031a:	4a0b      	ldr	r2, [pc, #44]	@ (8000348 <init_TIM_PWM+0x70>)
 800031c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000320:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->CCER |= TIM_CCER_CC1E;              //chọn kênh CH1 của timer 1(PA8)
 8000322:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <init_TIM_PWM+0x70>)
 8000324:	6a1b      	ldr	r3, [r3, #32]
 8000326:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <init_TIM_PWM+0x70>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6213      	str	r3, [r2, #32]

	TIM1->CR1 |= TIM_CR1_CEN;                //bật bộ đếm cho timer1.
 800032e:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <init_TIM_PWM+0x70>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a05      	ldr	r2, [pc, #20]	@ (8000348 <init_TIM_PWM+0x70>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6013      	str	r3, [r2, #0]

}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40023800 	.word	0x40023800
 8000348:	40010000 	.word	0x40010000

0800034c <init_interrupt>:

void init_interrupt()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    // Bật clock cho System Configuration Controller (SYSCFG)
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000350:	4b21      	ldr	r3, [pc, #132]	@ (80003d8 <init_interrupt+0x8c>)
 8000352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000354:	4a20      	ldr	r2, [pc, #128]	@ (80003d8 <init_interrupt+0x8c>)
 8000356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800035a:	6453      	str	r3, [r2, #68]	@ 0x44

    // Kết nối PC13 với EXTI13 (EXTICR4)
    SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI12_PB
 800035c:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <init_interrupt+0x90>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a1e      	ldr	r2, [pc, #120]	@ (80003dc <init_interrupt+0x90>)
 8000362:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000366:	f043 0311 	orr.w	r3, r3, #17
 800036a:	6153      	str	r3, [r2, #20]
						|SYSCFG_EXTICR4_EXTI13_PB
						|SYSCFG_EXTICR4_EXTI14_PB
						|SYSCFG_EXTICR4_EXTI15_PB;

    // Bật ngắt cho EXTI12
    EXTI->IMR |= EXTI_IMR_IM12;   //  mask ngắt EXTI12
 800036c:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <init_interrupt+0x94>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1b      	ldr	r2, [pc, #108]	@ (80003e0 <init_interrupt+0x94>)
 8000372:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000376:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR12; // Kích hoạt ngắt cạnh xuống (Falling edge)
 8000378:	4b19      	ldr	r3, [pc, #100]	@ (80003e0 <init_interrupt+0x94>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a18      	ldr	r2, [pc, #96]	@ (80003e0 <init_interrupt+0x94>)
 800037e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000382:	60d3      	str	r3, [r2, #12]

    // Bật ngắt cho EXTI13
    EXTI->IMR |= EXTI_IMR_IM13;   //  mask ngắt EXTI13
 8000384:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <init_interrupt+0x94>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a15      	ldr	r2, [pc, #84]	@ (80003e0 <init_interrupt+0x94>)
 800038a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800038e:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR13; // Kích hoạt ngắt cạnh xuống (Falling edge)
 8000390:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <init_interrupt+0x94>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a12      	ldr	r2, [pc, #72]	@ (80003e0 <init_interrupt+0x94>)
 8000396:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800039a:	60d3      	str	r3, [r2, #12]

    // Bật ngắt cho EXTI14
    EXTI->IMR |= EXTI_IMR_IM14;   //  mask ngắt EXTI15
 800039c:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <init_interrupt+0x94>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0f      	ldr	r2, [pc, #60]	@ (80003e0 <init_interrupt+0x94>)
 80003a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003a6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR14; // Kích hoạt ngắt cạnh xuống (Falling edge)
 80003a8:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <init_interrupt+0x94>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a0c      	ldr	r2, [pc, #48]	@ (80003e0 <init_interrupt+0x94>)
 80003ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003b2:	60d3      	str	r3, [r2, #12]

    // Bật ngắt cho EXTI15
    EXTI->IMR |= EXTI_IMR_IM15;   //  mask ngắt EXTI14
 80003b4:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <init_interrupt+0x94>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a09      	ldr	r2, [pc, #36]	@ (80003e0 <init_interrupt+0x94>)
 80003ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003be:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR15; // Kích hoạt ngắt cạnh xuống (Falling edge)
 80003c0:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <init_interrupt+0x94>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	4a06      	ldr	r2, [pc, #24]	@ (80003e0 <init_interrupt+0x94>)
 80003c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003ca:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn); // Kích hoạt ngắt cho EXTI từ line 10-15
 80003cc:	2028      	movs	r0, #40	@ 0x28
 80003ce:	f7ff ff03 	bl	80001d8 <__NVIC_EnableIRQ>

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40013800 	.word	0x40013800
 80003e0:	40013c00 	.word	0x40013c00

080003e4 <motor_run>:

void motor_run()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	motor_direction();
 80003e8:	f000 f82e 	bl	8000448 <motor_direction>
	motor_speed();
 80003ec:	f000 f80e 	bl	800040c <motor_speed>
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <motor_stop>:

void motor_stop()
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	motor_state_speed = 0;    // Đặt tốc độ về 0
 80003f8:	4b03      	ldr	r3, [pc, #12]	@ (8000408 <motor_stop+0x14>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
	motor_speed();			  // Cập nhật tốc độ
 80003fe:	f000 f805 	bl	800040c <motor_speed>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000020 	.word	0x20000020

0800040c <motor_speed>:

void motor_speed()
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
    if (motor_state_speed > MAX_SPEED)
 8000410:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <motor_speed+0x34>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000418:	d303      	bcc.n	8000422 <motor_speed+0x16>
        motor_state_speed = MAX_SPEED;
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <motor_speed+0x34>)
 800041c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000420:	601a      	str	r2, [r3, #0]
    if (motor_state_speed < MIN_SPEED)
        motor_state_speed = MIN_SPEED;

    TIM1->CCR1 = motor_state_speed;    // Cập nhật tốc độ PWM
 8000422:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <motor_speed+0x38>)
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <motor_speed+0x34>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->EGR |= TIM_EGR_UG;           // Cập nhật giá trị mới ngay lập tức
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <motor_speed+0x38>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a05      	ldr	r2, [pc, #20]	@ (8000444 <motor_speed+0x38>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6153      	str	r3, [r2, #20]

}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	20000020 	.word	0x20000020
 8000444:	40010000 	.word	0x40010000

08000448 <motor_direction>:

void motor_direction()
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	if(motor_state_direction == 0)
 800044c:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <motor_direction+0x48>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d10c      	bne.n	800046e <motor_direction+0x26>
	{
		GPIOA->BSRR |= 1 << (16 + motor_in2); //tắt IN2
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <motor_direction+0x4c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <motor_direction+0x4c>)
 800045a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800045e:	6193      	str	r3, [r2, #24]
		GPIOA->BSRR |= 1 << motor_in1;        // Bật IN1
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <motor_direction+0x4c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a0b      	ldr	r2, [pc, #44]	@ (8000494 <motor_direction+0x4c>)
 8000466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800046a:	6193      	str	r3, [r2, #24]
	else
	{
		GPIOA->BSRR |= 1 << (16 + motor_in1); // Tắt IN1
		GPIOA->BSRR |= 1 << motor_in2;        // Bật IN2
	}
}
 800046c:	e00b      	b.n	8000486 <motor_direction+0x3e>
		GPIOA->BSRR |= 1 << (16 + motor_in1); // Tắt IN1
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <motor_direction+0x4c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <motor_direction+0x4c>)
 8000474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000478:	6193      	str	r3, [r2, #24]
		GPIOA->BSRR |= 1 << motor_in2;        // Bật IN2
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <motor_direction+0x4c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <motor_direction+0x4c>)
 8000480:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000484:	6193      	str	r3, [r2, #24]
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	20000024 	.word	0x20000024
 8000494:	40020000 	.word	0x40020000

08000498 <init_button>:

void init_button()
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOB
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <init_button+0x4c>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4a10      	ldr	r2, [pc, #64]	@ (80004e4 <init_button+0x4c>)
 80004a2:	f043 0302 	orr.w	r3, r3, #2
 80004a6:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình PB12, 13, 14, 15 làm input
    GPIOB->MODER &= ~(1 << button1*2); // MODE13 = 00 (Input mode).
 80004a8:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <init_button+0x50>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <init_button+0x50>)
 80004ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004b2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1 << button2*2); // MODE13 = 00 (Input mode)
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <init_button+0x50>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0b      	ldr	r2, [pc, #44]	@ (80004e8 <init_button+0x50>)
 80004ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80004be:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1 << button3*2); // MODE13 = 00 (Input mode)
 80004c0:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <init_button+0x50>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <init_button+0x50>)
 80004c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80004ca:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1 << button4*2); // MODE13 = 00 (Input mode)
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <init_button+0x50>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <init_button+0x50>)
 80004d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80004d6:	6013      	str	r3, [r2, #0]

}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40020400 	.word	0x40020400

080004ec <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 12))  // Kiểm tra nếu có ngắt xảy ra trên PC13
 80004f0:	4b2b      	ldr	r3, [pc, #172]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d007      	beq.n	800050c <EXTI15_10_IRQHandler+0x20>
    {
    	motor_stop();          // Dừng động cơ
 80004fc:	f7ff ff7a 	bl	80003f4 <motor_stop>
        // Xóa cờ ngắt
        EXTI->PR |= (1 << 12);
 8000500:	4b27      	ldr	r3, [pc, #156]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a26      	ldr	r2, [pc, #152]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 8000506:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800050a:	6153      	str	r3, [r2, #20]
    }

    if (EXTI->PR & (1 << 13))  // Kiểm tra nếu có ngắt xảy ra trên PB13
 800050c:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000514:	2b00      	cmp	r3, #0
 8000516:	d011      	beq.n	800053c <EXTI15_10_IRQHandler+0x50>
        {
    		motor_state_direction = (motor_state_direction == 0) ? 1 : 0;
 8000518:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <EXTI15_10_IRQHandler+0xb8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf0c      	ite	eq
 8000520:	2301      	moveq	r3, #1
 8000522:	2300      	movne	r3, #0
 8000524:	b2db      	uxtb	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	4b1e      	ldr	r3, [pc, #120]	@ (80005a4 <EXTI15_10_IRQHandler+0xb8>)
 800052a:	601a      	str	r2, [r3, #0]
    		motor_direction();       // Đảo chiều quay
 800052c:	f7ff ff8c 	bl	8000448 <motor_direction>
            // Xóa cờ ngắt
            EXTI->PR |= (1 << 13);
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a1a      	ldr	r2, [pc, #104]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 8000536:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800053a:	6153      	str	r3, [r2, #20]
        }


    if (EXTI->PR & (1 << 14))
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d011      	beq.n	800056c <EXTI15_10_IRQHandler+0x80>
        {
            if (motor_state_speed <= 1800)  // Giới hạn tốc độ tối đa
 8000548:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8000550:	d804      	bhi.n	800055c <EXTI15_10_IRQHandler+0x70>
                motor_state_speed += 200;
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	33c8      	adds	r3, #200	@ 0xc8
 8000558:	4a13      	ldr	r2, [pc, #76]	@ (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800055a:	6013      	str	r3, [r2, #0]
            motor_speed();                   // Tăng tốc
 800055c:	f7ff ff56 	bl	800040c <motor_speed>
            EXTI->PR |= (1 << 14);
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a0e      	ldr	r2, [pc, #56]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056a:	6153      	str	r3, [r2, #20]
        }

        if (EXTI->PR & (1 << 15))
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000574:	2b00      	cmp	r3, #0
 8000576:	d010      	beq.n	800059a <EXTI15_10_IRQHandler+0xae>
        {
            if (motor_state_speed >= 200)  // Giới hạn tốc độ tối thiểu
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2bc7      	cmp	r3, #199	@ 0xc7
 800057e:	d904      	bls.n	800058a <EXTI15_10_IRQHandler+0x9e>
                motor_state_speed -= 200;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3bc8      	subs	r3, #200	@ 0xc8
 8000586:	4a08      	ldr	r2, [pc, #32]	@ (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000588:	6013      	str	r3, [r2, #0]
            motor_speed();                  // Giảm tốc
 800058a:	f7ff ff3f 	bl	800040c <motor_speed>
            EXTI->PR |= (1 << 15);
 800058e:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a03      	ldr	r2, [pc, #12]	@ (80005a0 <EXTI15_10_IRQHandler+0xb4>)
 8000594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000598:	6153      	str	r3, [r2, #20]
        }
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40013c00 	.word	0x40013c00
 80005a4:	20000024 	.word	0x20000024
 80005a8:	20000020 	.word	0x20000020

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <NMI_Handler+0x4>

080005b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <MemManage_Handler+0x4>

080005c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000602:	f000 f83f 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <SystemInit+0x20>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <SystemInit+0x20>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000634:	f7ff ffea 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	@ (8000670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	@ (800067c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f000 f825 	bl	80006ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000662:	f7ff fdd7 	bl	8000214 <main>
  bx  lr    
 8000666:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000674:	08000714 	.word	0x08000714
  ldr r2, =_sbss
 8000678:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800067c:	2000002c 	.word	0x2000002c

08000680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC_IRQHandler>
	...

08000684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_IncTick+0x20>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <HAL_IncTick+0x24>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <HAL_IncTick+0x24>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000028 	.word	0x20000028

080006ac <__libc_init_array>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	4d0d      	ldr	r5, [pc, #52]	@ (80006e4 <__libc_init_array+0x38>)
 80006b0:	4c0d      	ldr	r4, [pc, #52]	@ (80006e8 <__libc_init_array+0x3c>)
 80006b2:	1b64      	subs	r4, r4, r5
 80006b4:	10a4      	asrs	r4, r4, #2
 80006b6:	2600      	movs	r6, #0
 80006b8:	42a6      	cmp	r6, r4
 80006ba:	d109      	bne.n	80006d0 <__libc_init_array+0x24>
 80006bc:	4d0b      	ldr	r5, [pc, #44]	@ (80006ec <__libc_init_array+0x40>)
 80006be:	4c0c      	ldr	r4, [pc, #48]	@ (80006f0 <__libc_init_array+0x44>)
 80006c0:	f000 f818 	bl	80006f4 <_init>
 80006c4:	1b64      	subs	r4, r4, r5
 80006c6:	10a4      	asrs	r4, r4, #2
 80006c8:	2600      	movs	r6, #0
 80006ca:	42a6      	cmp	r6, r4
 80006cc:	d105      	bne.n	80006da <__libc_init_array+0x2e>
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d4:	4798      	blx	r3
 80006d6:	3601      	adds	r6, #1
 80006d8:	e7ee      	b.n	80006b8 <__libc_init_array+0xc>
 80006da:	f855 3b04 	ldr.w	r3, [r5], #4
 80006de:	4798      	blx	r3
 80006e0:	3601      	adds	r6, #1
 80006e2:	e7f2      	b.n	80006ca <__libc_init_array+0x1e>
 80006e4:	0800070c 	.word	0x0800070c
 80006e8:	0800070c 	.word	0x0800070c
 80006ec:	0800070c 	.word	0x0800070c
 80006f0:	08000710 	.word	0x08000710

080006f4 <_init>:
 80006f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f6:	bf00      	nop
 80006f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fa:	bc08      	pop	{r3}
 80006fc:	469e      	mov	lr, r3
 80006fe:	4770      	bx	lr

08000700 <_fini>:
 8000700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000702:	bf00      	nop
 8000704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000706:	bc08      	pop	{r3}
 8000708:	469e      	mov	lr, r3
 800070a:	4770      	bx	lr
