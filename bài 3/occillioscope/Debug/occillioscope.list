
occillioscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007490  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007630  08007630  00008630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c4  080076c4  00009150  2**0
                  CONTENTS
  4 .ARM          00000008  080076c4  080076c4  000086c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076cc  080076cc  00009150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076cc  080076cc  000086cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076d0  080076d0  000086d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  080076d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d68  20000150  08007824  00009150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001eb8  08007824  00009eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d58f  00000000  00000000  00009180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae7  00000000  00000000  0001670f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  000191f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000872  00000000  00000000  00019d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f4a  00000000  00000000  0001a5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103cd  00000000  00000000  00032534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874b3  00000000  00000000  00042901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003280  00000000  00000000  000c9df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000cd078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007618 	.word	0x08007618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	08007618 	.word	0x08007618

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
static void MX_GPIO_Init(void);
void MX_USB_DEVICE_Init(void);
void ADC1_Init(void);
uint8_t ADC1_Read(void);

int main(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
    HAL_Init();
 8000576:	f000 f9d7 	bl	8000928 <HAL_Init>
    SystemClock_Config();
 800057a:	f000 f879 	bl	8000670 <SystemClock_Config>
    MX_GPIO_Init();
 800057e:	f000 f8df 	bl	8000740 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 8000582:	f005 fe99 	bl	80062b8 <MX_USB_DEVICE_Init>
    ADC1_Init();  // Cấu hình ADC 8-bit
 8000586:	f000 f823 	bl	80005d0 <ADC1_Init>

    while (1) {
        adc_value_8bit = ADC1_Read();  // Đọc ADC 8-bit
 800058a:	f000 f857 	bl	800063c <ADC1_Read>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <main+0x50>)
 8000594:	701a      	strb	r2, [r3, #0]

        // Gửi giá trị ADC qua USB CDC
        int len = sprintf(msg, "%d\r\n", adc_value_8bit);
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <main+0x50>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <main+0x54>)
 800059e:	480a      	ldr	r0, [pc, #40]	@ (80005c8 <main+0x58>)
 80005a0:	f006 fb9a 	bl	8006cd8 <siprintf>
 80005a4:	6078      	str	r0, [r7, #4]
        CDC_Transmit_FS((uint8_t*)msg, len);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <main+0x58>)
 80005ae:	f005 ff41 	bl	8006434 <CDC_Transmit_FS>

        HAL_Delay(read_delay_ms); // Điều chỉnh tốc độ gửi dữ liệu
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <main+0x5c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa28 	bl	8000a0c <HAL_Delay>
    while (1) {
 80005bc:	bf00      	nop
 80005be:	e7e4      	b.n	800058a <main+0x1a>
 80005c0:	2000016c 	.word	0x2000016c
 80005c4:	08007630 	.word	0x08007630
 80005c8:	20000170 	.word	0x20000170
 80005cc:	20000000 	.word	0x20000000

080005d0 <ADC1_Init>:
    }
}

// ====== Cấu hình ADC 8-bit ======
void ADC1_Init(void) {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
    // Bật clock ADC1
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <ADC1_Init+0x64>)
 80005d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d8:	4a16      	ldr	r2, [pc, #88]	@ (8000634 <ADC1_Init+0x64>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005de:	6453      	str	r3, [r2, #68]	@ 0x44

    // Cấu hình độ phân giải ADC = 8-bit (RES[1:0] = 10)
    ADC1->CR1 &= ~ADC_CR1_RES;  // Xóa các bit RES trước
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <ADC1_Init+0x68>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <ADC1_Init+0x68>)
 80005e6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80005ea:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |= (0b10 << ADC_CR1_RES_Pos);  // Đặt độ phân giải 8-bit
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <ADC1_Init+0x68>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a11      	ldr	r2, [pc, #68]	@ (8000638 <ADC1_Init+0x68>)
 80005f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f6:	6053      	str	r3, [r2, #4]

    // Cấu hình kênh ADC1 cho PA0 (Channel 1)
    ADC1->SQR3 = 0;  // Chọn kênh 0 (PA0)
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <ADC1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SQR1 = 0;  // Chỉ một lần chuyển đổi (1 conversion)
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <ADC1_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Thiết lập thời gian lấy mẫu (Sampling time)
    ADC1->SMPR2 |= (0b011 << ADC_SMPR2_SMP1_Pos);  // 56 chu kỳ (giảm nhiễu)
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <ADC1_Init+0x68>)
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <ADC1_Init+0x68>)
 800060a:	f043 0318 	orr.w	r3, r3, #24
 800060e:	6113      	str	r3, [r2, #16]

    // Cấu hình ADC ở chế độ một lần chuyển đổi (Single Conversion)
    ADC1->CR1 &= ~ADC_CR1_SCAN;  // Không dùng scan mode
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <ADC1_Init+0x68>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	4a08      	ldr	r2, [pc, #32]	@ (8000638 <ADC1_Init+0x68>)
 8000616:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800061a:	6053      	str	r3, [r2, #4]
    ADC1->CR2 |= ADC_CR2_ADON;  // Bật ADC
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <ADC1_Init+0x68>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <ADC1_Init+0x68>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6093      	str	r3, [r2, #8]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40012000 	.word	0x40012000

0800063c <ADC1_Read>:

// ====== Đọc ADC 8-bit ======
uint8_t ADC1_Read(void) {
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;  // Bắt đầu chuyển đổi
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <ADC1_Read+0x30>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	4a09      	ldr	r2, [pc, #36]	@ (800066c <ADC1_Read+0x30>)
 8000646:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800064a:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));  // Chờ hoàn thành
 800064c:	bf00      	nop
 800064e:	4b07      	ldr	r3, [pc, #28]	@ (800066c <ADC1_Read+0x30>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f9      	beq.n	800064e <ADC1_Read+0x12>
    return (uint8_t) ADC1->DR;  // Đọc giá trị ADC 8-bit
 800065a:	4b04      	ldr	r3, [pc, #16]	@ (800066c <ADC1_Read+0x30>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	b2db      	uxtb	r3, r3
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40012000 	.word	0x40012000

08000670 <SystemClock_Config>:

// ====== Cấu hình clock hệ thống ======
void SystemClock_Config(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	@ 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f006 fb4a 	bl	8006d18 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a26      	ldr	r2, [pc, #152]	@ (8000738 <SystemClock_Config+0xc8>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemClock_Config+0xc8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a20      	ldr	r2, [pc, #128]	@ (800073c <SystemClock_Config+0xcc>)
 80006ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <SystemClock_Config+0xcc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 80006e0:	230f      	movs	r3, #15
 80006e2:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 80006e4:	2390      	movs	r3, #144	@ 0x90
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 80006ec:	2305      	movs	r3, #5
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fe95 	bl	8002424 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x94>
        while(1);
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <SystemClock_Config+0x90>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2103      	movs	r1, #3
 8000720:	4618      	mov	r0, r3
 8000722:	f002 f8f7 	bl	8002914 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc0>
        while(1);
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <SystemClock_Config+0xbc>
    }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	@ 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_GPIO_Init>:

// ====== Cấu hình GPIO ======
static void MX_GPIO_Init(void) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();  // Bật clock GPIOA
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_GPIO_Init+0x30>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <MX_GPIO_Init+0x30>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_GPIO_Init+0x30>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <Error_Handler>:

void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  __disable_irq();
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	@ (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000794:	6453      	str	r3, [r2, #68]	@ 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 f8d1 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <OTG_FS_IRQHandler+0x10>)
 8000836:	f000 fce7 	bl	8001208 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000166c 	.word	0x2000166c

08000844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <_sbrk+0x5c>)
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <_sbrk+0x60>)
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <_sbrk+0x64>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <_sbrk+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000874:	f006 fa58 	bl	8006d28 <__errno>
 8000878:	4603      	mov	r3, r0
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	e009      	b.n	8000898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <_sbrk+0x64>)
 8000894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20020000 	.word	0x20020000
 80008a4:	00000400 	.word	0x00000400
 80008a8:	20000184 	.word	0x20000184
 80008ac:	20001eb8 	.word	0x20001eb8

080008b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800090c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008d8:	f7ff ffea 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	@ (8000914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f006 fa17 	bl	8006d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000906:	f7ff fe33 	bl	8000570 <main>
  bx  lr    
 800090a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800090c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000918:	080076d4 	.word	0x080076d4
  ldr r2, =_sbss
 800091c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000920:	20001eb8 	.word	0x20001eb8

08000924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <HAL_Init+0x40>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000938:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <HAL_Init+0x40>)
 800093e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_Init+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_Init+0x40>)
 800094a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f94f 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff ff10 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023c00 	.word	0x40023c00

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f967 	bl	8000c5e <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f92f 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000004 	.word	0x20000004
 80009c4:	2000000c 	.word	0x2000000c
 80009c8:	20000008 	.word	0x20000008

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	2000000c 	.word	0x2000000c
 80009f0:	20000188 	.word	0x20000188

080009f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000188 	.word	0x20000188

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff ffee 	bl	80009f4 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffde 	bl	80009f4 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000000c 	.word	0x2000000c

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4907      	ldr	r1, [pc, #28]	@ (8000af0 <__NVIC_EnableIRQ+0x38>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	@ (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	@ (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	@ 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	@ 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff8e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff29 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff3e 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff8e 	bl	8000b48 <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff31 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffa2 	bl	8000bb0 <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e159      	b.n	8000f48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	f040 8148 	bne.w	8000f42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d130      	bne.n	8000d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d00:	2201      	movs	r2, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	f003 0201 	and.w	r2, r3, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d017      	beq.n	8000d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d123      	bne.n	8000dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	69b9      	ldr	r1, [r7, #24]
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0203 	and.w	r2, r3, #3
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80a2 	beq.w	8000f42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b57      	ldr	r3, [pc, #348]	@ (8000f60 <HAL_GPIO_Init+0x2e8>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	4a56      	ldr	r2, [pc, #344]	@ (8000f60 <HAL_GPIO_Init+0x2e8>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0e:	4b54      	ldr	r3, [pc, #336]	@ (8000f60 <HAL_GPIO_Init+0x2e8>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1a:	4a52      	ldr	r2, [pc, #328]	@ (8000f64 <HAL_GPIO_Init+0x2ec>)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a49      	ldr	r2, [pc, #292]	@ (8000f68 <HAL_GPIO_Init+0x2f0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x202>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a48      	ldr	r2, [pc, #288]	@ (8000f6c <HAL_GPIO_Init+0x2f4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x1fe>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a47      	ldr	r2, [pc, #284]	@ (8000f70 <HAL_GPIO_Init+0x2f8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x1fa>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a46      	ldr	r2, [pc, #280]	@ (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x1f6>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a45      	ldr	r2, [pc, #276]	@ (8000f78 <HAL_GPIO_Init+0x300>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x1f2>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e008      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e004      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e002      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	f002 0203 	and.w	r2, r2, #3
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4093      	lsls	r3, r2
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e8c:	4935      	ldr	r1, [pc, #212]	@ (8000f64 <HAL_GPIO_Init+0x2ec>)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9a:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <HAL_GPIO_Init+0x304>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8000f7c <HAL_GPIO_Init+0x304>)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f7c <HAL_GPIO_Init+0x304>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee8:	4a24      	ldr	r2, [pc, #144]	@ (8000f7c <HAL_GPIO_Init+0x304>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eee:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <HAL_GPIO_Init+0x304>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f12:	4a1a      	ldr	r2, [pc, #104]	@ (8000f7c <HAL_GPIO_Init+0x304>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_GPIO_Init+0x304>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <HAL_GPIO_Init+0x304>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	2b0f      	cmp	r3, #15
 8000f4c:	f67f aea2 	bls.w	8000c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3724      	adds	r7, #36	@ 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40013c00 	.word	0x40013c00

08000f80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e101      	b.n	8001196 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d106      	bne.n	8000fb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f005 fb89 	bl	80066c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fc0:	d102      	bne.n	8000fc8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 ff70 	bl	8002eb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7c1a      	ldrb	r2, [r3, #16]
 8000fda:	f88d 2000 	strb.w	r2, [sp]
 8000fde:	3304      	adds	r3, #4
 8000fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe2:	f001 fe4f 	bl	8002c84 <USB_CoreInit>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0ce      	b.n	8001196 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 ff68 	bl	8002ed4 <USB_SetCurrentMode>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2202      	movs	r2, #2
 800100e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e0bf      	b.n	8001196 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e04a      	b.n	80010b2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	3315      	adds	r3, #21
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3314      	adds	r3, #20
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	b298      	uxth	r0, r3
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	332e      	adds	r3, #46	@ 0x2e
 8001058:	4602      	mov	r2, r0
 800105a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	3318      	adds	r3, #24
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	331c      	adds	r3, #28
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3320      	adds	r3, #32
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	3324      	adds	r3, #36	@ 0x24
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	791b      	ldrb	r3, [r3, #4]
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3af      	bcc.n	800101c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e044      	b.n	800114c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	429a      	cmp	r2, r3
 8001154:	d3b5      	bcc.n	80010c2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7c1a      	ldrb	r2, [r3, #16]
 800115e:	f88d 2000 	strb.w	r2, [sp]
 8001162:	3304      	adds	r3, #4
 8001164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001166:	f001 ff01 	bl	8002f6c <USB_DevInit>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e00c      	b.n	8001196 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f002 ff4b 	bl	800402a <USB_DevDisconnect>

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_PCD_Start+0x1c>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e022      	b.n	8001200 <HAL_PCD_Start+0x62>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d105      	bne.n	80011e2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fe52 	bl	8002e90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fef9 	bl	8003fe8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b08d      	sub	sp, #52	@ 0x34
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f002 ffb7 	bl	8004192 <USB_GetMode>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 848c 	bne.w	8001b44 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f002 ff1b 	bl	800406c <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8482 	beq.w	8001b42 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f002 ff08 	bl	800406c <USB_ReadInterrupts>
 800125c:	4603      	mov	r3, r0
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d107      	bne.n	8001276 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f002 0202 	and.w	r2, r2, #2
 8001274:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fef6 	bl	800406c <USB_ReadInterrupts>
 8001280:	4603      	mov	r3, r0
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b10      	cmp	r3, #16
 8001288:	d161      	bne.n	800134e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699a      	ldr	r2, [r3, #24]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0210 	bic.w	r2, r2, #16
 8001298:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f003 020f 	and.w	r2, r3, #15
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	3304      	adds	r3, #4
 80012b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	0c5b      	lsrs	r3, r3, #17
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d124      	bne.n	8001310 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d035      	beq.n	800133e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	6a38      	ldr	r0, [r7, #32]
 80012e6:	f002 fd2d 	bl	8003d44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f6:	441a      	add	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001308:	441a      	add	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	615a      	str	r2, [r3, #20]
 800130e:	e016      	b.n	800133e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	0c5b      	lsrs	r3, r3, #17
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	2b06      	cmp	r3, #6
 800131a:	d110      	bne.n	800133e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001322:	2208      	movs	r2, #8
 8001324:	4619      	mov	r1, r3
 8001326:	6a38      	ldr	r0, [r7, #32]
 8001328:	f002 fd0c 	bl	8003d44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001338:	441a      	add	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0210 	orr.w	r2, r2, #16
 800134c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f002 fe8a 	bl	800406c <USB_ReadInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800135e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001362:	f040 80a7 	bne.w	80014b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fe8f 	bl	8004092 <USB_ReadDevAllOutEpInterrupt>
 8001374:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001376:	e099      	b.n	80014ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 808e 	beq.w	80014a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f002 feb3 	bl	80040fa <USB_ReadDevOutEPInterrupt>
 8001394:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00c      	beq.n	80013ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	015a      	lsls	r2, r3, #5
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013ac:	461a      	mov	r2, r3
 80013ae:	2301      	movs	r3, #1
 80013b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fea3 	bl	8002100 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00c      	beq.n	80013de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013d0:	461a      	mov	r2, r3
 80013d2:	2308      	movs	r3, #8
 80013d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 ff79 	bl	80022d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ea:	015a      	lsls	r2, r3, #5
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	4413      	add	r3, r2
 80013f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013f4:	461a      	mov	r2, r3
 80013f6:	2310      	movs	r3, #16
 80013f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d030      	beq.n	8001466 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140c:	2b80      	cmp	r3, #128	@ 0x80
 800140e:	d109      	bne.n	8001424 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800141e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001422:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	3304      	adds	r3, #4
 8001438:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	78db      	ldrb	r3, [r3, #3]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2200      	movs	r2, #0
 8001446:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4619      	mov	r1, r3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f005 fa34 	bl	80068bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001460:	461a      	mov	r2, r3
 8001462:	2302      	movs	r3, #2
 8001464:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	015a      	lsls	r2, r3, #5
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800147c:	461a      	mov	r2, r3
 800147e:	2320      	movs	r3, #32
 8001480:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001498:	461a      	mov	r2, r3
 800149a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	3301      	adds	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80014a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f47f af62 	bne.w	8001378 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fdd7 	bl	800406c <USB_ReadInterrupts>
 80014be:	4603      	mov	r3, r0
 80014c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014c8:	f040 80db 	bne.w	8001682 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fdf8 	bl	80040c6 <USB_ReadDevAllInEpInterrupt>
 80014d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014dc:	e0cd      	b.n	800167a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80c2 	beq.w	800166e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fe1e 	bl	8004136 <USB_ReadDevInEPInterrupt>
 80014fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d057      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	2201      	movs	r2, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800151a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	69f9      	ldr	r1, [r7, #28]
 8001522:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001526:	4013      	ands	r3, r2
 8001528:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	015a      	lsls	r2, r3, #5
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001536:	461a      	mov	r2, r3
 8001538:	2301      	movs	r3, #1
 800153a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	799b      	ldrb	r3, [r3, #6]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d132      	bne.n	80015aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3320      	adds	r3, #32
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4403      	add	r3, r0
 8001564:	331c      	adds	r3, #28
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4419      	add	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4403      	add	r3, r0
 8001578:	3320      	adds	r3, #32
 800157a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	2b00      	cmp	r3, #0
 8001580:	d113      	bne.n	80015aa <HAL_PCD_IRQHandler+0x3a2>
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3324      	adds	r3, #36	@ 0x24
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d108      	bne.n	80015aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80015a2:	461a      	mov	r2, r3
 80015a4:	2101      	movs	r1, #1
 80015a6:	f002 fe25 	bl	80041f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f005 f908 	bl	80067c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	2308      	movs	r3, #8
 80015d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2310      	movs	r3, #16
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2340      	movs	r3, #64	@ 0x40
 8001608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001616:	6a38      	ldr	r0, [r7, #32]
 8001618:	f001 fe0c 	bl	8003234 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800161c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	3310      	adds	r3, #16
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	78db      	ldrb	r3, [r3, #3]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2200      	movs	r2, #0
 800163c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f005 f94b 	bl	80068e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001656:	461a      	mov	r2, r3
 8001658:	2302      	movs	r3, #2
 800165a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001666:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fcbd 	bl	8001fe8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800167a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f af2e 	bne.w	80014de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f002 fcf0 	bl	800406c <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001692:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001696:	d122      	bne.n	80016de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fea3 	bl	800240c <HAL_PCDEx_LPM_Callback>
 80016c6:	e002      	b.n	80016ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f005 f8e9 	bl	80068a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fcc2 	bl	800406c <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016f2:	d112      	bne.n	800171a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f005 f8a5 	bl	8006854 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001718:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f002 fca4 	bl	800406c <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800172a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800172e:	f040 80b7 	bne.w	80018a0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2110      	movs	r1, #16
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fd71 	bl	8003234 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001756:	e046      	b.n	80017e6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800175a:	015a      	lsls	r2, r3, #5
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	4413      	add	r3, r2
 8001760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001764:	461a      	mov	r2, r3
 8001766:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800176a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176e:	015a      	lsls	r2, r3, #5
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	4413      	add	r3, r2
 8001774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800177c:	0151      	lsls	r1, r2, #5
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	440a      	add	r2, r1
 8001782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001786:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800178a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800178c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178e:	015a      	lsls	r2, r3, #5
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4413      	add	r3, r2
 8001794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001798:	461a      	mov	r2, r3
 800179a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800179e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017b0:	0151      	lsls	r1, r2, #5
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	440a      	add	r2, r1
 80017b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017d0:	0151      	lsls	r1, r2, #5
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	440a      	add	r2, r1
 80017d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e2:	3301      	adds	r3, #1
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	791b      	ldrb	r3, [r3, #4]
 80017ea:	461a      	mov	r2, r3
 80017ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d3b2      	bcc.n	8001758 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001800:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001804:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7bdb      	ldrb	r3, [r3, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d016      	beq.n	800183c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800181e:	f043 030b 	orr.w	r3, r3, #11
 8001822:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001834:	f043 030b 	orr.w	r3, r3, #11
 8001838:	6453      	str	r3, [r2, #68]	@ 0x44
 800183a:	e015      	b.n	8001868 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800184a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800184e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001852:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001862:	f043 030b 	orr.w	r3, r3, #11
 8001866:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001876:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800187a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800188a:	461a      	mov	r2, r3
 800188c:	f002 fcb2 	bl	80041f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800189e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 fbe1 	bl	800406c <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018b4:	d123      	bne.n	80018fe <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fc77 	bl	80041ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fd2e 	bl	8003326 <USB_GetDevSpeed>
 80018ca:	4603      	mov	r3, r0
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681c      	ldr	r4, [r3, #0]
 80018d6:	f001 f9c9 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 80018da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018e0:	461a      	mov	r2, r3
 80018e2:	4620      	mov	r0, r4
 80018e4:	f001 fa32 	bl	8002d4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f004 ff94 	bl	8006816 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80018fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fbb2 	bl	800406c <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b08      	cmp	r3, #8
 8001910:	d10a      	bne.n	8001928 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f004 ff71 	bl	80067fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f002 0208 	and.w	r2, r2, #8
 8001926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 fb9d 	bl	800406c <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001938:	2b80      	cmp	r3, #128	@ 0x80
 800193a:	d123      	bne.n	8001984 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
 800194c:	e014      	b.n	8001978 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d105      	bne.n	8001972 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fb0a 	bl	8001f86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	3301      	adds	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	791b      	ldrb	r3, [r3, #4]
 800197c:	461a      	mov	r2, r3
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	4293      	cmp	r3, r2
 8001982:	d3e4      	bcc.n	800194e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fb6f 	bl	800406c <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001994:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001998:	d13c      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
 800199e:	e02b      	b.n	80019f8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3318      	adds	r3, #24
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d115      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da12      	bge.n	80019f2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	3317      	adds	r3, #23
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 faca 	bl	8001f86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	3301      	adds	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	461a      	mov	r2, r3
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d3cd      	bcc.n	80019a0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fb27 	bl	800406c <USB_ReadInterrupts>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a28:	d156      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2e:	e045      	b.n	8001abc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d12e      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da2b      	bge.n	8001ab6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a6a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d121      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10a      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ab2:	6053      	str	r3, [r2, #4]
            break;
 8001ab4:	e008      	b.n	8001ac8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	3301      	adds	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d3b3      	bcc.n	8001a30 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 fac5 	bl	800406c <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aec:	d10a      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f004 ff08 	bl	8006904 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 faaf 	bl	800406c <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d115      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f004 fef8 	bl	8006920 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	e000      	b.n	8001b44 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001b42:	bf00      	nop
    }
  }
}
 8001b44:	3734      	adds	r7, #52	@ 0x34
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd90      	pop	{r4, r7, pc}

08001b4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_PCD_SetAddress+0x1a>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e012      	b.n	8001b8a <HAL_PCD_SetAddress+0x40>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fa0e 	bl	8003f9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	4608      	mov	r0, r1
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	70fb      	strb	r3, [r7, #3]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	803b      	strh	r3, [r7, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da0f      	bge.n	8001bd8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	f003 020f 	and.w	r2, r3, #15
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	3310      	adds	r3, #16
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	3304      	adds	r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	705a      	strb	r2, [r3, #1]
 8001bd6:	e00f      	b.n	8001bf8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	f003 020f 	and.w	r2, r3, #15
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c04:	883b      	ldrh	r3, [r7, #0]
 8001c06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	78ba      	ldrb	r2, [r7, #2]
 8001c12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	785b      	ldrb	r3, [r3, #1]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c26:	78bb      	ldrb	r3, [r7, #2]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d102      	bne.n	8001c32 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_PCD_EP_Open+0xae>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e00e      	b.n	8001c5e <HAL_PCD_EP_Open+0xcc>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fb8e 	bl	8003370 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da0f      	bge.n	8001c9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	f003 020f 	and.w	r2, r3, #15
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3310      	adds	r3, #16
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	705a      	strb	r2, [r3, #1]
 8001c98:	e00f      	b.n	8001cba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_PCD_EP_Close+0x6e>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e00e      	b.n	8001cf2 <HAL_PCD_EP_Close+0x8c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68f9      	ldr	r1, [r7, #12]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fbcc 	bl	8003480 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	460b      	mov	r3, r1
 8001d08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	799b      	ldrb	r3, [r3, #6]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d102      	bne.n	8001d56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	799b      	ldrb	r3, [r3, #6]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6979      	ldr	r1, [r7, #20]
 8001d62:	f001 fc69 	bl	8003638 <USB_EPStartXfer>

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 020f 	and.w	r2, r3, #15
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	460b      	mov	r3, r1
 8001dae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db0:	7afb      	ldrb	r3, [r7, #11]
 8001db2:	f003 020f 	and.w	r2, r3, #15
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	3310      	adds	r3, #16
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	799b      	ldrb	r3, [r3, #6]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	799b      	ldrb	r3, [r3, #6]
 8001e02:	461a      	mov	r2, r3
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	f001 fc17 	bl	8003638 <USB_EPStartXfer>

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	7912      	ldrb	r2, [r2, #4]
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e04f      	b.n	8001ed2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da0f      	bge.n	8001e5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	f003 020f 	and.w	r2, r3, #15
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	3310      	adds	r3, #16
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3304      	adds	r3, #4
 8001e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	705a      	strb	r2, [r3, #1]
 8001e58:	e00d      	b.n	8001e76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_PCD_EP_SetStall+0x82>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e01d      	b.n	8001ed2 <HAL_PCD_EP_SetStall+0xbe>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 ffa5 	bl	8003df4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7999      	ldrb	r1, [r3, #6]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f002 f996 	bl	80041f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	7912      	ldrb	r2, [r2, #4]
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e042      	b.n	8001f7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da0f      	bge.n	8001f20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	3310      	adds	r3, #16
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	705a      	strb	r2, [r3, #1]
 8001f1e:	e00f      	b.n	8001f40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_EP_ClrStall+0x86>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e00e      	b.n	8001f7e <HAL_PCD_EP_ClrStall+0xa4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 ffae 	bl	8003ed0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da0c      	bge.n	8001fb4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	3310      	adds	r3, #16
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	3304      	adds	r3, #4
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e00c      	b.n	8001fce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 fdcd 	bl	8003b74 <USB_EPStopXfer>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fde:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3310      	adds	r3, #16
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d901      	bls.n	8002020 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e06b      	b.n	80020f8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	429a      	cmp	r2, r3
 8002034:	d902      	bls.n	800203c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3303      	adds	r3, #3
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002044:	e02a      	b.n	800209c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	429a      	cmp	r2, r3
 800205a:	d902      	bls.n	8002062 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3303      	adds	r3, #3
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68d9      	ldr	r1, [r3, #12]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4603      	mov	r3, r0
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f001 fe22 	bl	8003cc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	441a      	add	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	441a      	add	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d809      	bhi.n	80020c6 <PCD_WriteEmptyTxFifo+0xde>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d203      	bcs.n	80020c6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1bf      	bne.n	8002046 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d811      	bhi.n	80020f6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	2201      	movs	r2, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	6939      	ldr	r1, [r7, #16]
 80020ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020f2:	4013      	ands	r3, r2
 80020f4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	333c      	adds	r3, #60	@ 0x3c
 8002118:	3304      	adds	r3, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	799b      	ldrb	r3, [r3, #6]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d17b      	bne.n	800222e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	4a61      	ldr	r2, [pc, #388]	@ (80022c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	f240 80b9 	bls.w	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80b3 	beq.w	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002162:	461a      	mov	r2, r3
 8002164:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002168:	6093      	str	r3, [r2, #8]
 800216a:	e0a7      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002182:	461a      	mov	r2, r3
 8002184:	2320      	movs	r3, #32
 8002186:	6093      	str	r3, [r2, #8]
 8002188:	e098      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 8093 	bne.w	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	4a4b      	ldr	r2, [pc, #300]	@ (80022c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d90f      	bls.n	80021be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ba:	6093      	str	r3, [r2, #8]
 80021bc:	e07e      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	0159      	lsls	r1, r3, #5
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	440b      	add	r3, r1
 80021e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	1ad2      	subs	r2, r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d114      	bne.n	8002220 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002208:	461a      	mov	r2, r3
 800220a:	2101      	movs	r1, #1
 800220c:	f001 fff2 	bl	80041f4 <USB_EP0_OutStart>
 8002210:	e006      	b.n	8002220 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	441a      	add	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4619      	mov	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f004 fab2 	bl	8006790 <HAL_PCD_DataOutStageCallback>
 800222c:	e046      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4a26      	ldr	r2, [pc, #152]	@ (80022cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d124      	bne.n	8002280 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800224c:	461a      	mov	r2, r3
 800224e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002252:	6093      	str	r3, [r2, #8]
 8002254:	e032      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	2320      	movs	r3, #32
 8002270:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f004 fa89 	bl	8006790 <HAL_PCD_DataOutStageCallback>
 800227e:	e01d      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d108      	bne.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022a8:	461a      	mov	r2, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	f001 ffa2 	bl	80041f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f004 fa6a 	bl	8006790 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	4f54300a 	.word	0x4f54300a
 80022cc:	4f54310a 	.word	0x4f54310a

080022d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	333c      	adds	r3, #60	@ 0x3c
 80022e8:	3304      	adds	r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <PCD_EP_OutSetupPacket_int+0x88>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d90e      	bls.n	8002324 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231c:	461a      	mov	r2, r3
 800231e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002322:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f004 fa21 	bl	800676c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <PCD_EP_OutSetupPacket_int+0x88>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d90c      	bls.n	800234c <PCD_EP_OutSetupPacket_int+0x7c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	799b      	ldrb	r3, [r3, #6]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002344:	461a      	mov	r2, r3
 8002346:	2101      	movs	r1, #1
 8002348:	f001 ff54 	bl	80041f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	4f54300a 	.word	0x4f54300a

0800235c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	4613      	mov	r3, r2
 800236a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d107      	bne.n	800238a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800237a:	883b      	ldrh	r3, [r7, #0]
 800237c:	0419      	lsls	r1, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	430a      	orrs	r2, r1
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
 8002388:	e028      	b.n	80023dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e00d      	b.n	80023ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	3340      	adds	r3, #64	@ 0x40
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4413      	add	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	3301      	adds	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	3b01      	subs	r3, #1
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3ec      	bcc.n	800239e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023c4:	883b      	ldrh	r3, [r7, #0]
 80023c6:	0418      	lsls	r0, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	4302      	orrs	r2, r0
 80023d4:	3340      	adds	r3, #64	@ 0x40
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e267      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d075      	beq.n	800252e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002442:	4b88      	ldr	r3, [pc, #544]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b04      	cmp	r3, #4
 800244c:	d00c      	beq.n	8002468 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244e:	4b85      	ldr	r3, [pc, #532]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002456:	2b08      	cmp	r3, #8
 8002458:	d112      	bne.n	8002480 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4b82      	ldr	r3, [pc, #520]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002466:	d10b      	bne.n	8002480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	4b7e      	ldr	r3, [pc, #504]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05b      	beq.n	800252c <HAL_RCC_OscConfig+0x108>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d157      	bne.n	800252c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e242      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002488:	d106      	bne.n	8002498 <HAL_RCC_OscConfig+0x74>
 800248a:	4b76      	ldr	r3, [pc, #472]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a75      	ldr	r2, [pc, #468]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xb0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x98>
 80024a2:	4b70      	ldr	r3, [pc, #448]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xb0>
 80024bc:	4b69      	ldr	r3, [pc, #420]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a68      	ldr	r2, [pc, #416]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b66      	ldr	r3, [pc, #408]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a65      	ldr	r2, [pc, #404]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fa8a 	bl	80009f4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe fa86 	bl	80009f4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	@ 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e207      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xc0>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fa76 	bl	80009f4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fa72 	bl	80009f4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	@ 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1f3      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b51      	ldr	r3, [pc, #324]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0xe8>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d063      	beq.n	8002602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800253a:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002546:	4b47      	ldr	r3, [pc, #284]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b44      	ldr	r3, [pc, #272]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b41      	ldr	r3, [pc, #260]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x152>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1c7      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3b      	ldr	r3, [pc, #236]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4937      	ldr	r1, [pc, #220]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b34      	ldr	r3, [pc, #208]	@ (8002668 <HAL_RCC_OscConfig+0x244>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fa2b 	bl	80009f4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fa27 	bl	80009f4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1a8      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b28      	ldr	r3, [pc, #160]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4925      	ldr	r1, [pc, #148]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_RCC_OscConfig+0x244>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fa0a 	bl	80009f4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe fa06 	bl	80009f4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e187      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d036      	beq.n	800267c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <HAL_RCC_OscConfig+0x248>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe f9ea 	bl	80009f4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe f9e6 	bl	80009f4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e167      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCC_OscConfig+0x240>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x200>
 8002642:	e01b      	b.n	800267c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002644:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_RCC_OscConfig+0x248>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe f9d3 	bl	80009f4 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	e00e      	b.n	8002670 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002652:	f7fe f9cf 	bl	80009f4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d907      	bls.n	8002670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e150      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
 8002664:	40023800 	.word	0x40023800
 8002668:	42470000 	.word	0x42470000
 800266c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	4b88      	ldr	r3, [pc, #544]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ea      	bne.n	8002652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8097 	beq.w	80027b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b81      	ldr	r3, [pc, #516]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b7d      	ldr	r3, [pc, #500]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b77      	ldr	r3, [pc, #476]	@ (8002898 <HAL_RCC_OscConfig+0x474>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b74      	ldr	r3, [pc, #464]	@ (8002898 <HAL_RCC_OscConfig+0x474>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a73      	ldr	r2, [pc, #460]	@ (8002898 <HAL_RCC_OscConfig+0x474>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe f98f 	bl	80009f4 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe f98b 	bl	80009f4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e10c      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002898 <HAL_RCC_OscConfig+0x474>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x2ea>
 8002700:	4b64      	ldr	r3, [pc, #400]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002704:	4a63      	ldr	r2, [pc, #396]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	@ 0x70
 800270c:	e01c      	b.n	8002748 <HAL_RCC_OscConfig+0x324>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x30c>
 8002716:	4b5f      	ldr	r3, [pc, #380]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271a:	4a5e      	ldr	r2, [pc, #376]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6713      	str	r3, [r2, #112]	@ 0x70
 8002722:	4b5c      	ldr	r3, [pc, #368]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002726:	4a5b      	ldr	r2, [pc, #364]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	@ 0x70
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0x324>
 8002730:	4b58      	ldr	r3, [pc, #352]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	4a57      	ldr	r2, [pc, #348]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	@ 0x70
 800273c:	4b55      	ldr	r3, [pc, #340]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	4a54      	ldr	r2, [pc, #336]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002742:	f023 0304 	bic.w	r3, r3, #4
 8002746:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe f950 	bl	80009f4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe f94c 	bl	80009f4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0cb      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0ee      	beq.n	8002758 <HAL_RCC_OscConfig+0x334>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7fe f93a 	bl	80009f4 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe f936 	bl	80009f4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0b5      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279a:	4b3e      	ldr	r3, [pc, #248]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ee      	bne.n	8002784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b39      	ldr	r3, [pc, #228]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	4a38      	ldr	r2, [pc, #224]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a1 	beq.w	8002904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c2:	4b34      	ldr	r3, [pc, #208]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d05c      	beq.n	8002888 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d141      	bne.n	800285a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b31      	ldr	r3, [pc, #196]	@ (800289c <HAL_RCC_OscConfig+0x478>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe f90a 	bl	80009f4 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe f906 	bl	80009f4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e087      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	041b      	lsls	r3, r3, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	491b      	ldr	r1, [pc, #108]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_RCC_OscConfig+0x478>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe f8df 	bl	80009f4 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe f8db 	bl	80009f4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e05c      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x416>
 8002858:	e054      	b.n	8002904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <HAL_RCC_OscConfig+0x478>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe f8c8 	bl	80009f4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe f8c4 	bl	80009f4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e045      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_RCC_OscConfig+0x470>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x444>
 8002886:	e03d      	b.n	8002904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e038      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
 8002894:	40023800 	.word	0x40023800
 8002898:	40007000 	.word	0x40007000
 800289c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_RCC_OscConfig+0x4ec>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d028      	beq.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d121      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d11a      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0cc      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b68      	ldr	r3, [pc, #416]	@ (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d90c      	bls.n	8002950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b65      	ldr	r3, [pc, #404]	@ (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b63      	ldr	r3, [pc, #396]	@ (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b59      	ldr	r3, [pc, #356]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a58      	ldr	r2, [pc, #352]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002972:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002980:	4b53      	ldr	r3, [pc, #332]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a52      	ldr	r2, [pc, #328]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800298a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b50      	ldr	r3, [pc, #320]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	494d      	ldr	r1, [pc, #308]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d044      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b47      	ldr	r3, [pc, #284]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d119      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e067      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4934      	ldr	r1, [pc, #208]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fd fff6 	bl	80009f4 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fd fff2 	bl	80009f4 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e04f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b25      	ldr	r3, [pc, #148]	@ (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d20c      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b19      	ldr	r3, [pc, #100]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4916      	ldr	r1, [pc, #88]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a86:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490e      	ldr	r1, [pc, #56]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a9a:	f000 f821 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	490a      	ldr	r1, [pc, #40]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a09      	ldr	r2, [pc, #36]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd ff56 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	08007680 	.word	0x08007680
 8002ad8:	20000004 	.word	0x20000004
 8002adc:	20000008 	.word	0x20000008

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae4:	b090      	sub	sp, #64	@ 0x40
 8002ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af8:	4b59      	ldr	r3, [pc, #356]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d00d      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x40>
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	f200 80a1 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b12:	e09b      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b53      	ldr	r3, [pc, #332]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b18:	e09b      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1a:	4b53      	ldr	r3, [pc, #332]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b1e:	e098      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b20:	4b4f      	ldr	r3, [pc, #316]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d028      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b36:	4b4a      	ldr	r3, [pc, #296]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	099b      	lsrs	r3, r3, #6
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4b47      	ldr	r3, [pc, #284]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b4c:	fb03 f201 	mul.w	r2, r3, r1
 8002b50:	2300      	movs	r3, #0
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	4a43      	ldr	r2, [pc, #268]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b60:	460a      	mov	r2, r1
 8002b62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b66:	4413      	add	r3, r2
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	61fa      	str	r2, [r7, #28]
 8002b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b7a:	f7fd fb81 	bl	8000280 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4613      	mov	r3, r2
 8002b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b86:	e053      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b88:	4b35      	ldr	r3, [pc, #212]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	2200      	movs	r2, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	617a      	str	r2, [r7, #20]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b9a:	f04f 0b00 	mov.w	fp, #0
 8002b9e:	4652      	mov	r2, sl
 8002ba0:	465b      	mov	r3, fp
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f04f 0100 	mov.w	r1, #0
 8002baa:	0159      	lsls	r1, r3, #5
 8002bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb0:	0150      	lsls	r0, r2, #5
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8002bba:	eb63 090b 	sbc.w	r9, r3, fp
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8002bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	00eb      	lsls	r3, r5, #3
 8002be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be8:	00e2      	lsls	r2, r4, #3
 8002bea:	4614      	mov	r4, r2
 8002bec:	461d      	mov	r5, r3
 8002bee:	eb14 030a 	adds.w	r3, r4, sl
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	eb45 030b 	adc.w	r3, r5, fp
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c06:	4629      	mov	r1, r5
 8002c08:	028b      	lsls	r3, r1, #10
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c10:	4621      	mov	r1, r4
 8002c12:	028a      	lsls	r2, r1, #10
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	60fa      	str	r2, [r7, #12]
 8002c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c24:	f7fd fb2c 	bl	8000280 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3740      	adds	r7, #64	@ 0x40
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	017d7840 	.word	0x017d7840

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000004 	.word	0x20000004

08002c84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c84:	b084      	sub	sp, #16
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	f107 001c 	add.w	r0, r7, #28
 8002c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d123      	bne.n	8002ce6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f001 fae8 	bl	80042b0 <USB_CoreReset>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e01b      	b.n	8002d1e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f001 fadc 	bl	80042b0 <USB_CoreReset>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cfc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d10:	e005      	b.n	8002d1e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d1e:	7fbb      	ldrb	r3, [r7, #30]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10b      	bne.n	8002d3c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f043 0206 	orr.w	r2, r3, #6
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d48:	b004      	add	sp, #16
 8002d4a:	4770      	bx	lr

08002d4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d165      	bne.n	8002e2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a41      	ldr	r2, [pc, #260]	@ (8002e68 <USB_SetTurnaroundTime+0x11c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d906      	bls.n	8002d76 <USB_SetTurnaroundTime+0x2a>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4a40      	ldr	r2, [pc, #256]	@ (8002e6c <USB_SetTurnaroundTime+0x120>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d202      	bcs.n	8002d76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d70:	230f      	movs	r3, #15
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e062      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4a3c      	ldr	r2, [pc, #240]	@ (8002e6c <USB_SetTurnaroundTime+0x120>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d306      	bcc.n	8002d8c <USB_SetTurnaroundTime+0x40>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4a3b      	ldr	r2, [pc, #236]	@ (8002e70 <USB_SetTurnaroundTime+0x124>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d202      	bcs.n	8002d8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d86:	230e      	movs	r3, #14
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e057      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a38      	ldr	r2, [pc, #224]	@ (8002e70 <USB_SetTurnaroundTime+0x124>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d306      	bcc.n	8002da2 <USB_SetTurnaroundTime+0x56>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4a37      	ldr	r2, [pc, #220]	@ (8002e74 <USB_SetTurnaroundTime+0x128>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d202      	bcs.n	8002da2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d9c:	230d      	movs	r3, #13
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e04c      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4a33      	ldr	r2, [pc, #204]	@ (8002e74 <USB_SetTurnaroundTime+0x128>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d306      	bcc.n	8002db8 <USB_SetTurnaroundTime+0x6c>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a32      	ldr	r2, [pc, #200]	@ (8002e78 <USB_SetTurnaroundTime+0x12c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d802      	bhi.n	8002db8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002db2:	230c      	movs	r3, #12
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e041      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4a2f      	ldr	r2, [pc, #188]	@ (8002e78 <USB_SetTurnaroundTime+0x12c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d906      	bls.n	8002dce <USB_SetTurnaroundTime+0x82>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8002e7c <USB_SetTurnaroundTime+0x130>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d802      	bhi.n	8002dce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002dc8:	230b      	movs	r3, #11
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e036      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e7c <USB_SetTurnaroundTime+0x130>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d906      	bls.n	8002de4 <USB_SetTurnaroundTime+0x98>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4a29      	ldr	r2, [pc, #164]	@ (8002e80 <USB_SetTurnaroundTime+0x134>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d802      	bhi.n	8002de4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dde:	230a      	movs	r3, #10
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e02b      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a26      	ldr	r2, [pc, #152]	@ (8002e80 <USB_SetTurnaroundTime+0x134>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d906      	bls.n	8002dfa <USB_SetTurnaroundTime+0xae>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4a25      	ldr	r2, [pc, #148]	@ (8002e84 <USB_SetTurnaroundTime+0x138>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d202      	bcs.n	8002dfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002df4:	2309      	movs	r3, #9
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e020      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	@ (8002e84 <USB_SetTurnaroundTime+0x138>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d306      	bcc.n	8002e10 <USB_SetTurnaroundTime+0xc4>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a20      	ldr	r2, [pc, #128]	@ (8002e88 <USB_SetTurnaroundTime+0x13c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d802      	bhi.n	8002e10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e015      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <USB_SetTurnaroundTime+0x13c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d906      	bls.n	8002e26 <USB_SetTurnaroundTime+0xda>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <USB_SetTurnaroundTime+0x140>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d202      	bcs.n	8002e26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e20:	2307      	movs	r3, #7
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e00a      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e26:	2306      	movs	r3, #6
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e007      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e32:	2309      	movs	r3, #9
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e001      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e38:	2309      	movs	r3, #9
 8002e3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	00d8acbf 	.word	0x00d8acbf
 8002e6c:	00e4e1c0 	.word	0x00e4e1c0
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	01067380 	.word	0x01067380
 8002e78:	011a499f 	.word	0x011a499f
 8002e7c:	01312cff 	.word	0x01312cff
 8002e80:	014ca43f 	.word	0x014ca43f
 8002e84:	016e3600 	.word	0x016e3600
 8002e88:	01a6ab1f 	.word	0x01a6ab1f
 8002e8c:	01e84800 	.word	0x01e84800

08002e90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0201 	bic.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d115      	bne.n	8002f22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f02:	200a      	movs	r0, #10
 8002f04:	f7fd fd82 	bl	8000a0c <HAL_Delay>
      ms += 10U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	330a      	adds	r3, #10
 8002f0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f001 f93f 	bl	8004192 <USB_GetMode>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d01e      	beq.n	8002f58 <USB_SetCurrentMode+0x84>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f1e:	d9f0      	bls.n	8002f02 <USB_SetCurrentMode+0x2e>
 8002f20:	e01a      	b.n	8002f58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d115      	bne.n	8002f54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f34:	200a      	movs	r0, #10
 8002f36:	f7fd fd69 	bl	8000a0c <HAL_Delay>
      ms += 10U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	330a      	adds	r3, #10
 8002f3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 f926 	bl	8004192 <USB_GetMode>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <USB_SetCurrentMode+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f50:	d9f0      	bls.n	8002f34 <USB_SetCurrentMode+0x60>
 8002f52:	e001      	b.n	8002f58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e005      	b.n	8002f64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f5c:	d101      	bne.n	8002f62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e009      	b.n	8002fa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3340      	adds	r3, #64	@ 0x40
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b0e      	cmp	r3, #14
 8002fa4:	d9f2      	bls.n	8002f8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fa6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11c      	bne.n	8002fe8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fe6:	e00b      	b.n	8003000 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003006:	461a      	mov	r2, r3
 8003008:	2300      	movs	r3, #0
 800300a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800300c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10d      	bne.n	8003030 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800301c:	2100      	movs	r1, #0
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f968 	bl	80032f4 <USB_SetDevSpeed>
 8003024:	e008      	b.n	8003038 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003026:	2101      	movs	r1, #1
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f963 	bl	80032f4 <USB_SetDevSpeed>
 800302e:	e003      	b.n	8003038 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003030:	2103      	movs	r1, #3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f95e 	bl	80032f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003038:	2110      	movs	r1, #16
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f8fa 	bl	8003234 <USB_FlushTxFifo>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f924 	bl	8003298 <USB_FlushRxFifo>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003060:	461a      	mov	r2, r3
 8003062:	2300      	movs	r3, #0
 8003064:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306c:	461a      	mov	r2, r3
 800306e:	2300      	movs	r3, #0
 8003070:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003078:	461a      	mov	r2, r3
 800307a:	2300      	movs	r3, #0
 800307c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	e043      	b.n	800310c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800309a:	d118      	bne.n	80030ce <USB_DevInit+0x162>
    {
      if (i == 0U)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ae:	461a      	mov	r2, r3
 80030b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e013      	b.n	80030e0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030c4:	461a      	mov	r2, r3
 80030c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e008      	b.n	80030e0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030da:	461a      	mov	r2, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ec:	461a      	mov	r2, r3
 80030ee:	2300      	movs	r3, #0
 80030f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030fe:	461a      	mov	r2, r3
 8003100:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	3301      	adds	r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003110:	461a      	mov	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4293      	cmp	r3, r2
 8003116:	d3b5      	bcc.n	8003084 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	e043      	b.n	80031a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003134:	d118      	bne.n	8003168 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003148:	461a      	mov	r2, r3
 800314a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e013      	b.n	800317a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800315e:	461a      	mov	r2, r3
 8003160:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e008      	b.n	800317a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	2300      	movs	r3, #0
 8003178:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800319e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	3301      	adds	r3, #1
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031aa:	461a      	mov	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d3b5      	bcc.n	800311e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80031d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f043 0210 	orr.w	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <USB_DevInit+0x2c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f043 0208 	orr.w	r2, r3, #8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003208:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003220:	7dfb      	ldrb	r3, [r7, #23]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800322c:	b004      	add	sp, #16
 800322e:	4770      	bx	lr
 8003230:	803c3800 	.word	0x803c3800

08003234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3301      	adds	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800324e:	d901      	bls.n	8003254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e01b      	b.n	800328c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	daf2      	bge.n	8003242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	019b      	lsls	r3, r3, #6
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003278:	d901      	bls.n	800327e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e006      	b.n	800328c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b20      	cmp	r3, #32
 8003288:	d0f0      	beq.n	800326c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3301      	adds	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032b0:	d901      	bls.n	80032b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e018      	b.n	80032e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	daf2      	bge.n	80032a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2210      	movs	r2, #16
 80032c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032d4:	d901      	bls.n	80032da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e006      	b.n	80032e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d0f0      	beq.n	80032c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	68f9      	ldr	r1, [r7, #12]
 8003310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003326:	b480      	push	{r7}
 8003328:	b087      	sub	sp, #28
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0306 	and.w	r3, r3, #6
 800333e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
 800334a:	e00a      	b.n	8003362 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d002      	beq.n	8003358 <USB_GetDevSpeed+0x32>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b06      	cmp	r3, #6
 8003356:	d102      	bne.n	800335e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003358:	2302      	movs	r3, #2
 800335a:	75fb      	strb	r3, [r7, #23]
 800335c:	e001      	b.n	8003362 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800335e:	230f      	movs	r3, #15
 8003360:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003362:	7dfb      	ldrb	r3, [r7, #23]
}
 8003364:	4618      	mov	r0, r3
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	785b      	ldrb	r3, [r3, #1]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d13a      	bne.n	8003402 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d155      	bne.n	8003470 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	791b      	ldrb	r3, [r3, #4]
 80033de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	059b      	lsls	r3, r3, #22
 80033e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033e8:	4313      	orrs	r3, r2
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e036      	b.n	8003470 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003420:	4313      	orrs	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11a      	bne.n	8003470 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	791b      	ldrb	r3, [r3, #4]
 8003454:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003456:	430b      	orrs	r3, r1
 8003458:	4313      	orrs	r3, r2
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	440a      	add	r2, r1
 8003462:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800346e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d161      	bne.n	8003560 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034b2:	d11f      	bne.n	80034f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	0151      	lsls	r1, r2, #5
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	440a      	add	r2, r1
 80034ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	b29b      	uxth	r3, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	68f9      	ldr	r1, [r7, #12]
 8003510:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003514:	4013      	ands	r3, r2
 8003516:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	b29b      	uxth	r3, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	68f9      	ldr	r1, [r7, #12]
 8003534:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003538:	4013      	ands	r3, r2
 800353a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	0159      	lsls	r1, r3, #5
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	440b      	add	r3, r1
 8003552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003556:	4619      	mov	r1, r3
 8003558:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <USB_DeactivateEndpoint+0x1b0>)
 800355a:	4013      	ands	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
 800355e:	e060      	b.n	8003622 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003572:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003576:	d11f      	bne.n	80035b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	440a      	add	r2, r1
 800358e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003592:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003596:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	2101      	movs	r1, #1
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	43db      	mvns	r3, r3
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035d8:	4013      	ands	r3, r2
 80035da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	43db      	mvns	r3, r3
 80035f6:	68f9      	ldr	r1, [r7, #12]
 80035f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035fc:	4013      	ands	r3, r2
 80035fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0159      	lsls	r1, r3, #5
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	440b      	add	r3, r1
 8003616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361a:	4619      	mov	r1, r3
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <USB_DeactivateEndpoint+0x1b4>)
 800361e:	4013      	ands	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	ec337800 	.word	0xec337800
 8003634:	eff37800 	.word	0xeff37800

08003638 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	@ 0x28
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	2b01      	cmp	r3, #1
 8003656:	f040 817f 	bne.w	8003958 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d132      	bne.n	80036c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	0151      	lsls	r1, r2, #5
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	440a      	add	r2, r1
 8003678:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800367c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003680:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003684:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	0151      	lsls	r1, r2, #5
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	440a      	add	r2, r1
 800369c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036c0:	0cdb      	lsrs	r3, r3, #19
 80036c2:	04db      	lsls	r3, r3, #19
 80036c4:	6113      	str	r3, [r2, #16]
 80036c6:	e097      	b.n	80037f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	0151      	lsls	r1, r2, #5
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	440a      	add	r2, r1
 80036de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036e2:	0cdb      	lsrs	r3, r3, #19
 80036e4:	04db      	lsls	r3, r3, #19
 80036e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003702:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003706:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800370a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11a      	bne.n	8003748 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	d903      	bls.n	8003726 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003740:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003744:	6113      	str	r3, [r2, #16]
 8003746:	e044      	b.n	80037d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4413      	add	r3, r2
 8003752:	1e5a      	subs	r2, r3, #1
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	8afb      	ldrh	r3, [r7, #22]
 800376e:	04d9      	lsls	r1, r3, #19
 8003770:	4ba4      	ldr	r3, [pc, #656]	@ (8003a04 <USB_EPStartXfer+0x3cc>)
 8003772:	400b      	ands	r3, r1
 8003774:	69b9      	ldr	r1, [r7, #24]
 8003776:	0148      	lsls	r0, r1, #5
 8003778:	69f9      	ldr	r1, [r7, #28]
 800377a:	4401      	add	r1, r0
 800377c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003780:	4313      	orrs	r3, r2
 8003782:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	791b      	ldrb	r3, [r3, #4]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d122      	bne.n	80037d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	0151      	lsls	r1, r2, #5
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	440a      	add	r2, r1
 80037a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80037aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	8afb      	ldrh	r3, [r7, #22]
 80037bc:	075b      	lsls	r3, r3, #29
 80037be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	0148      	lsls	r0, r1, #5
 80037c6:	69f9      	ldr	r1, [r7, #28]
 80037c8:	4401      	add	r1, r0
 80037ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80037ce:	4313      	orrs	r3, r2
 80037d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e8:	69b9      	ldr	r1, [r7, #24]
 80037ea:	0148      	lsls	r0, r1, #5
 80037ec:	69f9      	ldr	r1, [r7, #28]
 80037ee:	4401      	add	r1, r0
 80037f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80037f4:	4313      	orrs	r3, r2
 80037f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d14b      	bne.n	8003896 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	791b      	ldrb	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d128      	bne.n	8003874 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d110      	bne.n	8003854 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800384c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e00f      	b.n	8003874 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	0151      	lsls	r1, r2, #5
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	440a      	add	r2, r1
 800386a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800386e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003872:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	0151      	lsls	r1, r2, #5
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	440a      	add	r2, r1
 800388a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800388e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e166      	b.n	8003b64 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80038b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	791b      	ldrb	r3, [r3, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d015      	beq.n	80038ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 814e 	beq.w	8003b64 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	69f9      	ldr	r1, [r7, #28]
 80038e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038e4:	4313      	orrs	r3, r2
 80038e6:	634b      	str	r3, [r1, #52]	@ 0x34
 80038e8:	e13c      	b.n	8003b64 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d110      	bne.n	800391c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	0151      	lsls	r1, r2, #5
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	440a      	add	r2, r1
 8003910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003914:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e00f      	b.n	800393c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	0151      	lsls	r1, r2, #5
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	440a      	add	r2, r1
 8003932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	68d9      	ldr	r1, [r3, #12]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	b298      	uxth	r0, r3
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	4603      	mov	r3, r0
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f9b9 	bl	8003cc8 <USB_WritePacket>
 8003956:	e105      	b.n	8003b64 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	440a      	add	r2, r1
 800396e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003972:	0cdb      	lsrs	r3, r3, #19
 8003974:	04db      	lsls	r3, r3, #19
 8003976:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003992:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003996:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800399a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d132      	bne.n	8003a08 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	0148      	lsls	r0, r1, #5
 80039d4:	69f9      	ldr	r1, [r7, #28]
 80039d6:	4401      	add	r1, r0
 80039d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039dc:	4313      	orrs	r3, r2
 80039de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039fe:	6113      	str	r3, [r2, #16]
 8003a00:	e062      	b.n	8003ac8 <USB_EPStartXfer+0x490>
 8003a02:	bf00      	nop
 8003a04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d123      	bne.n	8003a58 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a26:	69b9      	ldr	r1, [r7, #24]
 8003a28:	0148      	lsls	r0, r1, #5
 8003a2a:	69f9      	ldr	r1, [r7, #28]
 8003a2c:	4401      	add	r1, r0
 8003a2e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a32:	4313      	orrs	r3, r2
 8003a34:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	0151      	lsls	r1, r2, #5
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	440a      	add	r2, r1
 8003a4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a54:	6113      	str	r3, [r2, #16]
 8003a56:	e037      	b.n	8003ac8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4413      	add	r3, r2
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	8afa      	ldrh	r2, [r7, #22]
 8003a74:	fb03 f202 	mul.w	r2, r3, r2
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	8afb      	ldrh	r3, [r7, #22]
 8003a8c:	04d9      	lsls	r1, r3, #19
 8003a8e:	4b38      	ldr	r3, [pc, #224]	@ (8003b70 <USB_EPStartXfer+0x538>)
 8003a90:	400b      	ands	r3, r1
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	0148      	lsls	r0, r1, #5
 8003a96:	69f9      	ldr	r1, [r7, #28]
 8003a98:	4401      	add	r1, r0
 8003a9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	0148      	lsls	r0, r1, #5
 8003abc:	69f9      	ldr	r1, [r7, #28]
 8003abe:	4401      	add	r1, r0
 8003ac0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d10d      	bne.n	8003aea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	68d9      	ldr	r1, [r3, #12]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d128      	bne.n	8003b44 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d110      	bne.n	8003b24 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	0151      	lsls	r1, r2, #5
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	440a      	add	r2, r1
 8003b18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00f      	b.n	8003b44 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	1ff80000 	.word	0x1ff80000

08003b74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d14a      	bne.n	8003c28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003baa:	f040 8086 	bne.w	8003cba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	0151      	lsls	r1, r2, #5
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	440a      	add	r2, r1
 8003bec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d902      	bls.n	8003c0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
          break;
 8003c0a:	e056      	b.n	8003cba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c24:	d0e7      	beq.n	8003bf6 <USB_EPStopXfer+0x82>
 8003c26:	e048      	b.n	8003cba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c40:	d13b      	bne.n	8003cba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	0151      	lsls	r1, r2, #5
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	440a      	add	r2, r1
 8003c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d902      	bls.n	8003ca0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8003c9e:	e00c      	b.n	8003cba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb8:	d0e7      	beq.n	8003c8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	@ 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	71fb      	strb	r3, [r7, #7]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d123      	bne.n	8003d36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003cee:	88bb      	ldrh	r3, [r7, #4]
 8003cf0:	3303      	adds	r3, #3
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e018      	b.n	8003d2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	031a      	lsls	r2, r3, #12
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d08:	461a      	mov	r2, r3
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	3301      	adds	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d3e2      	bcc.n	8003cfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3724      	adds	r7, #36	@ 0x24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b08b      	sub	sp, #44	@ 0x2c
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
 8003d6e:	e014      	b.n	8003d9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	3301      	adds	r3, #1
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	3301      	adds	r3, #1
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	3301      	adds	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	3301      	adds	r3, #1
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d3e6      	bcc.n	8003d70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003da2:	8bfb      	ldrh	r3, [r7, #30]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01e      	beq.n	8003de6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db2:	461a      	mov	r2, r3
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	701a      	strb	r2, [r3, #0]
      i++;
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003dda:	8bfb      	ldrh	r3, [r7, #30]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003de0:	8bfb      	ldrh	r3, [r7, #30]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ea      	bne.n	8003dbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	372c      	adds	r7, #44	@ 0x2c
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d12c      	bne.n	8003e6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db12      	blt.n	8003e48 <USB_EPSetStall+0x54>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00f      	beq.n	8003e48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	e02b      	b.n	8003ec2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	db12      	blt.n	8003ea2 <USB_EPSetStall+0xae>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00f      	beq.n	8003ea2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ea0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ec0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	785b      	ldrb	r3, [r3, #1]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d128      	bne.n	8003f3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	791b      	ldrb	r3, [r3, #4]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d003      	beq.n	8003f1c <USB_EPClearStall+0x4c>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	791b      	ldrb	r3, [r3, #4]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d138      	bne.n	8003f8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e027      	b.n	8003f8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	0151      	lsls	r1, r2, #5
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	440a      	add	r2, r1
 8003f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	791b      	ldrb	r3, [r3, #4]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d003      	beq.n	8003f6e <USB_EPClearStall+0x9e>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	791b      	ldrb	r3, [r3, #4]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d10f      	bne.n	8003f8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003fbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004016:	f023 0302 	bic.w	r3, r3, #2
 800401a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004044:	f023 0303 	bic.w	r3, r3, #3
 8004048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004058:	f043 0302 	orr.w	r3, r3, #2
 800405c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004084:	68fb      	ldr	r3, [r7, #12]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	0c1b      	lsrs	r3, r3, #16
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	b29b      	uxth	r3, r3
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004128:	68bb      	ldr	r3, [r7, #8]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004136:	b480      	push	{r7}
 8004138:	b087      	sub	sp, #28
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004158:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	b2db      	uxtb	r3, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004184:	68bb      	ldr	r3, [r7, #8]
}
 8004186:	4618      	mov	r0, r3
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f003 0301 	and.w	r3, r3, #1
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80041cc:	f023 0307 	bic.w	r3, r3, #7
 80041d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	460b      	mov	r3, r1
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	333c      	adds	r3, #60	@ 0x3c
 800420a:	3304      	adds	r3, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4a26      	ldr	r2, [pc, #152]	@ (80042ac <USB_EP0_OutStart+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d90a      	bls.n	800422e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004228:	d101      	bne.n	800422e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e037      	b.n	800429e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004248:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800424c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800425c:	f043 0318 	orr.w	r3, r3, #24
 8004260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004270:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004274:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004276:	7afb      	ldrb	r3, [r7, #11]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10f      	bne.n	800429c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004296:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800429a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	4f54300a 	.word	0x4f54300a

080042b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042c8:	d901      	bls.n	80042ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e01b      	b.n	8004306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	daf2      	bge.n	80042bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042f2:	d901      	bls.n	80042f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e006      	b.n	8004306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d0f0      	beq.n	80042e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004320:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004324:	f002 fc94 	bl	8006c50 <USBD_static_malloc>
 8004328:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	32b0      	adds	r2, #176	@ 0xb0
 800433a:	2100      	movs	r1, #0
 800433c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004340:	2302      	movs	r3, #2
 8004342:	e0d4      	b.n	80044ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004344:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004348:	2100      	movs	r1, #0
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f002 fce4 	bl	8006d18 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	32b0      	adds	r2, #176	@ 0xb0
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	32b0      	adds	r2, #176	@ 0xb0
 800436a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7c1b      	ldrb	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d138      	bne.n	80043ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800437c:	4b5e      	ldr	r3, [pc, #376]	@ (80044f8 <USBD_CDC_Init+0x1e4>)
 800437e:	7819      	ldrb	r1, [r3, #0]
 8004380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004384:	2202      	movs	r2, #2
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f002 fb3f 	bl	8006a0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800438c:	4b5a      	ldr	r3, [pc, #360]	@ (80044f8 <USBD_CDC_Init+0x1e4>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3324      	adds	r3, #36	@ 0x24
 80043a2:	2201      	movs	r2, #1
 80043a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80043a6:	4b55      	ldr	r3, [pc, #340]	@ (80044fc <USBD_CDC_Init+0x1e8>)
 80043a8:	7819      	ldrb	r1, [r3, #0]
 80043aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043ae:	2202      	movs	r2, #2
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f002 fb2a 	bl	8006a0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80043b6:	4b51      	ldr	r3, [pc, #324]	@ (80044fc <USBD_CDC_Init+0x1e8>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	f003 020f 	and.w	r2, r3, #15
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043ce:	2201      	movs	r2, #1
 80043d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80043d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004500 <USBD_CDC_Init+0x1ec>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	f003 020f 	and.w	r2, r3, #15
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3326      	adds	r3, #38	@ 0x26
 80043e8:	2210      	movs	r2, #16
 80043ea:	801a      	strh	r2, [r3, #0]
 80043ec:	e035      	b.n	800445a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80043ee:	4b42      	ldr	r3, [pc, #264]	@ (80044f8 <USBD_CDC_Init+0x1e4>)
 80043f0:	7819      	ldrb	r1, [r3, #0]
 80043f2:	2340      	movs	r3, #64	@ 0x40
 80043f4:	2202      	movs	r2, #2
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f002 fb07 	bl	8006a0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80043fc:	4b3e      	ldr	r3, [pc, #248]	@ (80044f8 <USBD_CDC_Init+0x1e4>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	3324      	adds	r3, #36	@ 0x24
 8004412:	2201      	movs	r2, #1
 8004414:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004416:	4b39      	ldr	r3, [pc, #228]	@ (80044fc <USBD_CDC_Init+0x1e8>)
 8004418:	7819      	ldrb	r1, [r3, #0]
 800441a:	2340      	movs	r3, #64	@ 0x40
 800441c:	2202      	movs	r2, #2
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f002 faf3 	bl	8006a0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004424:	4b35      	ldr	r3, [pc, #212]	@ (80044fc <USBD_CDC_Init+0x1e8>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800443c:	2201      	movs	r2, #1
 800443e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004440:	4b2f      	ldr	r3, [pc, #188]	@ (8004500 <USBD_CDC_Init+0x1ec>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	f003 020f 	and.w	r2, r3, #15
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	3326      	adds	r3, #38	@ 0x26
 8004456:	2210      	movs	r2, #16
 8004458:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800445a:	4b29      	ldr	r3, [pc, #164]	@ (8004500 <USBD_CDC_Init+0x1ec>)
 800445c:	7819      	ldrb	r1, [r3, #0]
 800445e:	2308      	movs	r3, #8
 8004460:	2203      	movs	r2, #3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f002 fad1 	bl	8006a0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004468:	4b25      	ldr	r3, [pc, #148]	@ (8004500 <USBD_CDC_Init+0x1ec>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3324      	adds	r3, #36	@ 0x24
 800447e:	2201      	movs	r2, #1
 8004480:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	33b0      	adds	r3, #176	@ 0xb0
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80044b8:	2302      	movs	r3, #2
 80044ba:	e018      	b.n	80044ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7c1b      	ldrb	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80044c4:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <USBD_CDC_Init+0x1e8>)
 80044c6:	7819      	ldrb	r1, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80044ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f002 fb88 	bl	8006be8 <USBD_LL_PrepareReceive>
 80044d8:	e008      	b.n	80044ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80044da:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <USBD_CDC_Init+0x1e8>)
 80044dc:	7819      	ldrb	r1, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80044e4:	2340      	movs	r3, #64	@ 0x40
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f002 fb7e 	bl	8006be8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000097 	.word	0x20000097
 80044fc:	20000098 	.word	0x20000098
 8004500:	20000099 	.word	0x20000099

08004504 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004510:	4b3a      	ldr	r3, [pc, #232]	@ (80045fc <USBD_CDC_DeInit+0xf8>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f002 fa9d 	bl	8006a56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800451c:	4b37      	ldr	r3, [pc, #220]	@ (80045fc <USBD_CDC_DeInit+0xf8>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	3324      	adds	r3, #36	@ 0x24
 8004532:	2200      	movs	r2, #0
 8004534:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004536:	4b32      	ldr	r3, [pc, #200]	@ (8004600 <USBD_CDC_DeInit+0xfc>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f002 fa8a 	bl	8006a56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004542:	4b2f      	ldr	r3, [pc, #188]	@ (8004600 <USBD_CDC_DeInit+0xfc>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	f003 020f 	and.w	r2, r3, #15
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800455a:	2200      	movs	r2, #0
 800455c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800455e:	4b29      	ldr	r3, [pc, #164]	@ (8004604 <USBD_CDC_DeInit+0x100>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f002 fa76 	bl	8006a56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800456a:	4b26      	ldr	r3, [pc, #152]	@ (8004604 <USBD_CDC_DeInit+0x100>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f003 020f 	and.w	r2, r3, #15
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	3324      	adds	r3, #36	@ 0x24
 8004580:	2200      	movs	r2, #0
 8004582:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004584:	4b1f      	ldr	r3, [pc, #124]	@ (8004604 <USBD_CDC_DeInit+0x100>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3326      	adds	r3, #38	@ 0x26
 800459a:	2200      	movs	r2, #0
 800459c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	32b0      	adds	r2, #176	@ 0xb0
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01f      	beq.n	80045f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	33b0      	adds	r3, #176	@ 0xb0
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	32b0      	adds	r2, #176	@ 0xb0
 80045ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f002 fb4a 	bl	8006c6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	32b0      	adds	r2, #176	@ 0xb0
 80045e2:	2100      	movs	r1, #0
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000097 	.word	0x20000097
 8004600:	20000098 	.word	0x20000098
 8004604:	20000099 	.word	0x20000099

08004608 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	32b0      	adds	r2, #176	@ 0xb0
 800461c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004620:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004634:	2303      	movs	r3, #3
 8004636:	e0bf      	b.n	80047b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004640:	2b00      	cmp	r3, #0
 8004642:	d050      	beq.n	80046e6 <USBD_CDC_Setup+0xde>
 8004644:	2b20      	cmp	r3, #32
 8004646:	f040 80af 	bne.w	80047a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	88db      	ldrh	r3, [r3, #6]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d03a      	beq.n	80046c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b25b      	sxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	da1b      	bge.n	8004694 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	33b0      	adds	r3, #176	@ 0xb0
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004672:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	88d2      	ldrh	r2, [r2, #6]
 8004678:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	88db      	ldrh	r3, [r3, #6]
 800467e:	2b07      	cmp	r3, #7
 8004680:	bf28      	it	cs
 8004682:	2307      	movcs	r3, #7
 8004684:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	89fa      	ldrh	r2, [r7, #14]
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f001 fd93 	bl	80061b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004692:	e090      	b.n	80047b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	785a      	ldrb	r2, [r3, #1]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	88db      	ldrh	r3, [r3, #6]
 80046a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80046a4:	d803      	bhi.n	80046ae <USBD_CDC_Setup+0xa6>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	88db      	ldrh	r3, [r3, #6]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	e000      	b.n	80046b0 <USBD_CDC_Setup+0xa8>
 80046ae:	2240      	movs	r2, #64	@ 0x40
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80046b6:	6939      	ldr	r1, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80046be:	461a      	mov	r2, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f001 fda5 	bl	8006210 <USBD_CtlPrepareRx>
      break;
 80046c6:	e076      	b.n	80047b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	33b0      	adds	r3, #176	@ 0xb0
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	7850      	ldrb	r0, [r2, #1]
 80046de:	2200      	movs	r2, #0
 80046e0:	6839      	ldr	r1, [r7, #0]
 80046e2:	4798      	blx	r3
      break;
 80046e4:	e067      	b.n	80047b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b0b      	cmp	r3, #11
 80046ec:	d851      	bhi.n	8004792 <USBD_CDC_Setup+0x18a>
 80046ee:	a201      	add	r2, pc, #4	@ (adr r2, 80046f4 <USBD_CDC_Setup+0xec>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004725 	.word	0x08004725
 80046f8:	080047a1 	.word	0x080047a1
 80046fc:	08004793 	.word	0x08004793
 8004700:	08004793 	.word	0x08004793
 8004704:	08004793 	.word	0x08004793
 8004708:	08004793 	.word	0x08004793
 800470c:	08004793 	.word	0x08004793
 8004710:	08004793 	.word	0x08004793
 8004714:	08004793 	.word	0x08004793
 8004718:	08004793 	.word	0x08004793
 800471c:	0800474f 	.word	0x0800474f
 8004720:	08004779 	.word	0x08004779
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b03      	cmp	r3, #3
 800472e:	d107      	bne.n	8004740 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004730:	f107 030a 	add.w	r3, r7, #10
 8004734:	2202      	movs	r2, #2
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f001 fd3d 	bl	80061b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800473e:	e032      	b.n	80047a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f001 fcbb 	bl	80060be <USBD_CtlError>
            ret = USBD_FAIL;
 8004748:	2303      	movs	r3, #3
 800474a:	75fb      	strb	r3, [r7, #23]
          break;
 800474c:	e02b      	b.n	80047a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d107      	bne.n	800476a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800475a:	f107 030d 	add.w	r3, r7, #13
 800475e:	2201      	movs	r2, #1
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f001 fd28 	bl	80061b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004768:	e01d      	b.n	80047a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f001 fca6 	bl	80060be <USBD_CtlError>
            ret = USBD_FAIL;
 8004772:	2303      	movs	r3, #3
 8004774:	75fb      	strb	r3, [r7, #23]
          break;
 8004776:	e016      	b.n	80047a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b03      	cmp	r3, #3
 8004782:	d00f      	beq.n	80047a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f001 fc99 	bl	80060be <USBD_CtlError>
            ret = USBD_FAIL;
 800478c:	2303      	movs	r3, #3
 800478e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004790:	e008      	b.n	80047a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f001 fc92 	bl	80060be <USBD_CtlError>
          ret = USBD_FAIL;
 800479a:	2303      	movs	r3, #3
 800479c:	75fb      	strb	r3, [r7, #23]
          break;
 800479e:	e002      	b.n	80047a6 <USBD_CDC_Setup+0x19e>
          break;
 80047a0:	bf00      	nop
 80047a2:	e008      	b.n	80047b6 <USBD_CDC_Setup+0x1ae>
          break;
 80047a4:	bf00      	nop
      }
      break;
 80047a6:	e006      	b.n	80047b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f001 fc87 	bl	80060be <USBD_CtlError>
      ret = USBD_FAIL;
 80047b0:	2303      	movs	r3, #3
 80047b2:	75fb      	strb	r3, [r7, #23]
      break;
 80047b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80047d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	32b0      	adds	r2, #176	@ 0xb0
 80047de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e065      	b.n	80048b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	32b0      	adds	r2, #176	@ 0xb0
 80047f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	3318      	adds	r3, #24
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02f      	beq.n	8004874 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	3318      	adds	r3, #24
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 010f 	and.w	r1, r3, #15
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	460b      	mov	r3, r1
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	440b      	add	r3, r1
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4403      	add	r3, r0
 800483c:	331c      	adds	r3, #28
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	fbb2 f1f3 	udiv	r1, r2, r3
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800484a:	2b00      	cmp	r3, #0
 800484c:	d112      	bne.n	8004874 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3318      	adds	r3, #24
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004866:	78f9      	ldrb	r1, [r7, #3]
 8004868:	2300      	movs	r3, #0
 800486a:	2200      	movs	r2, #0
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f002 f99a 	bl	8006ba6 <USBD_LL_Transmit>
 8004872:	e01f      	b.n	80048b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	33b0      	adds	r3, #176	@ 0xb0
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	33b0      	adds	r3, #176	@ 0xb0
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	32b0      	adds	r2, #176	@ 0xb0
 80048d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	32b0      	adds	r2, #176	@ 0xb0
 80048e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e01a      	b.n	8004926 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f002 f998 	bl	8006c2a <USBD_LL_GetRxDataSize>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	33b0      	adds	r3, #176	@ 0xb0
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004920:	4611      	mov	r1, r2
 8004922:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	32b0      	adds	r2, #176	@ 0xb0
 8004940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004944:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800494c:	2303      	movs	r3, #3
 800494e:	e024      	b.n	800499a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	33b0      	adds	r3, #176	@ 0xb0
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d019      	beq.n	8004998 <USBD_CDC_EP0_RxReady+0x6a>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800496a:	2bff      	cmp	r3, #255	@ 0xff
 800496c:	d014      	beq.n	8004998 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	33b0      	adds	r3, #176	@ 0xb0
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004986:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800498e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	22ff      	movs	r2, #255	@ 0xff
 8004994:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80049ac:	2182      	movs	r1, #130	@ 0x82
 80049ae:	4818      	ldr	r0, [pc, #96]	@ (8004a10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80049b0:	f000 fd4f 	bl	8005452 <USBD_GetEpDesc>
 80049b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80049b6:	2101      	movs	r1, #1
 80049b8:	4815      	ldr	r0, [pc, #84]	@ (8004a10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80049ba:	f000 fd4a 	bl	8005452 <USBD_GetEpDesc>
 80049be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80049c0:	2181      	movs	r1, #129	@ 0x81
 80049c2:	4813      	ldr	r0, [pc, #76]	@ (8004a10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80049c4:	f000 fd45 	bl	8005452 <USBD_GetEpDesc>
 80049c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2210      	movs	r2, #16
 80049d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d006      	beq.n	80049ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2200      	movs	r2, #0
 80049e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049e4:	711a      	strb	r2, [r3, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049f8:	711a      	strb	r2, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2243      	movs	r2, #67	@ 0x43
 8004a02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a04:	4b02      	ldr	r3, [pc, #8]	@ (8004a10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000054 	.word	0x20000054

08004a14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a1c:	2182      	movs	r1, #130	@ 0x82
 8004a1e:	4818      	ldr	r0, [pc, #96]	@ (8004a80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004a20:	f000 fd17 	bl	8005452 <USBD_GetEpDesc>
 8004a24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a26:	2101      	movs	r1, #1
 8004a28:	4815      	ldr	r0, [pc, #84]	@ (8004a80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004a2a:	f000 fd12 	bl	8005452 <USBD_GetEpDesc>
 8004a2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a30:	2181      	movs	r1, #129	@ 0x81
 8004a32:	4813      	ldr	r0, [pc, #76]	@ (8004a80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004a34:	f000 fd0d 	bl	8005452 <USBD_GetEpDesc>
 8004a38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2210      	movs	r2, #16
 8004a44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d006      	beq.n	8004a5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	711a      	strb	r2, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f042 0202 	orr.w	r2, r2, #2
 8004a58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	711a      	strb	r2, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f042 0202 	orr.w	r2, r2, #2
 8004a6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2243      	movs	r2, #67	@ 0x43
 8004a72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a74:	4b02      	ldr	r3, [pc, #8]	@ (8004a80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000054 	.word	0x20000054

08004a84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a8c:	2182      	movs	r1, #130	@ 0x82
 8004a8e:	4818      	ldr	r0, [pc, #96]	@ (8004af0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a90:	f000 fcdf 	bl	8005452 <USBD_GetEpDesc>
 8004a94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a96:	2101      	movs	r1, #1
 8004a98:	4815      	ldr	r0, [pc, #84]	@ (8004af0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a9a:	f000 fcda 	bl	8005452 <USBD_GetEpDesc>
 8004a9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004aa0:	2181      	movs	r1, #129	@ 0x81
 8004aa2:	4813      	ldr	r0, [pc, #76]	@ (8004af0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004aa4:	f000 fcd5 	bl	8005452 <USBD_GetEpDesc>
 8004aa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2210      	movs	r2, #16
 8004ab4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d006      	beq.n	8004aca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ac4:	711a      	strb	r2, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d006      	beq.n	8004ade <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ad8:	711a      	strb	r2, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2243      	movs	r2, #67	@ 0x43
 8004ae2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004ae4:	4b02      	ldr	r3, [pc, #8]	@ (8004af0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000054 	.word	0x20000054

08004af4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	220a      	movs	r2, #10
 8004b00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004b02:	4b03      	ldr	r3, [pc, #12]	@ (8004b10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	20000010 	.word	0x20000010

08004b14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e009      	b.n	8004b3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	33b0      	adds	r3, #176	@ 0xb0
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	32b0      	adds	r2, #176	@ 0xb0
 8004b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b62:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e008      	b.n	8004b80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	32b0      	adds	r2, #176	@ 0xb0
 8004ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e004      	b.n	8004bba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	32b0      	adds	r2, #176	@ 0xb0
 8004bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bde:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e025      	b.n	8004c3a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d11f      	bne.n	8004c38 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004c00:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <USBD_CDC_TransmitPacket+0x7c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	f003 020f 	and.w	r2, r3, #15
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4403      	add	r3, r0
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004c1e:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <USBD_CDC_TransmitPacket+0x7c>)
 8004c20:	7819      	ldrb	r1, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f001 ffb9 	bl	8006ba6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000097 	.word	0x20000097

08004c48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	32b0      	adds	r2, #176	@ 0xb0
 8004c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	32b0      	adds	r2, #176	@ 0xb0
 8004c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e018      	b.n	8004ca8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	7c1b      	ldrb	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb0 <USBD_CDC_ReceivePacket+0x68>)
 8004c80:	7819      	ldrb	r1, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 ffab 	bl	8006be8 <USBD_LL_PrepareReceive>
 8004c92:	e008      	b.n	8004ca6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <USBD_CDC_ReceivePacket+0x68>)
 8004c96:	7819      	ldrb	r1, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c9e:	2340      	movs	r3, #64	@ 0x40
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 ffa1 	bl	8006be8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000098 	.word	0x20000098

08004cb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e01f      	b.n	8004d0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	79fa      	ldrb	r2, [r7, #7]
 8004cfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f001 fe1b 	bl	800693c <USBD_LL_Init>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e025      	b.n	8004d78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	32ae      	adds	r2, #174	@ 0xae
 8004d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00f      	beq.n	8004d68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	32ae      	adds	r2, #174	@ 0xae
 8004d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	f107 020e 	add.w	r2, r7, #14
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
 8004d60:	4602      	mov	r2, r0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 fe23 	bl	80069d4 <USBD_LL_Start>
 8004d8e:	4603      	mov	r3, r0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004da0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
 8004dd8:	4603      	mov	r3, r0
 8004dda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	4611      	mov	r1, r2
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 f90c 	bl	800604a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d01a      	beq.n	8004e8c <USBD_LL_SetupStage+0x72>
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d822      	bhi.n	8004ea0 <USBD_LL_SetupStage+0x86>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <USBD_LL_SetupStage+0x4a>
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d00a      	beq.n	8004e78 <USBD_LL_SetupStage+0x5e>
 8004e62:	e01d      	b.n	8004ea0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fb63 	bl	8005538 <USBD_StdDevReq>
 8004e72:	4603      	mov	r3, r0
 8004e74:	73fb      	strb	r3, [r7, #15]
      break;
 8004e76:	e020      	b.n	8004eba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fbcb 	bl	800561c <USBD_StdItfReq>
 8004e86:	4603      	mov	r3, r0
 8004e88:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8a:	e016      	b.n	8004eba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fc2d 	bl	80056f4 <USBD_StdEPReq>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9e:	e00c      	b.n	8004eba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004ea6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f001 fdf0 	bl	8006a94 <USBD_LL_StallEP>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb8:	bf00      	nop
  }

  return ret;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d16e      	bne.n	8004fba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004ee2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	f040 8098 	bne.w	8005020 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d913      	bls.n	8004f24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	1ad2      	subs	r2, r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bf28      	it	cs
 8004f16:	4613      	movcs	r3, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f001 f994 	bl	800624a <USBD_CtlContinueRx>
 8004f22:	e07d      	b.n	8005020 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d014      	beq.n	8004f5c <USBD_LL_DataOutStage+0x98>
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d81d      	bhi.n	8004f72 <USBD_LL_DataOutStage+0xae>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <USBD_LL_DataOutStage+0x7c>
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d003      	beq.n	8004f46 <USBD_LL_DataOutStage+0x82>
 8004f3e:	e018      	b.n	8004f72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	75bb      	strb	r3, [r7, #22]
            break;
 8004f44:	e018      	b.n	8004f78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	4619      	mov	r1, r3
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fa64 	bl	800541e <USBD_CoreFindIF>
 8004f56:	4603      	mov	r3, r0
 8004f58:	75bb      	strb	r3, [r7, #22]
            break;
 8004f5a:	e00d      	b.n	8004f78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	4619      	mov	r1, r3
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fa66 	bl	8005438 <USBD_CoreFindEP>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75bb      	strb	r3, [r7, #22]
            break;
 8004f70:	e002      	b.n	8004f78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75bb      	strb	r3, [r7, #22]
            break;
 8004f76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004f78:	7dbb      	ldrb	r3, [r7, #22]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d119      	bne.n	8004fb2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d113      	bne.n	8004fb2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004f8a:	7dba      	ldrb	r2, [r7, #22]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	32ae      	adds	r2, #174	@ 0xae
 8004f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004f9a:	7dba      	ldrb	r2, [r7, #22]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004fa2:	7dba      	ldrb	r2, [r7, #22]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	32ae      	adds	r2, #174	@ 0xae
 8004fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f001 f95a 	bl	800626c <USBD_CtlSendStatus>
 8004fb8:	e032      	b.n	8005020 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004fba:	7afb      	ldrb	r3, [r7, #11]
 8004fbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fa37 	bl	8005438 <USBD_CoreFindEP>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004fce:	7dbb      	ldrb	r3, [r7, #22]
 8004fd0:	2bff      	cmp	r3, #255	@ 0xff
 8004fd2:	d025      	beq.n	8005020 <USBD_LL_DataOutStage+0x15c>
 8004fd4:	7dbb      	ldrb	r3, [r7, #22]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d122      	bne.n	8005020 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d117      	bne.n	8005016 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004fe6:	7dba      	ldrb	r2, [r7, #22]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	32ae      	adds	r2, #174	@ 0xae
 8004fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00f      	beq.n	8005016 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004ff6:	7dba      	ldrb	r2, [r7, #22]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004ffe:	7dba      	ldrb	r2, [r7, #22]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	32ae      	adds	r2, #174	@ 0xae
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	7afa      	ldrb	r2, [r7, #11]
 800500c:	4611      	mov	r1, r2
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	4798      	blx	r3
 8005012:	4603      	mov	r3, r0
 8005014:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
 800501e:	e000      	b.n	8005022 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	460b      	mov	r3, r1
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005038:	7afb      	ldrb	r3, [r7, #11]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d16f      	bne.n	800511e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3314      	adds	r3, #20
 8005042:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800504a:	2b02      	cmp	r3, #2
 800504c:	d15a      	bne.n	8005104 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	429a      	cmp	r2, r3
 8005058:	d914      	bls.n	8005084 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	461a      	mov	r2, r3
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f001 f8bc 	bl	80061ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005076:	2300      	movs	r3, #0
 8005078:	2200      	movs	r2, #0
 800507a:	2100      	movs	r1, #0
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f001 fdb3 	bl	8006be8 <USBD_LL_PrepareReceive>
 8005082:	e03f      	b.n	8005104 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	d11c      	bne.n	80050ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005098:	429a      	cmp	r2, r3
 800509a:	d316      	bcc.n	80050ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d20f      	bcs.n	80050ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2100      	movs	r1, #0
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f001 f89d 	bl	80061ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050bc:	2300      	movs	r3, #0
 80050be:	2200      	movs	r2, #0
 80050c0:	2100      	movs	r1, #0
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f001 fd90 	bl	8006be8 <USBD_LL_PrepareReceive>
 80050c8:	e01c      	b.n	8005104 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d10f      	bne.n	80050f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80050f6:	2180      	movs	r1, #128	@ 0x80
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f001 fccb 	bl	8006a94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f001 f8c7 	bl	8006292 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d03a      	beq.n	8005184 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fe42 	bl	8004d98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800511c:	e032      	b.n	8005184 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800511e:	7afb      	ldrb	r3, [r7, #11]
 8005120:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005124:	b2db      	uxtb	r3, r3
 8005126:	4619      	mov	r1, r3
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f985 	bl	8005438 <USBD_CoreFindEP>
 800512e:	4603      	mov	r3, r0
 8005130:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005132:	7dfb      	ldrb	r3, [r7, #23]
 8005134:	2bff      	cmp	r3, #255	@ 0xff
 8005136:	d025      	beq.n	8005184 <USBD_LL_DataInStage+0x15a>
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d122      	bne.n	8005184 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b03      	cmp	r3, #3
 8005148:	d11c      	bne.n	8005184 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800514a:	7dfa      	ldrb	r2, [r7, #23]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	32ae      	adds	r2, #174	@ 0xae
 8005150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d014      	beq.n	8005184 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800515a:	7dfa      	ldrb	r2, [r7, #23]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005162:	7dfa      	ldrb	r2, [r7, #23]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	32ae      	adds	r2, #174	@ 0xae
 8005168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	7afa      	ldrb	r2, [r7, #11]
 8005170:	4611      	mov	r1, r2
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	4798      	blx	r3
 8005176:	4603      	mov	r3, r0
 8005178:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800517a:	7dbb      	ldrb	r3, [r7, #22]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005180:	7dbb      	ldrb	r3, [r7, #22]
 8005182:	e000      	b.n	8005186 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6852      	ldr	r2, [r2, #4]
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	4611      	mov	r1, r2
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	4798      	blx	r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80051f0:	2303      	movs	r3, #3
 80051f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051f4:	2340      	movs	r3, #64	@ 0x40
 80051f6:	2200      	movs	r2, #0
 80051f8:	2100      	movs	r1, #0
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f001 fc05 	bl	8006a0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2240      	movs	r2, #64	@ 0x40
 800520c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005210:	2340      	movs	r3, #64	@ 0x40
 8005212:	2200      	movs	r2, #0
 8005214:	2180      	movs	r1, #128	@ 0x80
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f001 fbf7 	bl	8006a0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2240      	movs	r2, #64	@ 0x40
 8005226:	621a      	str	r2, [r3, #32]

  return ret;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b04      	cmp	r3, #4
 8005264:	d006      	beq.n	8005274 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800526c:	b2da      	uxtb	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2204      	movs	r2, #4
 8005278:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b04      	cmp	r3, #4
 800529c:	d106      	bne.n	80052ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d110      	bne.n	80052f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	32ae      	adds	r2, #174	@ 0xae
 8005310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	e01c      	b.n	8005356 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b03      	cmp	r3, #3
 8005326:	d115      	bne.n	8005354 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	32ae      	adds	r2, #174	@ 0xae
 8005332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00b      	beq.n	8005354 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	32ae      	adds	r2, #174	@ 0xae
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	4611      	mov	r1, r2
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	32ae      	adds	r2, #174	@ 0xae
 8005374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800537c:	2303      	movs	r3, #3
 800537e:	e01c      	b.n	80053ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b03      	cmp	r3, #3
 800538a:	d115      	bne.n	80053b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	32ae      	adds	r2, #174	@ 0xae
 8005396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	32ae      	adds	r2, #174	@ 0xae
 80053aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	4611      	mov	r1, r2
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00e      	beq.n	8005414 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6852      	ldr	r2, [r2, #4]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	4611      	mov	r1, r2
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005410:	2303      	movs	r3, #3
 8005412:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800542a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005444:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	885b      	ldrh	r3, [r3, #2]
 800546e:	b29b      	uxth	r3, r3
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	7812      	ldrb	r2, [r2, #0]
 8005474:	4293      	cmp	r3, r2
 8005476:	d91f      	bls.n	80054b8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800547e:	e013      	b.n	80054a8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005480:	f107 030a 	add.w	r3, r7, #10
 8005484:	4619      	mov	r1, r3
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f000 f81b 	bl	80054c2 <USBD_GetNextDesc>
 800548c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b05      	cmp	r3, #5
 8005494:	d108      	bne.n	80054a8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	789b      	ldrb	r3, [r3, #2]
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d008      	beq.n	80054b6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	885b      	ldrh	r3, [r3, #2]
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	897b      	ldrh	r3, [r7, #10]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d8e5      	bhi.n	8005480 <USBD_GetEpDesc+0x2e>
 80054b4:	e000      	b.n	80054b8 <USBD_GetEpDesc+0x66>
          break;
 80054b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80054b8:	693b      	ldr	r3, [r7, #16]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	4413      	add	r3, r2
 80054da:	b29a      	uxth	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4413      	add	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	3301      	adds	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005518:	8a3b      	ldrh	r3, [r7, #16]
 800551a:	021b      	lsls	r3, r3, #8
 800551c:	b21a      	sxth	r2, r3
 800551e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005522:	4313      	orrs	r3, r2
 8005524:	b21b      	sxth	r3, r3
 8005526:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005528:	89fb      	ldrh	r3, [r7, #14]
}
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800554e:	2b40      	cmp	r3, #64	@ 0x40
 8005550:	d005      	beq.n	800555e <USBD_StdDevReq+0x26>
 8005552:	2b40      	cmp	r3, #64	@ 0x40
 8005554:	d857      	bhi.n	8005606 <USBD_StdDevReq+0xce>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00f      	beq.n	800557a <USBD_StdDevReq+0x42>
 800555a:	2b20      	cmp	r3, #32
 800555c:	d153      	bne.n	8005606 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	32ae      	adds	r2, #174	@ 0xae
 8005568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	6839      	ldr	r1, [r7, #0]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
      break;
 8005578:	e04a      	b.n	8005610 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	2b09      	cmp	r3, #9
 8005580:	d83b      	bhi.n	80055fa <USBD_StdDevReq+0xc2>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <USBD_StdDevReq+0x50>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055dd 	.word	0x080055dd
 800558c:	080055f1 	.word	0x080055f1
 8005590:	080055fb 	.word	0x080055fb
 8005594:	080055e7 	.word	0x080055e7
 8005598:	080055fb 	.word	0x080055fb
 800559c:	080055bb 	.word	0x080055bb
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055fb 	.word	0x080055fb
 80055a8:	080055d3 	.word	0x080055d3
 80055ac:	080055c5 	.word	0x080055c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa3c 	bl	8005a30 <USBD_GetDescriptor>
          break;
 80055b8:	e024      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fba1 	bl	8005d04 <USBD_SetAddress>
          break;
 80055c2:	e01f      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fbe0 	bl	8005d8c <USBD_SetConfig>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]
          break;
 80055d0:	e018      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fc83 	bl	8005ee0 <USBD_GetConfig>
          break;
 80055da:	e013      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fcb4 	bl	8005f4c <USBD_GetStatus>
          break;
 80055e4:	e00e      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fce3 	bl	8005fb4 <USBD_SetFeature>
          break;
 80055ee:	e009      	b.n	8005604 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fd07 	bl	8006006 <USBD_ClrFeature>
          break;
 80055f8:	e004      	b.n	8005604 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fd5e 	bl	80060be <USBD_CtlError>
          break;
 8005602:	bf00      	nop
      }
      break;
 8005604:	e004      	b.n	8005610 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fd58 	bl	80060be <USBD_CtlError>
      break;
 800560e:	bf00      	nop
  }

  return ret;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005632:	2b40      	cmp	r3, #64	@ 0x40
 8005634:	d005      	beq.n	8005642 <USBD_StdItfReq+0x26>
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d852      	bhi.n	80056e0 <USBD_StdItfReq+0xc4>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <USBD_StdItfReq+0x26>
 800563e:	2b20      	cmp	r3, #32
 8005640:	d14e      	bne.n	80056e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005648:	b2db      	uxtb	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	2b02      	cmp	r3, #2
 800564e:	d840      	bhi.n	80056d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	889b      	ldrh	r3, [r3, #4]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d836      	bhi.n	80056c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	889b      	ldrh	r3, [r3, #4]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fedb 	bl	800541e <USBD_CoreFindIF>
 8005668:	4603      	mov	r3, r0
 800566a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800566c:	7bbb      	ldrb	r3, [r7, #14]
 800566e:	2bff      	cmp	r3, #255	@ 0xff
 8005670:	d01d      	beq.n	80056ae <USBD_StdItfReq+0x92>
 8005672:	7bbb      	ldrb	r3, [r7, #14]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11a      	bne.n	80056ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005678:	7bba      	ldrb	r2, [r7, #14]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	32ae      	adds	r2, #174	@ 0xae
 800567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00f      	beq.n	80056a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005688:	7bba      	ldrb	r2, [r7, #14]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005690:	7bba      	ldrb	r2, [r7, #14]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	32ae      	adds	r2, #174	@ 0xae
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80056a6:	e004      	b.n	80056b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80056a8:	2303      	movs	r3, #3
 80056aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80056ac:	e001      	b.n	80056b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80056ae:	2303      	movs	r3, #3
 80056b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	88db      	ldrh	r3, [r3, #6]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d110      	bne.n	80056dc <USBD_StdItfReq+0xc0>
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10d      	bne.n	80056dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fdd3 	bl	800626c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056c6:	e009      	b.n	80056dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fcf7 	bl	80060be <USBD_CtlError>
          break;
 80056d0:	e004      	b.n	80056dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fcf2 	bl	80060be <USBD_CtlError>
          break;
 80056da:	e000      	b.n	80056de <USBD_StdItfReq+0xc2>
          break;
 80056dc:	bf00      	nop
      }
      break;
 80056de:	e004      	b.n	80056ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fceb 	bl	80060be <USBD_CtlError>
      break;
 80056e8:	bf00      	nop
  }

  return ret;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	889b      	ldrh	r3, [r3, #4]
 8005706:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	d007      	beq.n	8005724 <USBD_StdEPReq+0x30>
 8005714:	2b40      	cmp	r3, #64	@ 0x40
 8005716:	f200 817f 	bhi.w	8005a18 <USBD_StdEPReq+0x324>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d02a      	beq.n	8005774 <USBD_StdEPReq+0x80>
 800571e:	2b20      	cmp	r3, #32
 8005720:	f040 817a 	bne.w	8005a18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005724:	7bbb      	ldrb	r3, [r7, #14]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fe85 	bl	8005438 <USBD_CoreFindEP>
 800572e:	4603      	mov	r3, r0
 8005730:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005732:	7b7b      	ldrb	r3, [r7, #13]
 8005734:	2bff      	cmp	r3, #255	@ 0xff
 8005736:	f000 8174 	beq.w	8005a22 <USBD_StdEPReq+0x32e>
 800573a:	7b7b      	ldrb	r3, [r7, #13]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 8170 	bne.w	8005a22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005742:	7b7a      	ldrb	r2, [r7, #13]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800574a:	7b7a      	ldrb	r2, [r7, #13]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	32ae      	adds	r2, #174	@ 0xae
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8163 	beq.w	8005a22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800575c:	7b7a      	ldrb	r2, [r7, #13]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	32ae      	adds	r2, #174	@ 0xae
 8005762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
 800576e:	4603      	mov	r3, r0
 8005770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005772:	e156      	b.n	8005a22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d008      	beq.n	800578e <USBD_StdEPReq+0x9a>
 800577c:	2b03      	cmp	r3, #3
 800577e:	f300 8145 	bgt.w	8005a0c <USBD_StdEPReq+0x318>
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 809b 	beq.w	80058be <USBD_StdEPReq+0x1ca>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d03c      	beq.n	8005806 <USBD_StdEPReq+0x112>
 800578c:	e13e      	b.n	8005a0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d002      	beq.n	80057a0 <USBD_StdEPReq+0xac>
 800579a:	2b03      	cmp	r3, #3
 800579c:	d016      	beq.n	80057cc <USBD_StdEPReq+0xd8>
 800579e:	e02c      	b.n	80057fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <USBD_StdEPReq+0xce>
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	2b80      	cmp	r3, #128	@ 0x80
 80057aa:	d00a      	beq.n	80057c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057ac:	7bbb      	ldrb	r3, [r7, #14]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 f96f 	bl	8006a94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057b6:	2180      	movs	r1, #128	@ 0x80
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 f96b 	bl	8006a94 <USBD_LL_StallEP>
 80057be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057c0:	e020      	b.n	8005804 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fc7a 	bl	80060be <USBD_CtlError>
              break;
 80057ca:	e01b      	b.n	8005804 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	885b      	ldrh	r3, [r3, #2]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10e      	bne.n	80057f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <USBD_StdEPReq+0xfe>
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	2b80      	cmp	r3, #128	@ 0x80
 80057de:	d008      	beq.n	80057f2 <USBD_StdEPReq+0xfe>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	88db      	ldrh	r3, [r3, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80057e8:	7bbb      	ldrb	r3, [r7, #14]
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 f951 	bl	8006a94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fd3a 	bl	800626c <USBD_CtlSendStatus>

              break;
 80057f8:	e004      	b.n	8005804 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fc5e 	bl	80060be <USBD_CtlError>
              break;
 8005802:	bf00      	nop
          }
          break;
 8005804:	e107      	b.n	8005a16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d002      	beq.n	8005818 <USBD_StdEPReq+0x124>
 8005812:	2b03      	cmp	r3, #3
 8005814:	d016      	beq.n	8005844 <USBD_StdEPReq+0x150>
 8005816:	e04b      	b.n	80058b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <USBD_StdEPReq+0x146>
 800581e:	7bbb      	ldrb	r3, [r7, #14]
 8005820:	2b80      	cmp	r3, #128	@ 0x80
 8005822:	d00a      	beq.n	800583a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 f933 	bl	8006a94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800582e:	2180      	movs	r1, #128	@ 0x80
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 f92f 	bl	8006a94 <USBD_LL_StallEP>
 8005836:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005838:	e040      	b.n	80058bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fc3e 	bl	80060be <USBD_CtlError>
              break;
 8005842:	e03b      	b.n	80058bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	885b      	ldrh	r3, [r3, #2]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d136      	bne.n	80058ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 f939 	bl	8006ad2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fd03 	bl	800626c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005866:	7bbb      	ldrb	r3, [r7, #14]
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fde4 	bl	8005438 <USBD_CoreFindEP>
 8005870:	4603      	mov	r3, r0
 8005872:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005874:	7b7b      	ldrb	r3, [r7, #13]
 8005876:	2bff      	cmp	r3, #255	@ 0xff
 8005878:	d01f      	beq.n	80058ba <USBD_StdEPReq+0x1c6>
 800587a:	7b7b      	ldrb	r3, [r7, #13]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d11c      	bne.n	80058ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005880:	7b7a      	ldrb	r2, [r7, #13]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005888:	7b7a      	ldrb	r2, [r7, #13]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	@ 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d010      	beq.n	80058ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005898:	7b7a      	ldrb	r2, [r7, #13]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	32ae      	adds	r2, #174	@ 0xae
 800589e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80058ae:	e004      	b.n	80058ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fc03 	bl	80060be <USBD_CtlError>
              break;
 80058b8:	e000      	b.n	80058bc <USBD_StdEPReq+0x1c8>
              break;
 80058ba:	bf00      	nop
          }
          break;
 80058bc:	e0ab      	b.n	8005a16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d002      	beq.n	80058d0 <USBD_StdEPReq+0x1dc>
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d032      	beq.n	8005934 <USBD_StdEPReq+0x240>
 80058ce:	e097      	b.n	8005a00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <USBD_StdEPReq+0x1f2>
 80058d6:	7bbb      	ldrb	r3, [r7, #14]
 80058d8:	2b80      	cmp	r3, #128	@ 0x80
 80058da:	d004      	beq.n	80058e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fbed 	bl	80060be <USBD_CtlError>
                break;
 80058e4:	e091      	b.n	8005a0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da0b      	bge.n	8005906 <USBD_StdEPReq+0x212>
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	3310      	adds	r3, #16
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	3304      	adds	r3, #4
 8005904:	e00b      	b.n	800591e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	3304      	adds	r3, #4
 800591e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2202      	movs	r2, #2
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fc43 	bl	80061b8 <USBD_CtlSendData>
              break;
 8005932:	e06a      	b.n	8005a0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005938:	2b00      	cmp	r3, #0
 800593a:	da11      	bge.n	8005960 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	f003 020f 	and.w	r2, r3, #15
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	3324      	adds	r3, #36	@ 0x24
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d117      	bne.n	8005986 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fbb0 	bl	80060be <USBD_CtlError>
                  break;
 800595e:	e054      	b.n	8005a0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	f003 020f 	and.w	r2, r3, #15
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fb9d 	bl	80060be <USBD_CtlError>
                  break;
 8005984:	e041      	b.n	8005a0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598a:	2b00      	cmp	r3, #0
 800598c:	da0b      	bge.n	80059a6 <USBD_StdEPReq+0x2b2>
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	3310      	adds	r3, #16
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	3304      	adds	r3, #4
 80059a4:	e00b      	b.n	80059be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	3304      	adds	r3, #4
 80059be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <USBD_StdEPReq+0x2d8>
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	2b80      	cmp	r3, #128	@ 0x80
 80059ca:	d103      	bne.n	80059d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e00e      	b.n	80059f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 f899 	bl	8006b10 <USBD_LL_IsStallEP>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2202      	movs	r2, #2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fbdd 	bl	80061b8 <USBD_CtlSendData>
              break;
 80059fe:	e004      	b.n	8005a0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fb5b 	bl	80060be <USBD_CtlError>
              break;
 8005a08:	bf00      	nop
          }
          break;
 8005a0a:	e004      	b.n	8005a16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb55 	bl	80060be <USBD_CtlError>
          break;
 8005a14:	bf00      	nop
      }
      break;
 8005a16:	e005      	b.n	8005a24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb4f 	bl	80060be <USBD_CtlError>
      break;
 8005a20:	e000      	b.n	8005a24 <USBD_StdEPReq+0x330>
      break;
 8005a22:	bf00      	nop
  }

  return ret;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	885b      	ldrh	r3, [r3, #2]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	f200 8128 	bhi.w	8005ca6 <USBD_GetDescriptor+0x276>
 8005a56:	a201      	add	r2, pc, #4	@ (adr r2, 8005a5c <USBD_GetDescriptor+0x2c>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a79 	.word	0x08005a79
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005ad1 	.word	0x08005ad1
 8005a68:	08005ca7 	.word	0x08005ca7
 8005a6c:	08005ca7 	.word	0x08005ca7
 8005a70:	08005c47 	.word	0x08005c47
 8005a74:	08005c73 	.word	0x08005c73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	7c12      	ldrb	r2, [r2, #16]
 8005a84:	f107 0108 	add.w	r1, r7, #8
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	60f8      	str	r0, [r7, #12]
      break;
 8005a8e:	e112      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	7c1b      	ldrb	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10d      	bne.n	8005ab4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	f107 0208 	add.w	r2, r7, #8
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
 8005aa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	2202      	movs	r2, #2
 8005ab0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ab2:	e100      	b.n	8005cb6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	f107 0208 	add.w	r2, r7, #8
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4798      	blx	r3
 8005ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	2202      	movs	r2, #2
 8005acc:	701a      	strb	r2, [r3, #0]
      break;
 8005ace:	e0f2      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	885b      	ldrh	r3, [r3, #2]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	f200 80ac 	bhi.w	8005c34 <USBD_GetDescriptor+0x204>
 8005adc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <USBD_GetDescriptor+0xb4>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005b31 	.word	0x08005b31
 8005aec:	08005b65 	.word	0x08005b65
 8005af0:	08005b99 	.word	0x08005b99
 8005af4:	08005bcd 	.word	0x08005bcd
 8005af8:	08005c01 	.word	0x08005c01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	7c12      	ldrb	r2, [r2, #16]
 8005b14:	f107 0108 	add.w	r1, r7, #8
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4798      	blx	r3
 8005b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b1e:	e091      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 facb 	bl	80060be <USBD_CtlError>
            err++;
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b2e:	e089      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	7c12      	ldrb	r2, [r2, #16]
 8005b48:	f107 0108 	add.w	r1, r7, #8
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
 8005b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b52:	e077      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fab1 	bl	80060be <USBD_CtlError>
            err++;
 8005b5c:	7afb      	ldrb	r3, [r7, #11]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	72fb      	strb	r3, [r7, #11]
          break;
 8005b62:	e06f      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	7c12      	ldrb	r2, [r2, #16]
 8005b7c:	f107 0108 	add.w	r1, r7, #8
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b86:	e05d      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa97 	bl	80060be <USBD_CtlError>
            err++;
 8005b90:	7afb      	ldrb	r3, [r7, #11]
 8005b92:	3301      	adds	r3, #1
 8005b94:	72fb      	strb	r3, [r7, #11]
          break;
 8005b96:	e055      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	7c12      	ldrb	r2, [r2, #16]
 8005bb0:	f107 0108 	add.w	r1, r7, #8
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bba:	e043      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa7d 	bl	80060be <USBD_CtlError>
            err++;
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bca:	e03b      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	7c12      	ldrb	r2, [r2, #16]
 8005be4:	f107 0108 	add.w	r1, r7, #8
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bee:	e029      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa63 	bl	80060be <USBD_CtlError>
            err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bfe:	e021      	b.n	8005c44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	7c12      	ldrb	r2, [r2, #16]
 8005c18:	f107 0108 	add.w	r1, r7, #8
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
 8005c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c22:	e00f      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa49 	bl	80060be <USBD_CtlError>
            err++;
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	72fb      	strb	r3, [r7, #11]
          break;
 8005c32:	e007      	b.n	8005c44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa41 	bl	80060be <USBD_CtlError>
          err++;
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005c42:	bf00      	nop
      }
      break;
 8005c44:	e037      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	7c1b      	ldrb	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c56:	f107 0208 	add.w	r2, r7, #8
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4798      	blx	r3
 8005c5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c60:	e029      	b.n	8005cb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa2a 	bl	80060be <USBD_CtlError>
        err++;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c70:	e021      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7c1b      	ldrb	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10d      	bne.n	8005c96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	f107 0208 	add.w	r2, r7, #8
 8005c86:	4610      	mov	r0, r2
 8005c88:	4798      	blx	r3
 8005c8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	2207      	movs	r2, #7
 8005c92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c94:	e00f      	b.n	8005cb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa10 	bl	80060be <USBD_CtlError>
        err++;
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ca4:	e007      	b.n	8005cb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fa08 	bl	80060be <USBD_CtlError>
      err++;
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8005cb4:	bf00      	nop
  }

  if (err != 0U)
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d11e      	bne.n	8005cfa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	88db      	ldrh	r3, [r3, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d016      	beq.n	8005cf2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005cc4:	893b      	ldrh	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00e      	beq.n	8005ce8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	88da      	ldrh	r2, [r3, #6]
 8005cce:	893b      	ldrh	r3, [r7, #8]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bf28      	it	cs
 8005cd4:	4613      	movcs	r3, r2
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cda:	893b      	ldrh	r3, [r7, #8]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fa69 	bl	80061b8 <USBD_CtlSendData>
 8005ce6:	e009      	b.n	8005cfc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f9e7 	bl	80060be <USBD_CtlError>
 8005cf0:	e004      	b.n	8005cfc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 faba 	bl	800626c <USBD_CtlSendStatus>
 8005cf8:	e000      	b.n	8005cfc <USBD_GetDescriptor+0x2cc>
    return;
 8005cfa:	bf00      	nop
  }
}
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop

08005d04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	889b      	ldrh	r3, [r3, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d131      	bne.n	8005d7a <USBD_SetAddress+0x76>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	88db      	ldrh	r3, [r3, #6]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d12d      	bne.n	8005d7a <USBD_SetAddress+0x76>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d24:	d829      	bhi.n	8005d7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	885b      	ldrh	r3, [r3, #2]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d104      	bne.n	8005d48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f9bc 	bl	80060be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d46:	e01d      	b.n	8005d84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 ff07 	bl	8006b68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa86 	bl	800626c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6e:	e009      	b.n	8005d84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d78:	e004      	b.n	8005d84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f99e 	bl	80060be <USBD_CtlError>
  }
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	885b      	ldrh	r3, [r3, #2]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b4e      	ldr	r3, [pc, #312]	@ (8005edc <USBD_SetConfig+0x150>)
 8005da2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005da4:	4b4d      	ldr	r3, [pc, #308]	@ (8005edc <USBD_SetConfig+0x150>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d905      	bls.n	8005db8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f985 	bl	80060be <USBD_CtlError>
    return USBD_FAIL;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e08c      	b.n	8005ed2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d002      	beq.n	8005dca <USBD_SetConfig+0x3e>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d029      	beq.n	8005e1c <USBD_SetConfig+0x90>
 8005dc8:	e075      	b.n	8005eb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005dca:	4b44      	ldr	r3, [pc, #272]	@ (8005edc <USBD_SetConfig+0x150>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d020      	beq.n	8005e14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005dd2:	4b42      	ldr	r3, [pc, #264]	@ (8005edc <USBD_SetConfig+0x150>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8005edc <USBD_SetConfig+0x150>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fe ffe3 	bl	8004dae <USBD_SetClassConfig>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f962 	bl	80060be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e02:	e065      	b.n	8005ed0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa31 	bl	800626c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005e12:	e05d      	b.n	8005ed0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa29 	bl	800626c <USBD_CtlSendStatus>
      break;
 8005e1a:	e059      	b.n	8005ed0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005edc <USBD_SetConfig+0x150>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d112      	bne.n	8005e4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8005edc <USBD_SetConfig+0x150>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e36:	4b29      	ldr	r3, [pc, #164]	@ (8005edc <USBD_SetConfig+0x150>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fe ffd2 	bl	8004de6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa12 	bl	800626c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e48:	e042      	b.n	8005ed0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005e4a:	4b24      	ldr	r3, [pc, #144]	@ (8005edc <USBD_SetConfig+0x150>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d02a      	beq.n	8005eae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fe ffc0 	bl	8004de6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e66:	4b1d      	ldr	r3, [pc, #116]	@ (8005edc <USBD_SetConfig+0x150>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e70:	4b1a      	ldr	r3, [pc, #104]	@ (8005edc <USBD_SetConfig+0x150>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fe ff99 	bl	8004dae <USBD_SetClassConfig>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00f      	beq.n	8005ea6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f918 	bl	80060be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fe ffa5 	bl	8004de6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005ea4:	e014      	b.n	8005ed0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f9e0 	bl	800626c <USBD_CtlSendStatus>
      break;
 8005eac:	e010      	b.n	8005ed0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f9dc 	bl	800626c <USBD_CtlSendStatus>
      break;
 8005eb4:	e00c      	b.n	8005ed0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f900 	bl	80060be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ebe:	4b07      	ldr	r3, [pc, #28]	@ (8005edc <USBD_SetConfig+0x150>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fe ff8e 	bl	8004de6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ece:	bf00      	nop
  }

  return ret;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	2000018c 	.word	0x2000018c

08005ee0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	88db      	ldrh	r3, [r3, #6]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d004      	beq.n	8005efc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f8e2 	bl	80060be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005efa:	e023      	b.n	8005f44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	dc02      	bgt.n	8005f0e <USBD_GetConfig+0x2e>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dc03      	bgt.n	8005f14 <USBD_GetConfig+0x34>
 8005f0c:	e015      	b.n	8005f3a <USBD_GetConfig+0x5a>
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d00b      	beq.n	8005f2a <USBD_GetConfig+0x4a>
 8005f12:	e012      	b.n	8005f3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f948 	bl	80061b8 <USBD_CtlSendData>
        break;
 8005f28:	e00c      	b.n	8005f44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2201      	movs	r2, #1
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f940 	bl	80061b8 <USBD_CtlSendData>
        break;
 8005f38:	e004      	b.n	8005f44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f8be 	bl	80060be <USBD_CtlError>
        break;
 8005f42:	bf00      	nop
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d81e      	bhi.n	8005fa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	88db      	ldrh	r3, [r3, #6]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d004      	beq.n	8005f76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8a5 	bl	80060be <USBD_CtlError>
        break;
 8005f74:	e01a      	b.n	8005fac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f043 0202 	orr.w	r2, r3, #2
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	330c      	adds	r3, #12
 8005f96:	2202      	movs	r2, #2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f90c 	bl	80061b8 <USBD_CtlSendData>
      break;
 8005fa0:	e004      	b.n	8005fac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f88a 	bl	80060be <USBD_CtlError>
      break;
 8005faa:	bf00      	nop
  }
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	885b      	ldrh	r3, [r3, #2]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d107      	bne.n	8005fd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f94c 	bl	800626c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005fd4:	e013      	b.n	8005ffe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	885b      	ldrh	r3, [r3, #2]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d10b      	bne.n	8005ff6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	889b      	ldrh	r3, [r3, #4]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f93c 	bl	800626c <USBD_CtlSendStatus>
}
 8005ff4:	e003      	b.n	8005ffe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f860 	bl	80060be <USBD_CtlError>
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006016:	b2db      	uxtb	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	2b02      	cmp	r3, #2
 800601c:	d80b      	bhi.n	8006036 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	885b      	ldrh	r3, [r3, #2]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10c      	bne.n	8006040 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f91c 	bl	800626c <USBD_CtlSendStatus>
      }
      break;
 8006034:	e004      	b.n	8006040 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f840 	bl	80060be <USBD_CtlError>
      break;
 800603e:	e000      	b.n	8006042 <USBD_ClrFeature+0x3c>
      break;
 8006040:	bf00      	nop
  }
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3301      	adds	r3, #1
 8006064:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fa40 	bl	80054fa <SWAPBYTE>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fa33 	bl	80054fa <SWAPBYTE>
 8006094:	4603      	mov	r3, r0
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fa26 	bl	80054fa <SWAPBYTE>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	80da      	strh	r2, [r3, #6]
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c8:	2180      	movs	r1, #128	@ 0x80
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fce2 	bl	8006a94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80060d0:	2100      	movs	r1, #0
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fcde 	bl	8006a94 <USBD_LL_StallEP>
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d042      	beq.n	800617c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f000 f842 	bl	8006184 <USBD_GetLen>
 8006100:	4603      	mov	r3, r0
 8006102:	3301      	adds	r3, #1
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800610a:	d808      	bhi.n	800611e <USBD_GetString+0x3e>
 800610c:	6938      	ldr	r0, [r7, #16]
 800610e:	f000 f839 	bl	8006184 <USBD_GetLen>
 8006112:	4603      	mov	r3, r0
 8006114:	3301      	adds	r3, #1
 8006116:	b29b      	uxth	r3, r3
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	e001      	b.n	8006122 <USBD_GetString+0x42>
 800611e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	4413      	add	r3, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	701a      	strb	r2, [r3, #0]
  idx++;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	3301      	adds	r3, #1
 8006136:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4413      	add	r3, r2
 800613e:	2203      	movs	r2, #3
 8006140:	701a      	strb	r2, [r3, #0]
  idx++;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	3301      	adds	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006148:	e013      	b.n	8006172 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4413      	add	r3, r2
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	7812      	ldrb	r2, [r2, #0]
 8006154:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	3301      	adds	r3, #1
 800615a:	613b      	str	r3, [r7, #16]
    idx++;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	3301      	adds	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4413      	add	r3, r2
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
    idx++;
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	3301      	adds	r3, #1
 8006170:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e7      	bne.n	800614a <USBD_GetString+0x6a>
 800617a:	e000      	b.n	800617e <USBD_GetString+0x9e>
    return;
 800617c:	bf00      	nop
  }
}
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006194:	e005      	b.n	80061a2 <USBD_GetLen+0x1e>
  {
    len++;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	3301      	adds	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	3301      	adds	r3, #1
 80061a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f5      	bne.n	8006196 <USBD_GetLen+0x12>
  }

  return len;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	2100      	movs	r1, #0
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fce1 	bl	8006ba6 <USBD_LL_Transmit>

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	2100      	movs	r1, #0
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fcd0 	bl	8006ba6 <USBD_LL_Transmit>

  return USBD_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2203      	movs	r2, #3
 8006220:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	2100      	movs	r1, #0
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fcd4 	bl	8006be8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	2100      	movs	r1, #0
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fcc3 	bl	8006be8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2204      	movs	r2, #4
 8006278:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800627c:	2300      	movs	r3, #0
 800627e:	2200      	movs	r2, #0
 8006280:	2100      	movs	r1, #0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc8f 	bl	8006ba6 <USBD_LL_Transmit>

  return USBD_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2205      	movs	r2, #5
 800629e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062a2:	2300      	movs	r3, #0
 80062a4:	2200      	movs	r2, #0
 80062a6:	2100      	movs	r1, #0
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fc9d 	bl	8006be8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062bc:	2200      	movs	r2, #0
 80062be:	4912      	ldr	r1, [pc, #72]	@ (8006308 <MX_USB_DEVICE_Init+0x50>)
 80062c0:	4812      	ldr	r0, [pc, #72]	@ (800630c <MX_USB_DEVICE_Init+0x54>)
 80062c2:	f7fe fcf7 	bl	8004cb4 <USBD_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062cc:	f7fa fa52 	bl	8000774 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062d0:	490f      	ldr	r1, [pc, #60]	@ (8006310 <MX_USB_DEVICE_Init+0x58>)
 80062d2:	480e      	ldr	r0, [pc, #56]	@ (800630c <MX_USB_DEVICE_Init+0x54>)
 80062d4:	f7fe fd1e 	bl	8004d14 <USBD_RegisterClass>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80062de:	f7fa fa49 	bl	8000774 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062e2:	490c      	ldr	r1, [pc, #48]	@ (8006314 <MX_USB_DEVICE_Init+0x5c>)
 80062e4:	4809      	ldr	r0, [pc, #36]	@ (800630c <MX_USB_DEVICE_Init+0x54>)
 80062e6:	f7fe fc15 	bl	8004b14 <USBD_CDC_RegisterInterface>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80062f0:	f7fa fa40 	bl	8000774 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80062f4:	4805      	ldr	r0, [pc, #20]	@ (800630c <MX_USB_DEVICE_Init+0x54>)
 80062f6:	f7fe fd43 	bl	8004d80 <USBD_Start>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006300:	f7fa fa38 	bl	8000774 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006304:	bf00      	nop
 8006306:	bd80      	pop	{r7, pc}
 8006308:	200000b0 	.word	0x200000b0
 800630c:	20000190 	.word	0x20000190
 8006310:	2000001c 	.word	0x2000001c
 8006314:	2000009c 	.word	0x2000009c

08006318 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800631c:	2200      	movs	r2, #0
 800631e:	4905      	ldr	r1, [pc, #20]	@ (8006334 <CDC_Init_FS+0x1c>)
 8006320:	4805      	ldr	r0, [pc, #20]	@ (8006338 <CDC_Init_FS+0x20>)
 8006322:	f7fe fc11 	bl	8004b48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006326:	4905      	ldr	r1, [pc, #20]	@ (800633c <CDC_Init_FS+0x24>)
 8006328:	4803      	ldr	r0, [pc, #12]	@ (8006338 <CDC_Init_FS+0x20>)
 800632a:	f7fe fc2f 	bl	8004b8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800632e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006330:	4618      	mov	r0, r3
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000c6c 	.word	0x20000c6c
 8006338:	20000190 	.word	0x20000190
 800633c:	2000046c 	.word	0x2000046c

08006340 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006344:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006346:	4618      	mov	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	6039      	str	r1, [r7, #0]
 800635a:	71fb      	strb	r3, [r7, #7]
 800635c:	4613      	mov	r3, r2
 800635e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	2b23      	cmp	r3, #35	@ 0x23
 8006364:	d84a      	bhi.n	80063fc <CDC_Control_FS+0xac>
 8006366:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <CDC_Control_FS+0x1c>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	080063fd 	.word	0x080063fd
 8006370:	080063fd 	.word	0x080063fd
 8006374:	080063fd 	.word	0x080063fd
 8006378:	080063fd 	.word	0x080063fd
 800637c:	080063fd 	.word	0x080063fd
 8006380:	080063fd 	.word	0x080063fd
 8006384:	080063fd 	.word	0x080063fd
 8006388:	080063fd 	.word	0x080063fd
 800638c:	080063fd 	.word	0x080063fd
 8006390:	080063fd 	.word	0x080063fd
 8006394:	080063fd 	.word	0x080063fd
 8006398:	080063fd 	.word	0x080063fd
 800639c:	080063fd 	.word	0x080063fd
 80063a0:	080063fd 	.word	0x080063fd
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	080063fd 	.word	0x080063fd
 80063ac:	080063fd 	.word	0x080063fd
 80063b0:	080063fd 	.word	0x080063fd
 80063b4:	080063fd 	.word	0x080063fd
 80063b8:	080063fd 	.word	0x080063fd
 80063bc:	080063fd 	.word	0x080063fd
 80063c0:	080063fd 	.word	0x080063fd
 80063c4:	080063fd 	.word	0x080063fd
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	080063fd 	.word	0x080063fd
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	080063fd 	.word	0x080063fd
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	080063fd 	.word	0x080063fd
 80063e0:	080063fd 	.word	0x080063fd
 80063e4:	080063fd 	.word	0x080063fd
 80063e8:	080063fd 	.word	0x080063fd
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	080063fd 	.word	0x080063fd
 80063f4:	080063fd 	.word	0x080063fd
 80063f8:	080063fd 	.word	0x080063fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80063fc:	bf00      	nop
  }

  return (USBD_OK);
 80063fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	4805      	ldr	r0, [pc, #20]	@ (8006430 <CDC_Receive_FS+0x24>)
 800641a:	f7fe fbb7 	bl	8004b8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800641e:	4804      	ldr	r0, [pc, #16]	@ (8006430 <CDC_Receive_FS+0x24>)
 8006420:	f7fe fc12 	bl	8004c48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006424:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000190 	.word	0x20000190

08006434 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006444:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <CDC_Transmit_FS+0x48>)
 8006446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800644a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006456:	2301      	movs	r3, #1
 8006458:	e00b      	b.n	8006472 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800645a:	887b      	ldrh	r3, [r7, #2]
 800645c:	461a      	mov	r2, r3
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4806      	ldr	r0, [pc, #24]	@ (800647c <CDC_Transmit_FS+0x48>)
 8006462:	f7fe fb71 	bl	8004b48 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006466:	4805      	ldr	r0, [pc, #20]	@ (800647c <CDC_Transmit_FS+0x48>)
 8006468:	f7fe fbae 	bl	8004bc8 <USBD_CDC_TransmitPacket>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000190 	.word	0x20000190

08006480 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006492:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006496:	4618      	mov	r0, r3
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2212      	movs	r2, #18
 80064b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80064b6:	4b03      	ldr	r3, [pc, #12]	@ (80064c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	200000cc 	.word	0x200000cc

080064c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2204      	movs	r2, #4
 80064d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80064da:	4b03      	ldr	r3, [pc, #12]	@ (80064e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	200000e0 	.word	0x200000e0

080064ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	4907      	ldr	r1, [pc, #28]	@ (8006520 <USBD_FS_ProductStrDescriptor+0x34>)
 8006502:	4808      	ldr	r0, [pc, #32]	@ (8006524 <USBD_FS_ProductStrDescriptor+0x38>)
 8006504:	f7ff fdec 	bl	80060e0 <USBD_GetString>
 8006508:	e004      	b.n	8006514 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	4904      	ldr	r1, [pc, #16]	@ (8006520 <USBD_FS_ProductStrDescriptor+0x34>)
 800650e:	4805      	ldr	r0, [pc, #20]	@ (8006524 <USBD_FS_ProductStrDescriptor+0x38>)
 8006510:	f7ff fde6 	bl	80060e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006514:	4b02      	ldr	r3, [pc, #8]	@ (8006520 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	2000146c 	.word	0x2000146c
 8006524:	08007638 	.word	0x08007638

08006528 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	6039      	str	r1, [r7, #0]
 8006532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	4904      	ldr	r1, [pc, #16]	@ (8006548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006538:	4804      	ldr	r0, [pc, #16]	@ (800654c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800653a:	f7ff fdd1 	bl	80060e0 <USBD_GetString>
  return USBD_StrDesc;
 800653e:	4b02      	ldr	r3, [pc, #8]	@ (8006548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	2000146c 	.word	0x2000146c
 800654c:	08007650 	.word	0x08007650

08006550 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	221a      	movs	r2, #26
 8006560:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006562:	f000 f843 	bl	80065ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006566:	4b02      	ldr	r3, [pc, #8]	@ (8006570 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	200000e4 	.word	0x200000e4

08006574 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	6039      	str	r1, [r7, #0]
 800657e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d105      	bne.n	8006592 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	4907      	ldr	r1, [pc, #28]	@ (80065a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800658a:	4808      	ldr	r0, [pc, #32]	@ (80065ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800658c:	f7ff fda8 	bl	80060e0 <USBD_GetString>
 8006590:	e004      	b.n	800659c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	4904      	ldr	r1, [pc, #16]	@ (80065a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006596:	4805      	ldr	r0, [pc, #20]	@ (80065ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8006598:	f7ff fda2 	bl	80060e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800659c:	4b02      	ldr	r3, [pc, #8]	@ (80065a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	2000146c 	.word	0x2000146c
 80065ac:	08007664 	.word	0x08007664

080065b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d105      	bne.n	80065ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	4907      	ldr	r1, [pc, #28]	@ (80065e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80065c6:	4808      	ldr	r0, [pc, #32]	@ (80065e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80065c8:	f7ff fd8a 	bl	80060e0 <USBD_GetString>
 80065cc:	e004      	b.n	80065d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	4904      	ldr	r1, [pc, #16]	@ (80065e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80065d2:	4805      	ldr	r0, [pc, #20]	@ (80065e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80065d4:	f7ff fd84 	bl	80060e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065d8:	4b02      	ldr	r3, [pc, #8]	@ (80065e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	2000146c 	.word	0x2000146c
 80065e8:	08007670 	.word	0x08007670

080065ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80065f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006630 <Get_SerialNum+0x44>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80065f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006634 <Get_SerialNum+0x48>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80065fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006638 <Get_SerialNum+0x4c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006612:	2208      	movs	r2, #8
 8006614:	4909      	ldr	r1, [pc, #36]	@ (800663c <Get_SerialNum+0x50>)
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f814 	bl	8006644 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800661c:	2204      	movs	r2, #4
 800661e:	4908      	ldr	r1, [pc, #32]	@ (8006640 <Get_SerialNum+0x54>)
 8006620:	68b8      	ldr	r0, [r7, #8]
 8006622:	f000 f80f 	bl	8006644 <IntToUnicode>
  }
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	1fff7a10 	.word	0x1fff7a10
 8006634:	1fff7a14 	.word	0x1fff7a14
 8006638:	1fff7a18 	.word	0x1fff7a18
 800663c:	200000e6 	.word	0x200000e6
 8006640:	200000f6 	.word	0x200000f6

08006644 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]
 800665a:	e027      	b.n	80066ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	0f1b      	lsrs	r3, r3, #28
 8006660:	2b09      	cmp	r3, #9
 8006662:	d80b      	bhi.n	800667c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	0f1b      	lsrs	r3, r3, #28
 8006668:	b2da      	uxtb	r2, r3
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	4619      	mov	r1, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	440b      	add	r3, r1
 8006674:	3230      	adds	r2, #48	@ 0x30
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	e00a      	b.n	8006692 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	0f1b      	lsrs	r3, r3, #28
 8006680:	b2da      	uxtb	r2, r3
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	4619      	mov	r1, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	440b      	add	r3, r1
 800668c:	3237      	adds	r2, #55	@ 0x37
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	3301      	adds	r3, #1
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4413      	add	r3, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	3301      	adds	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
 80066ac:	7dfa      	ldrb	r2, [r7, #23]
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d3d3      	bcc.n	800665c <IntToUnicode+0x18>
  }
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	@ 0x28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066cc:	f107 0314 	add.w	r3, r7, #20
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	609a      	str	r2, [r3, #8]
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066e4:	d13a      	bne.n	800675c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e6:	2300      	movs	r3, #0
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006764 <HAL_PCD_MspInit+0xa0>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006764 <HAL_PCD_MspInit+0xa0>)
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80066f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006764 <HAL_PCD_MspInit+0xa0>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006702:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006708:	2302      	movs	r3, #2
 800670a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670c:	2300      	movs	r3, #0
 800670e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006710:	2303      	movs	r3, #3
 8006712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006714:	230a      	movs	r3, #10
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006718:	f107 0314 	add.w	r3, r7, #20
 800671c:	4619      	mov	r1, r3
 800671e:	4812      	ldr	r0, [pc, #72]	@ (8006768 <HAL_PCD_MspInit+0xa4>)
 8006720:	f7fa faaa 	bl	8000c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006724:	4b0f      	ldr	r3, [pc, #60]	@ (8006764 <HAL_PCD_MspInit+0xa0>)
 8006726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006728:	4a0e      	ldr	r2, [pc, #56]	@ (8006764 <HAL_PCD_MspInit+0xa0>)
 800672a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <HAL_PCD_MspInit+0xa0>)
 8006736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006738:	4a0a      	ldr	r2, [pc, #40]	@ (8006764 <HAL_PCD_MspInit+0xa0>)
 800673a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800673e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006740:	4b08      	ldr	r3, [pc, #32]	@ (8006764 <HAL_PCD_MspInit+0xa0>)
 8006742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800674c:	2200      	movs	r2, #0
 800674e:	2100      	movs	r1, #0
 8006750:	2043      	movs	r0, #67	@ 0x43
 8006752:	f7fa fa5a 	bl	8000c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006756:	2043      	movs	r0, #67	@ 0x43
 8006758:	f7fa fa73 	bl	8000c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800675c:	bf00      	nop
 800675e:	3728      	adds	r7, #40	@ 0x28
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40023800 	.word	0x40023800
 8006768:	40020000 	.word	0x40020000

0800676c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe fb49 	bl	8004e1a <USBD_LL_SetupStage>
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	4619      	mov	r1, r3
 80067ba:	f7fe fb83 	bl	8004ec4 <USBD_LL_DataOutStage>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80067d8:	78fa      	ldrb	r2, [r7, #3]
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	4613      	mov	r3, r2
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	3320      	adds	r3, #32
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	4619      	mov	r1, r3
 80067ee:	f7fe fc1c 	bl	800502a <USBD_LL_DataInStage>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fd56 	bl	80052ba <USBD_LL_SOF>
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	79db      	ldrb	r3, [r3, #7]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d001      	beq.n	800682e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800682a:	f7f9 ffa3 	bl	8000774 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006834:	7bfa      	ldrb	r2, [r7, #15]
 8006836:	4611      	mov	r1, r2
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fcfa 	bl	8005232 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fca2 	bl	800518e <USBD_LL_Reset>
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fcf5 	bl	8005252 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7adb      	ldrb	r3, [r3, #11]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006888:	4b04      	ldr	r3, [pc, #16]	@ (800689c <HAL_PCD_SuspendCallback+0x48>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	4a03      	ldr	r2, [pc, #12]	@ (800689c <HAL_PCD_SuspendCallback+0x48>)
 800688e:	f043 0306 	orr.w	r3, r3, #6
 8006892:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	e000ed00 	.word	0xe000ed00

080068a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fceb 	bl	800528a <USBD_LL_Resume>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fd43 	bl	800535e <USBD_LL_IsoOUTIncomplete>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fcff 	bl	80052fa <USBD_LL_IsoINIncomplete>
}
 80068fc:	bf00      	nop
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fd55 	bl	80053c2 <USBD_LL_DevConnected>
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fd52 	bl	80053d8 <USBD_LL_DevDisconnected>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d13c      	bne.n	80069c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800694c:	4a20      	ldr	r2, [pc, #128]	@ (80069d0 <USBD_LL_Init+0x94>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a1e      	ldr	r2, [pc, #120]	@ (80069d0 <USBD_LL_Init+0x94>)
 8006958:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800695c:	4b1c      	ldr	r3, [pc, #112]	@ (80069d0 <USBD_LL_Init+0x94>)
 800695e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006962:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006964:	4b1a      	ldr	r3, [pc, #104]	@ (80069d0 <USBD_LL_Init+0x94>)
 8006966:	2204      	movs	r2, #4
 8006968:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800696a:	4b19      	ldr	r3, [pc, #100]	@ (80069d0 <USBD_LL_Init+0x94>)
 800696c:	2202      	movs	r2, #2
 800696e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006970:	4b17      	ldr	r3, [pc, #92]	@ (80069d0 <USBD_LL_Init+0x94>)
 8006972:	2200      	movs	r2, #0
 8006974:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006976:	4b16      	ldr	r3, [pc, #88]	@ (80069d0 <USBD_LL_Init+0x94>)
 8006978:	2202      	movs	r2, #2
 800697a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800697c:	4b14      	ldr	r3, [pc, #80]	@ (80069d0 <USBD_LL_Init+0x94>)
 800697e:	2200      	movs	r2, #0
 8006980:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006982:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <USBD_LL_Init+0x94>)
 8006984:	2200      	movs	r2, #0
 8006986:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006988:	4b11      	ldr	r3, [pc, #68]	@ (80069d0 <USBD_LL_Init+0x94>)
 800698a:	2200      	movs	r2, #0
 800698c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800698e:	4b10      	ldr	r3, [pc, #64]	@ (80069d0 <USBD_LL_Init+0x94>)
 8006990:	2200      	movs	r2, #0
 8006992:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006994:	4b0e      	ldr	r3, [pc, #56]	@ (80069d0 <USBD_LL_Init+0x94>)
 8006996:	2200      	movs	r2, #0
 8006998:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800699a:	480d      	ldr	r0, [pc, #52]	@ (80069d0 <USBD_LL_Init+0x94>)
 800699c:	f7fa faf0 	bl	8000f80 <HAL_PCD_Init>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80069a6:	f7f9 fee5 	bl	8000774 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80069aa:	2180      	movs	r1, #128	@ 0x80
 80069ac:	4808      	ldr	r0, [pc, #32]	@ (80069d0 <USBD_LL_Init+0x94>)
 80069ae:	f7fb fd1c 	bl	80023ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80069b2:	2240      	movs	r2, #64	@ 0x40
 80069b4:	2100      	movs	r1, #0
 80069b6:	4806      	ldr	r0, [pc, #24]	@ (80069d0 <USBD_LL_Init+0x94>)
 80069b8:	f7fb fcd0 	bl	800235c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80069bc:	2280      	movs	r2, #128	@ 0x80
 80069be:	2101      	movs	r1, #1
 80069c0:	4803      	ldr	r0, [pc, #12]	@ (80069d0 <USBD_LL_Init+0x94>)
 80069c2:	f7fb fccb 	bl	800235c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	2000166c 	.word	0x2000166c

080069d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fa fbd7 	bl	800119e <HAL_PCD_Start>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f942 	bl	8006c80 <USBD_Get_USB_Status>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	4608      	mov	r0, r1
 8006a14:	4611      	mov	r1, r2
 8006a16:	461a      	mov	r2, r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	70fb      	strb	r3, [r7, #3]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70bb      	strb	r3, [r7, #2]
 8006a20:	4613      	mov	r3, r2
 8006a22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006a32:	78bb      	ldrb	r3, [r7, #2]
 8006a34:	883a      	ldrh	r2, [r7, #0]
 8006a36:	78f9      	ldrb	r1, [r7, #3]
 8006a38:	f7fb f8ab 	bl	8001b92 <HAL_PCD_EP_Open>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f91c 	bl	8006c80 <USBD_Get_USB_Status>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	4611      	mov	r1, r2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fb f8f6 	bl	8001c66 <HAL_PCD_EP_Close>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 f8fd 	bl	8006c80 <USBD_Get_USB_Status>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006aae:	78fa      	ldrb	r2, [r7, #3]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fb f9ae 	bl	8001e14 <HAL_PCD_EP_SetStall>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 f8de 	bl	8006c80 <USBD_Get_USB_Status>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fb f9f2 	bl	8001eda <HAL_PCD_EP_ClrStall>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 f8bf 	bl	8006c80 <USBD_Get_USB_Status>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da0b      	bge.n	8006b44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b2c:	78fb      	ldrb	r3, [r7, #3]
 8006b2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b32:	68f9      	ldr	r1, [r7, #12]
 8006b34:	4613      	mov	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	3316      	adds	r3, #22
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	e00b      	b.n	8006b5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006b5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b82:	78fa      	ldrb	r2, [r7, #3]
 8006b84:	4611      	mov	r1, r2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fa ffdf 	bl	8001b4a <HAL_PCD_SetAddress>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f874 	bl	8006c80 <USBD_Get_USB_Status>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b086      	sub	sp, #24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006bc4:	7af9      	ldrb	r1, [r7, #11]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	f7fb f8e9 	bl	8001da0 <HAL_PCD_EP_Transmit>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f853 	bl	8006c80 <USBD_Get_USB_Status>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bde:	7dbb      	ldrb	r3, [r7, #22]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	607a      	str	r2, [r7, #4]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006c06:	7af9      	ldrb	r1, [r7, #11]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	f7fb f875 	bl	8001cfa <HAL_PCD_EP_Receive>
 8006c10:	4603      	mov	r3, r0
 8006c12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f832 	bl	8006c80 <USBD_Get_USB_Status>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c20:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fb f895 	bl	8001d70 <HAL_PCD_EP_GetRxCount>
 8006c46:	4603      	mov	r3, r0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006c58:	4b03      	ldr	r3, [pc, #12]	@ (8006c68 <USBD_static_malloc+0x18>)
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20001b50 	.word	0x20001b50

08006c6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]

}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d817      	bhi.n	8006cc4 <USBD_Get_USB_Status+0x44>
 8006c94:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <USBD_Get_USB_Status+0x1c>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cb3 	.word	0x08006cb3
 8006ca4:	08006cb9 	.word	0x08006cb9
 8006ca8:	08006cbf 	.word	0x08006cbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb0:	e00b      	b.n	8006cca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb6:	e008      	b.n	8006cca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
    break;
 8006cbc:	e005      	b.n	8006cca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc2:	e002      	b.n	8006cca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc8:	bf00      	nop
  }
  return usb_status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <siprintf>:
 8006cd8:	b40e      	push	{r1, r2, r3}
 8006cda:	b500      	push	{lr}
 8006cdc:	b09c      	sub	sp, #112	@ 0x70
 8006cde:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ce0:	9002      	str	r0, [sp, #8]
 8006ce2:	9006      	str	r0, [sp, #24]
 8006ce4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ce8:	4809      	ldr	r0, [pc, #36]	@ (8006d10 <siprintf+0x38>)
 8006cea:	9107      	str	r1, [sp, #28]
 8006cec:	9104      	str	r1, [sp, #16]
 8006cee:	4909      	ldr	r1, [pc, #36]	@ (8006d14 <siprintf+0x3c>)
 8006cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf4:	9105      	str	r1, [sp, #20]
 8006cf6:	6800      	ldr	r0, [r0, #0]
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	a902      	add	r1, sp, #8
 8006cfc:	f000 f994 	bl	8007028 <_svfiprintf_r>
 8006d00:	9b02      	ldr	r3, [sp, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	b01c      	add	sp, #112	@ 0x70
 8006d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d0c:	b003      	add	sp, #12
 8006d0e:	4770      	bx	lr
 8006d10:	20000100 	.word	0x20000100
 8006d14:	ffff0208 	.word	0xffff0208

08006d18 <memset>:
 8006d18:	4402      	add	r2, r0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <memset+0xa>
 8006d20:	4770      	bx	lr
 8006d22:	f803 1b01 	strb.w	r1, [r3], #1
 8006d26:	e7f9      	b.n	8006d1c <memset+0x4>

08006d28 <__errno>:
 8006d28:	4b01      	ldr	r3, [pc, #4]	@ (8006d30 <__errno+0x8>)
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000100 	.word	0x20000100

08006d34 <__libc_init_array>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4d0d      	ldr	r5, [pc, #52]	@ (8006d6c <__libc_init_array+0x38>)
 8006d38:	4c0d      	ldr	r4, [pc, #52]	@ (8006d70 <__libc_init_array+0x3c>)
 8006d3a:	1b64      	subs	r4, r4, r5
 8006d3c:	10a4      	asrs	r4, r4, #2
 8006d3e:	2600      	movs	r6, #0
 8006d40:	42a6      	cmp	r6, r4
 8006d42:	d109      	bne.n	8006d58 <__libc_init_array+0x24>
 8006d44:	4d0b      	ldr	r5, [pc, #44]	@ (8006d74 <__libc_init_array+0x40>)
 8006d46:	4c0c      	ldr	r4, [pc, #48]	@ (8006d78 <__libc_init_array+0x44>)
 8006d48:	f000 fc66 	bl	8007618 <_init>
 8006d4c:	1b64      	subs	r4, r4, r5
 8006d4e:	10a4      	asrs	r4, r4, #2
 8006d50:	2600      	movs	r6, #0
 8006d52:	42a6      	cmp	r6, r4
 8006d54:	d105      	bne.n	8006d62 <__libc_init_array+0x2e>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5c:	4798      	blx	r3
 8006d5e:	3601      	adds	r6, #1
 8006d60:	e7ee      	b.n	8006d40 <__libc_init_array+0xc>
 8006d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d66:	4798      	blx	r3
 8006d68:	3601      	adds	r6, #1
 8006d6a:	e7f2      	b.n	8006d52 <__libc_init_array+0x1e>
 8006d6c:	080076cc 	.word	0x080076cc
 8006d70:	080076cc 	.word	0x080076cc
 8006d74:	080076cc 	.word	0x080076cc
 8006d78:	080076d0 	.word	0x080076d0

08006d7c <__retarget_lock_acquire_recursive>:
 8006d7c:	4770      	bx	lr

08006d7e <__retarget_lock_release_recursive>:
 8006d7e:	4770      	bx	lr

08006d80 <_free_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4605      	mov	r5, r0
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d041      	beq.n	8006e0c <_free_r+0x8c>
 8006d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8c:	1f0c      	subs	r4, r1, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfb8      	it	lt
 8006d92:	18e4      	addlt	r4, r4, r3
 8006d94:	f000 f8e0 	bl	8006f58 <__malloc_lock>
 8006d98:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <_free_r+0x90>)
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x2c>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	4628      	mov	r0, r5
 8006da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da8:	f000 b8dc 	b.w	8006f64 <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x42>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	1821      	adds	r1, r4, r0
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1809      	addeq	r1, r1, r0
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x1e>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x4c>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x42>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1850      	adds	r0, r2, r1
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x6c>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	1850      	adds	r0, r2, r1
 8006dda:	4283      	cmp	r3, r0
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x22>
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	4408      	add	r0, r1
 8006de8:	6010      	str	r0, [r2, #0]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x22>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x74>
 8006dee:	230c      	movs	r3, #12
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x22>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	1821      	adds	r1, r4, r0
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7ca      	b.n	8006da2 <_free_r+0x22>
 8006e0c:	bd38      	pop	{r3, r4, r5, pc}
 8006e0e:	bf00      	nop
 8006e10:	20001eb4 	.word	0x20001eb4

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0f      	ldr	r6, [pc, #60]	@ (8006e54 <sbrk_aligned+0x40>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 fba6 	bl	8007570 <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 fba1 	bl	8007570 <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d103      	bne.n	8006e3a <sbrk_aligned+0x26>
 8006e32:	f04f 34ff 	mov.w	r4, #4294967295
 8006e36:	4620      	mov	r0, r4
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0f8      	beq.n	8006e36 <sbrk_aligned+0x22>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 fb92 	bl	8007570 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1f2      	bne.n	8006e36 <sbrk_aligned+0x22>
 8006e50:	e7ef      	b.n	8006e32 <sbrk_aligned+0x1e>
 8006e52:	bf00      	nop
 8006e54:	20001eb0 	.word	0x20001eb0

08006e58 <_malloc_r>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	1ccd      	adds	r5, r1, #3
 8006e5e:	f025 0503 	bic.w	r5, r5, #3
 8006e62:	3508      	adds	r5, #8
 8006e64:	2d0c      	cmp	r5, #12
 8006e66:	bf38      	it	cc
 8006e68:	250c      	movcc	r5, #12
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	db01      	blt.n	8006e74 <_malloc_r+0x1c>
 8006e70:	42a9      	cmp	r1, r5
 8006e72:	d904      	bls.n	8006e7e <_malloc_r+0x26>
 8006e74:	230c      	movs	r3, #12
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f54 <_malloc_r+0xfc>
 8006e82:	f000 f869 	bl	8006f58 <__malloc_lock>
 8006e86:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	bb44      	cbnz	r4, 8006ee0 <_malloc_r+0x88>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbf 	bl	8006e14 <sbrk_aligned>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d158      	bne.n	8006f4e <_malloc_r+0xf6>
 8006e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea0:	4627      	mov	r7, r4
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d143      	bne.n	8006f2e <_malloc_r+0xd6>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d04b      	beq.n	8006f42 <_malloc_r+0xea>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	eb04 0903 	add.w	r9, r4, r3
 8006eb4:	f000 fb5c 	bl	8007570 <_sbrk_r>
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	d142      	bne.n	8006f42 <_malloc_r+0xea>
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	1a6d      	subs	r5, r5, r1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffa6 	bl	8006e14 <sbrk_aligned>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d03a      	beq.n	8006f42 <_malloc_r+0xea>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	442b      	add	r3, r5
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	bb62      	cbnz	r2, 8006f34 <_malloc_r+0xdc>
 8006eda:	f8c8 7000 	str.w	r7, [r8]
 8006ede:	e00f      	b.n	8006f00 <_malloc_r+0xa8>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	1b52      	subs	r2, r2, r5
 8006ee4:	d420      	bmi.n	8006f28 <_malloc_r+0xd0>
 8006ee6:	2a0b      	cmp	r2, #11
 8006ee8:	d917      	bls.n	8006f1a <_malloc_r+0xc2>
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	6059      	strne	r1, [r3, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	bf08      	it	eq
 8006ef8:	f8c8 1000 	streq.w	r1, [r8]
 8006efc:	5162      	str	r2, [r4, r5]
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f82f 	bl	8006f64 <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	bf1c      	itt	ne
 8006f14:	1a1b      	subne	r3, r3, r0
 8006f16:	50a3      	strne	r3, [r4, r2]
 8006f18:	e7af      	b.n	8006e7a <_malloc_r+0x22>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	bf0c      	ite	eq
 8006f20:	f8c8 2000 	streq.w	r2, [r8]
 8006f24:	605a      	strne	r2, [r3, #4]
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0xa8>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7ae      	b.n	8006e8c <_malloc_r+0x34>
 8006f2e:	463c      	mov	r4, r7
 8006f30:	687f      	ldr	r7, [r7, #4]
 8006f32:	e7b6      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f34:	461a      	mov	r2, r3
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d1fb      	bne.n	8006f34 <_malloc_r+0xdc>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6053      	str	r3, [r2, #4]
 8006f40:	e7de      	b.n	8006f00 <_malloc_r+0xa8>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f80c 	bl	8006f64 <__malloc_unlock>
 8006f4c:	e794      	b.n	8006e78 <_malloc_r+0x20>
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	e7d6      	b.n	8006f00 <_malloc_r+0xa8>
 8006f52:	bf00      	nop
 8006f54:	20001eb4 	.word	0x20001eb4

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f7ff bf0f 	b.w	8006d7c <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20001eac 	.word	0x20001eac

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	@ (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f7ff bf0a 	b.w	8006d7e <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20001eac 	.word	0x20001eac

08006f70 <__ssputs_r>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	688e      	ldr	r6, [r1, #8]
 8006f76:	461f      	mov	r7, r3
 8006f78:	42be      	cmp	r6, r7
 8006f7a:	680b      	ldr	r3, [r1, #0]
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	4690      	mov	r8, r2
 8006f82:	d82d      	bhi.n	8006fe0 <__ssputs_r+0x70>
 8006f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f8c:	d026      	beq.n	8006fdc <__ssputs_r+0x6c>
 8006f8e:	6965      	ldr	r5, [r4, #20]
 8006f90:	6909      	ldr	r1, [r1, #16]
 8006f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f96:	eba3 0901 	sub.w	r9, r3, r1
 8006f9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f9e:	1c7b      	adds	r3, r7, #1
 8006fa0:	444b      	add	r3, r9
 8006fa2:	106d      	asrs	r5, r5, #1
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	bf38      	it	cc
 8006fa8:	461d      	movcc	r5, r3
 8006faa:	0553      	lsls	r3, r2, #21
 8006fac:	d527      	bpl.n	8006ffe <__ssputs_r+0x8e>
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f7ff ff52 	bl	8006e58 <_malloc_r>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	b360      	cbz	r0, 8007012 <__ssputs_r+0xa2>
 8006fb8:	6921      	ldr	r1, [r4, #16]
 8006fba:	464a      	mov	r2, r9
 8006fbc:	f000 fae8 	bl	8007590 <memcpy>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	6126      	str	r6, [r4, #16]
 8006fce:	6165      	str	r5, [r4, #20]
 8006fd0:	444e      	add	r6, r9
 8006fd2:	eba5 0509 	sub.w	r5, r5, r9
 8006fd6:	6026      	str	r6, [r4, #0]
 8006fd8:	60a5      	str	r5, [r4, #8]
 8006fda:	463e      	mov	r6, r7
 8006fdc:	42be      	cmp	r6, r7
 8006fde:	d900      	bls.n	8006fe2 <__ssputs_r+0x72>
 8006fe0:	463e      	mov	r6, r7
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	4641      	mov	r1, r8
 8006fe8:	f000 faa8 	bl	800753c <memmove>
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	1b9b      	subs	r3, r3, r6
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	4433      	add	r3, r6
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffe:	462a      	mov	r2, r5
 8007000:	f000 fad4 	bl	80075ac <_realloc_r>
 8007004:	4606      	mov	r6, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	d1e0      	bne.n	8006fcc <__ssputs_r+0x5c>
 800700a:	6921      	ldr	r1, [r4, #16]
 800700c:	4650      	mov	r0, sl
 800700e:	f7ff feb7 	bl	8006d80 <_free_r>
 8007012:	230c      	movs	r3, #12
 8007014:	f8ca 3000 	str.w	r3, [sl]
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e7e9      	b.n	8006ffa <__ssputs_r+0x8a>
	...

08007028 <_svfiprintf_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	4698      	mov	r8, r3
 800702e:	898b      	ldrh	r3, [r1, #12]
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	b09d      	sub	sp, #116	@ 0x74
 8007034:	4607      	mov	r7, r0
 8007036:	460d      	mov	r5, r1
 8007038:	4614      	mov	r4, r2
 800703a:	d510      	bpl.n	800705e <_svfiprintf_r+0x36>
 800703c:	690b      	ldr	r3, [r1, #16]
 800703e:	b973      	cbnz	r3, 800705e <_svfiprintf_r+0x36>
 8007040:	2140      	movs	r1, #64	@ 0x40
 8007042:	f7ff ff09 	bl	8006e58 <_malloc_r>
 8007046:	6028      	str	r0, [r5, #0]
 8007048:	6128      	str	r0, [r5, #16]
 800704a:	b930      	cbnz	r0, 800705a <_svfiprintf_r+0x32>
 800704c:	230c      	movs	r3, #12
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	b01d      	add	sp, #116	@ 0x74
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	2340      	movs	r3, #64	@ 0x40
 800705c:	616b      	str	r3, [r5, #20]
 800705e:	2300      	movs	r3, #0
 8007060:	9309      	str	r3, [sp, #36]	@ 0x24
 8007062:	2320      	movs	r3, #32
 8007064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007068:	f8cd 800c 	str.w	r8, [sp, #12]
 800706c:	2330      	movs	r3, #48	@ 0x30
 800706e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800720c <_svfiprintf_r+0x1e4>
 8007072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007076:	f04f 0901 	mov.w	r9, #1
 800707a:	4623      	mov	r3, r4
 800707c:	469a      	mov	sl, r3
 800707e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007082:	b10a      	cbz	r2, 8007088 <_svfiprintf_r+0x60>
 8007084:	2a25      	cmp	r2, #37	@ 0x25
 8007086:	d1f9      	bne.n	800707c <_svfiprintf_r+0x54>
 8007088:	ebba 0b04 	subs.w	fp, sl, r4
 800708c:	d00b      	beq.n	80070a6 <_svfiprintf_r+0x7e>
 800708e:	465b      	mov	r3, fp
 8007090:	4622      	mov	r2, r4
 8007092:	4629      	mov	r1, r5
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ff6b 	bl	8006f70 <__ssputs_r>
 800709a:	3001      	adds	r0, #1
 800709c:	f000 80a7 	beq.w	80071ee <_svfiprintf_r+0x1c6>
 80070a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070a2:	445a      	add	r2, fp
 80070a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070a6:	f89a 3000 	ldrb.w	r3, [sl]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 809f 	beq.w	80071ee <_svfiprintf_r+0x1c6>
 80070b0:	2300      	movs	r3, #0
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ba:	f10a 0a01 	add.w	sl, sl, #1
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	9307      	str	r3, [sp, #28]
 80070c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80070c8:	4654      	mov	r4, sl
 80070ca:	2205      	movs	r2, #5
 80070cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d0:	484e      	ldr	r0, [pc, #312]	@ (800720c <_svfiprintf_r+0x1e4>)
 80070d2:	f7f9 f885 	bl	80001e0 <memchr>
 80070d6:	9a04      	ldr	r2, [sp, #16]
 80070d8:	b9d8      	cbnz	r0, 8007112 <_svfiprintf_r+0xea>
 80070da:	06d0      	lsls	r0, r2, #27
 80070dc:	bf44      	itt	mi
 80070de:	2320      	movmi	r3, #32
 80070e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070e4:	0711      	lsls	r1, r2, #28
 80070e6:	bf44      	itt	mi
 80070e8:	232b      	movmi	r3, #43	@ 0x2b
 80070ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ee:	f89a 3000 	ldrb.w	r3, [sl]
 80070f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f4:	d015      	beq.n	8007122 <_svfiprintf_r+0xfa>
 80070f6:	9a07      	ldr	r2, [sp, #28]
 80070f8:	4654      	mov	r4, sl
 80070fa:	2000      	movs	r0, #0
 80070fc:	f04f 0c0a 	mov.w	ip, #10
 8007100:	4621      	mov	r1, r4
 8007102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007106:	3b30      	subs	r3, #48	@ 0x30
 8007108:	2b09      	cmp	r3, #9
 800710a:	d94b      	bls.n	80071a4 <_svfiprintf_r+0x17c>
 800710c:	b1b0      	cbz	r0, 800713c <_svfiprintf_r+0x114>
 800710e:	9207      	str	r2, [sp, #28]
 8007110:	e014      	b.n	800713c <_svfiprintf_r+0x114>
 8007112:	eba0 0308 	sub.w	r3, r0, r8
 8007116:	fa09 f303 	lsl.w	r3, r9, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	46a2      	mov	sl, r4
 8007120:	e7d2      	b.n	80070c8 <_svfiprintf_r+0xa0>
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	1d19      	adds	r1, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9103      	str	r1, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfbb      	ittet	lt
 800712e:	425b      	neglt	r3, r3
 8007130:	f042 0202 	orrlt.w	r2, r2, #2
 8007134:	9307      	strge	r3, [sp, #28]
 8007136:	9307      	strlt	r3, [sp, #28]
 8007138:	bfb8      	it	lt
 800713a:	9204      	strlt	r2, [sp, #16]
 800713c:	7823      	ldrb	r3, [r4, #0]
 800713e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007140:	d10a      	bne.n	8007158 <_svfiprintf_r+0x130>
 8007142:	7863      	ldrb	r3, [r4, #1]
 8007144:	2b2a      	cmp	r3, #42	@ 0x2a
 8007146:	d132      	bne.n	80071ae <_svfiprintf_r+0x186>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	9203      	str	r2, [sp, #12]
 8007150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007154:	3402      	adds	r4, #2
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800721c <_svfiprintf_r+0x1f4>
 800715c:	7821      	ldrb	r1, [r4, #0]
 800715e:	2203      	movs	r2, #3
 8007160:	4650      	mov	r0, sl
 8007162:	f7f9 f83d 	bl	80001e0 <memchr>
 8007166:	b138      	cbz	r0, 8007178 <_svfiprintf_r+0x150>
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	eba0 000a 	sub.w	r0, r0, sl
 800716e:	2240      	movs	r2, #64	@ 0x40
 8007170:	4082      	lsls	r2, r0
 8007172:	4313      	orrs	r3, r2
 8007174:	3401      	adds	r4, #1
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	4824      	ldr	r0, [pc, #144]	@ (8007210 <_svfiprintf_r+0x1e8>)
 800717e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007182:	2206      	movs	r2, #6
 8007184:	f7f9 f82c 	bl	80001e0 <memchr>
 8007188:	2800      	cmp	r0, #0
 800718a:	d036      	beq.n	80071fa <_svfiprintf_r+0x1d2>
 800718c:	4b21      	ldr	r3, [pc, #132]	@ (8007214 <_svfiprintf_r+0x1ec>)
 800718e:	bb1b      	cbnz	r3, 80071d8 <_svfiprintf_r+0x1b0>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	3307      	adds	r3, #7
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	3308      	adds	r3, #8
 800719a:	9303      	str	r3, [sp, #12]
 800719c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719e:	4433      	add	r3, r6
 80071a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a2:	e76a      	b.n	800707a <_svfiprintf_r+0x52>
 80071a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a8:	460c      	mov	r4, r1
 80071aa:	2001      	movs	r0, #1
 80071ac:	e7a8      	b.n	8007100 <_svfiprintf_r+0xd8>
 80071ae:	2300      	movs	r3, #0
 80071b0:	3401      	adds	r4, #1
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f04f 0c0a 	mov.w	ip, #10
 80071ba:	4620      	mov	r0, r4
 80071bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c0:	3a30      	subs	r2, #48	@ 0x30
 80071c2:	2a09      	cmp	r2, #9
 80071c4:	d903      	bls.n	80071ce <_svfiprintf_r+0x1a6>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0c6      	beq.n	8007158 <_svfiprintf_r+0x130>
 80071ca:	9105      	str	r1, [sp, #20]
 80071cc:	e7c4      	b.n	8007158 <_svfiprintf_r+0x130>
 80071ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d2:	4604      	mov	r4, r0
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7f0      	b.n	80071ba <_svfiprintf_r+0x192>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4b0e      	ldr	r3, [pc, #56]	@ (8007218 <_svfiprintf_r+0x1f0>)
 80071e0:	a904      	add	r1, sp, #16
 80071e2:	4638      	mov	r0, r7
 80071e4:	f3af 8000 	nop.w
 80071e8:	1c42      	adds	r2, r0, #1
 80071ea:	4606      	mov	r6, r0
 80071ec:	d1d6      	bne.n	800719c <_svfiprintf_r+0x174>
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	065b      	lsls	r3, r3, #25
 80071f2:	f53f af2d 	bmi.w	8007050 <_svfiprintf_r+0x28>
 80071f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071f8:	e72c      	b.n	8007054 <_svfiprintf_r+0x2c>
 80071fa:	ab03      	add	r3, sp, #12
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	462a      	mov	r2, r5
 8007200:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <_svfiprintf_r+0x1f0>)
 8007202:	a904      	add	r1, sp, #16
 8007204:	4638      	mov	r0, r7
 8007206:	f000 f879 	bl	80072fc <_printf_i>
 800720a:	e7ed      	b.n	80071e8 <_svfiprintf_r+0x1c0>
 800720c:	08007690 	.word	0x08007690
 8007210:	0800769a 	.word	0x0800769a
 8007214:	00000000 	.word	0x00000000
 8007218:	08006f71 	.word	0x08006f71
 800721c:	08007696 	.word	0x08007696

08007220 <_printf_common>:
 8007220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007224:	4616      	mov	r6, r2
 8007226:	4698      	mov	r8, r3
 8007228:	688a      	ldr	r2, [r1, #8]
 800722a:	690b      	ldr	r3, [r1, #16]
 800722c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007230:	4293      	cmp	r3, r2
 8007232:	bfb8      	it	lt
 8007234:	4613      	movlt	r3, r2
 8007236:	6033      	str	r3, [r6, #0]
 8007238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800723c:	4607      	mov	r7, r0
 800723e:	460c      	mov	r4, r1
 8007240:	b10a      	cbz	r2, 8007246 <_printf_common+0x26>
 8007242:	3301      	adds	r3, #1
 8007244:	6033      	str	r3, [r6, #0]
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	0699      	lsls	r1, r3, #26
 800724a:	bf42      	ittt	mi
 800724c:	6833      	ldrmi	r3, [r6, #0]
 800724e:	3302      	addmi	r3, #2
 8007250:	6033      	strmi	r3, [r6, #0]
 8007252:	6825      	ldr	r5, [r4, #0]
 8007254:	f015 0506 	ands.w	r5, r5, #6
 8007258:	d106      	bne.n	8007268 <_printf_common+0x48>
 800725a:	f104 0a19 	add.w	sl, r4, #25
 800725e:	68e3      	ldr	r3, [r4, #12]
 8007260:	6832      	ldr	r2, [r6, #0]
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	42ab      	cmp	r3, r5
 8007266:	dc26      	bgt.n	80072b6 <_printf_common+0x96>
 8007268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800726c:	6822      	ldr	r2, [r4, #0]
 800726e:	3b00      	subs	r3, #0
 8007270:	bf18      	it	ne
 8007272:	2301      	movne	r3, #1
 8007274:	0692      	lsls	r2, r2, #26
 8007276:	d42b      	bmi.n	80072d0 <_printf_common+0xb0>
 8007278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800727c:	4641      	mov	r1, r8
 800727e:	4638      	mov	r0, r7
 8007280:	47c8      	blx	r9
 8007282:	3001      	adds	r0, #1
 8007284:	d01e      	beq.n	80072c4 <_printf_common+0xa4>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	6922      	ldr	r2, [r4, #16]
 800728a:	f003 0306 	and.w	r3, r3, #6
 800728e:	2b04      	cmp	r3, #4
 8007290:	bf02      	ittt	eq
 8007292:	68e5      	ldreq	r5, [r4, #12]
 8007294:	6833      	ldreq	r3, [r6, #0]
 8007296:	1aed      	subeq	r5, r5, r3
 8007298:	68a3      	ldr	r3, [r4, #8]
 800729a:	bf0c      	ite	eq
 800729c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072a0:	2500      	movne	r5, #0
 80072a2:	4293      	cmp	r3, r2
 80072a4:	bfc4      	itt	gt
 80072a6:	1a9b      	subgt	r3, r3, r2
 80072a8:	18ed      	addgt	r5, r5, r3
 80072aa:	2600      	movs	r6, #0
 80072ac:	341a      	adds	r4, #26
 80072ae:	42b5      	cmp	r5, r6
 80072b0:	d11a      	bne.n	80072e8 <_printf_common+0xc8>
 80072b2:	2000      	movs	r0, #0
 80072b4:	e008      	b.n	80072c8 <_printf_common+0xa8>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4652      	mov	r2, sl
 80072ba:	4641      	mov	r1, r8
 80072bc:	4638      	mov	r0, r7
 80072be:	47c8      	blx	r9
 80072c0:	3001      	adds	r0, #1
 80072c2:	d103      	bne.n	80072cc <_printf_common+0xac>
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072cc:	3501      	adds	r5, #1
 80072ce:	e7c6      	b.n	800725e <_printf_common+0x3e>
 80072d0:	18e1      	adds	r1, r4, r3
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	2030      	movs	r0, #48	@ 0x30
 80072d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072da:	4422      	add	r2, r4
 80072dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072e4:	3302      	adds	r3, #2
 80072e6:	e7c7      	b.n	8007278 <_printf_common+0x58>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4622      	mov	r2, r4
 80072ec:	4641      	mov	r1, r8
 80072ee:	4638      	mov	r0, r7
 80072f0:	47c8      	blx	r9
 80072f2:	3001      	adds	r0, #1
 80072f4:	d0e6      	beq.n	80072c4 <_printf_common+0xa4>
 80072f6:	3601      	adds	r6, #1
 80072f8:	e7d9      	b.n	80072ae <_printf_common+0x8e>
	...

080072fc <_printf_i>:
 80072fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007300:	7e0f      	ldrb	r7, [r1, #24]
 8007302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007304:	2f78      	cmp	r7, #120	@ 0x78
 8007306:	4691      	mov	r9, r2
 8007308:	4680      	mov	r8, r0
 800730a:	460c      	mov	r4, r1
 800730c:	469a      	mov	sl, r3
 800730e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007312:	d807      	bhi.n	8007324 <_printf_i+0x28>
 8007314:	2f62      	cmp	r7, #98	@ 0x62
 8007316:	d80a      	bhi.n	800732e <_printf_i+0x32>
 8007318:	2f00      	cmp	r7, #0
 800731a:	f000 80d2 	beq.w	80074c2 <_printf_i+0x1c6>
 800731e:	2f58      	cmp	r7, #88	@ 0x58
 8007320:	f000 80b9 	beq.w	8007496 <_printf_i+0x19a>
 8007324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800732c:	e03a      	b.n	80073a4 <_printf_i+0xa8>
 800732e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007332:	2b15      	cmp	r3, #21
 8007334:	d8f6      	bhi.n	8007324 <_printf_i+0x28>
 8007336:	a101      	add	r1, pc, #4	@ (adr r1, 800733c <_printf_i+0x40>)
 8007338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800733c:	08007395 	.word	0x08007395
 8007340:	080073a9 	.word	0x080073a9
 8007344:	08007325 	.word	0x08007325
 8007348:	08007325 	.word	0x08007325
 800734c:	08007325 	.word	0x08007325
 8007350:	08007325 	.word	0x08007325
 8007354:	080073a9 	.word	0x080073a9
 8007358:	08007325 	.word	0x08007325
 800735c:	08007325 	.word	0x08007325
 8007360:	08007325 	.word	0x08007325
 8007364:	08007325 	.word	0x08007325
 8007368:	080074a9 	.word	0x080074a9
 800736c:	080073d3 	.word	0x080073d3
 8007370:	08007463 	.word	0x08007463
 8007374:	08007325 	.word	0x08007325
 8007378:	08007325 	.word	0x08007325
 800737c:	080074cb 	.word	0x080074cb
 8007380:	08007325 	.word	0x08007325
 8007384:	080073d3 	.word	0x080073d3
 8007388:	08007325 	.word	0x08007325
 800738c:	08007325 	.word	0x08007325
 8007390:	0800746b 	.word	0x0800746b
 8007394:	6833      	ldr	r3, [r6, #0]
 8007396:	1d1a      	adds	r2, r3, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6032      	str	r2, [r6, #0]
 800739c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073a4:	2301      	movs	r3, #1
 80073a6:	e09d      	b.n	80074e4 <_printf_i+0x1e8>
 80073a8:	6833      	ldr	r3, [r6, #0]
 80073aa:	6820      	ldr	r0, [r4, #0]
 80073ac:	1d19      	adds	r1, r3, #4
 80073ae:	6031      	str	r1, [r6, #0]
 80073b0:	0606      	lsls	r6, r0, #24
 80073b2:	d501      	bpl.n	80073b8 <_printf_i+0xbc>
 80073b4:	681d      	ldr	r5, [r3, #0]
 80073b6:	e003      	b.n	80073c0 <_printf_i+0xc4>
 80073b8:	0645      	lsls	r5, r0, #25
 80073ba:	d5fb      	bpl.n	80073b4 <_printf_i+0xb8>
 80073bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073c0:	2d00      	cmp	r5, #0
 80073c2:	da03      	bge.n	80073cc <_printf_i+0xd0>
 80073c4:	232d      	movs	r3, #45	@ 0x2d
 80073c6:	426d      	negs	r5, r5
 80073c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073cc:	4859      	ldr	r0, [pc, #356]	@ (8007534 <_printf_i+0x238>)
 80073ce:	230a      	movs	r3, #10
 80073d0:	e011      	b.n	80073f6 <_printf_i+0xfa>
 80073d2:	6821      	ldr	r1, [r4, #0]
 80073d4:	6833      	ldr	r3, [r6, #0]
 80073d6:	0608      	lsls	r0, r1, #24
 80073d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80073dc:	d402      	bmi.n	80073e4 <_printf_i+0xe8>
 80073de:	0649      	lsls	r1, r1, #25
 80073e0:	bf48      	it	mi
 80073e2:	b2ad      	uxthmi	r5, r5
 80073e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80073e6:	4853      	ldr	r0, [pc, #332]	@ (8007534 <_printf_i+0x238>)
 80073e8:	6033      	str	r3, [r6, #0]
 80073ea:	bf14      	ite	ne
 80073ec:	230a      	movne	r3, #10
 80073ee:	2308      	moveq	r3, #8
 80073f0:	2100      	movs	r1, #0
 80073f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073f6:	6866      	ldr	r6, [r4, #4]
 80073f8:	60a6      	str	r6, [r4, #8]
 80073fa:	2e00      	cmp	r6, #0
 80073fc:	bfa2      	ittt	ge
 80073fe:	6821      	ldrge	r1, [r4, #0]
 8007400:	f021 0104 	bicge.w	r1, r1, #4
 8007404:	6021      	strge	r1, [r4, #0]
 8007406:	b90d      	cbnz	r5, 800740c <_printf_i+0x110>
 8007408:	2e00      	cmp	r6, #0
 800740a:	d04b      	beq.n	80074a4 <_printf_i+0x1a8>
 800740c:	4616      	mov	r6, r2
 800740e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007412:	fb03 5711 	mls	r7, r3, r1, r5
 8007416:	5dc7      	ldrb	r7, [r0, r7]
 8007418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800741c:	462f      	mov	r7, r5
 800741e:	42bb      	cmp	r3, r7
 8007420:	460d      	mov	r5, r1
 8007422:	d9f4      	bls.n	800740e <_printf_i+0x112>
 8007424:	2b08      	cmp	r3, #8
 8007426:	d10b      	bne.n	8007440 <_printf_i+0x144>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	07df      	lsls	r7, r3, #31
 800742c:	d508      	bpl.n	8007440 <_printf_i+0x144>
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	6861      	ldr	r1, [r4, #4]
 8007432:	4299      	cmp	r1, r3
 8007434:	bfde      	ittt	le
 8007436:	2330      	movle	r3, #48	@ 0x30
 8007438:	f806 3c01 	strble.w	r3, [r6, #-1]
 800743c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007440:	1b92      	subs	r2, r2, r6
 8007442:	6122      	str	r2, [r4, #16]
 8007444:	f8cd a000 	str.w	sl, [sp]
 8007448:	464b      	mov	r3, r9
 800744a:	aa03      	add	r2, sp, #12
 800744c:	4621      	mov	r1, r4
 800744e:	4640      	mov	r0, r8
 8007450:	f7ff fee6 	bl	8007220 <_printf_common>
 8007454:	3001      	adds	r0, #1
 8007456:	d14a      	bne.n	80074ee <_printf_i+0x1f2>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	b004      	add	sp, #16
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	f043 0320 	orr.w	r3, r3, #32
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	4833      	ldr	r0, [pc, #204]	@ (8007538 <_printf_i+0x23c>)
 800746c:	2778      	movs	r7, #120	@ 0x78
 800746e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	6831      	ldr	r1, [r6, #0]
 8007476:	061f      	lsls	r7, r3, #24
 8007478:	f851 5b04 	ldr.w	r5, [r1], #4
 800747c:	d402      	bmi.n	8007484 <_printf_i+0x188>
 800747e:	065f      	lsls	r7, r3, #25
 8007480:	bf48      	it	mi
 8007482:	b2ad      	uxthmi	r5, r5
 8007484:	6031      	str	r1, [r6, #0]
 8007486:	07d9      	lsls	r1, r3, #31
 8007488:	bf44      	itt	mi
 800748a:	f043 0320 	orrmi.w	r3, r3, #32
 800748e:	6023      	strmi	r3, [r4, #0]
 8007490:	b11d      	cbz	r5, 800749a <_printf_i+0x19e>
 8007492:	2310      	movs	r3, #16
 8007494:	e7ac      	b.n	80073f0 <_printf_i+0xf4>
 8007496:	4827      	ldr	r0, [pc, #156]	@ (8007534 <_printf_i+0x238>)
 8007498:	e7e9      	b.n	800746e <_printf_i+0x172>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f023 0320 	bic.w	r3, r3, #32
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	e7f6      	b.n	8007492 <_printf_i+0x196>
 80074a4:	4616      	mov	r6, r2
 80074a6:	e7bd      	b.n	8007424 <_printf_i+0x128>
 80074a8:	6833      	ldr	r3, [r6, #0]
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	6961      	ldr	r1, [r4, #20]
 80074ae:	1d18      	adds	r0, r3, #4
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	062e      	lsls	r6, r5, #24
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	d501      	bpl.n	80074bc <_printf_i+0x1c0>
 80074b8:	6019      	str	r1, [r3, #0]
 80074ba:	e002      	b.n	80074c2 <_printf_i+0x1c6>
 80074bc:	0668      	lsls	r0, r5, #25
 80074be:	d5fb      	bpl.n	80074b8 <_printf_i+0x1bc>
 80074c0:	8019      	strh	r1, [r3, #0]
 80074c2:	2300      	movs	r3, #0
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	4616      	mov	r6, r2
 80074c8:	e7bc      	b.n	8007444 <_printf_i+0x148>
 80074ca:	6833      	ldr	r3, [r6, #0]
 80074cc:	1d1a      	adds	r2, r3, #4
 80074ce:	6032      	str	r2, [r6, #0]
 80074d0:	681e      	ldr	r6, [r3, #0]
 80074d2:	6862      	ldr	r2, [r4, #4]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4630      	mov	r0, r6
 80074d8:	f7f8 fe82 	bl	80001e0 <memchr>
 80074dc:	b108      	cbz	r0, 80074e2 <_printf_i+0x1e6>
 80074de:	1b80      	subs	r0, r0, r6
 80074e0:	6060      	str	r0, [r4, #4]
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	2300      	movs	r3, #0
 80074e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ec:	e7aa      	b.n	8007444 <_printf_i+0x148>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	4632      	mov	r2, r6
 80074f2:	4649      	mov	r1, r9
 80074f4:	4640      	mov	r0, r8
 80074f6:	47d0      	blx	sl
 80074f8:	3001      	adds	r0, #1
 80074fa:	d0ad      	beq.n	8007458 <_printf_i+0x15c>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	079b      	lsls	r3, r3, #30
 8007500:	d413      	bmi.n	800752a <_printf_i+0x22e>
 8007502:	68e0      	ldr	r0, [r4, #12]
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	4298      	cmp	r0, r3
 8007508:	bfb8      	it	lt
 800750a:	4618      	movlt	r0, r3
 800750c:	e7a6      	b.n	800745c <_printf_i+0x160>
 800750e:	2301      	movs	r3, #1
 8007510:	4632      	mov	r2, r6
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	47d0      	blx	sl
 8007518:	3001      	adds	r0, #1
 800751a:	d09d      	beq.n	8007458 <_printf_i+0x15c>
 800751c:	3501      	adds	r5, #1
 800751e:	68e3      	ldr	r3, [r4, #12]
 8007520:	9903      	ldr	r1, [sp, #12]
 8007522:	1a5b      	subs	r3, r3, r1
 8007524:	42ab      	cmp	r3, r5
 8007526:	dcf2      	bgt.n	800750e <_printf_i+0x212>
 8007528:	e7eb      	b.n	8007502 <_printf_i+0x206>
 800752a:	2500      	movs	r5, #0
 800752c:	f104 0619 	add.w	r6, r4, #25
 8007530:	e7f5      	b.n	800751e <_printf_i+0x222>
 8007532:	bf00      	nop
 8007534:	080076a1 	.word	0x080076a1
 8007538:	080076b2 	.word	0x080076b2

0800753c <memmove>:
 800753c:	4288      	cmp	r0, r1
 800753e:	b510      	push	{r4, lr}
 8007540:	eb01 0402 	add.w	r4, r1, r2
 8007544:	d902      	bls.n	800754c <memmove+0x10>
 8007546:	4284      	cmp	r4, r0
 8007548:	4623      	mov	r3, r4
 800754a:	d807      	bhi.n	800755c <memmove+0x20>
 800754c:	1e43      	subs	r3, r0, #1
 800754e:	42a1      	cmp	r1, r4
 8007550:	d008      	beq.n	8007564 <memmove+0x28>
 8007552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800755a:	e7f8      	b.n	800754e <memmove+0x12>
 800755c:	4402      	add	r2, r0
 800755e:	4601      	mov	r1, r0
 8007560:	428a      	cmp	r2, r1
 8007562:	d100      	bne.n	8007566 <memmove+0x2a>
 8007564:	bd10      	pop	{r4, pc}
 8007566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800756a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800756e:	e7f7      	b.n	8007560 <memmove+0x24>

08007570 <_sbrk_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d06      	ldr	r5, [pc, #24]	@ (800758c <_sbrk_r+0x1c>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	602b      	str	r3, [r5, #0]
 800757c:	f7f9 f962 	bl	8000844 <_sbrk>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_sbrk_r+0x1a>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_sbrk_r+0x1a>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	20001ea8 	.word	0x20001ea8

08007590 <memcpy>:
 8007590:	440a      	add	r2, r1
 8007592:	4291      	cmp	r1, r2
 8007594:	f100 33ff 	add.w	r3, r0, #4294967295
 8007598:	d100      	bne.n	800759c <memcpy+0xc>
 800759a:	4770      	bx	lr
 800759c:	b510      	push	{r4, lr}
 800759e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075a6:	4291      	cmp	r1, r2
 80075a8:	d1f9      	bne.n	800759e <memcpy+0xe>
 80075aa:	bd10      	pop	{r4, pc}

080075ac <_realloc_r>:
 80075ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b0:	4680      	mov	r8, r0
 80075b2:	4615      	mov	r5, r2
 80075b4:	460c      	mov	r4, r1
 80075b6:	b921      	cbnz	r1, 80075c2 <_realloc_r+0x16>
 80075b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075bc:	4611      	mov	r1, r2
 80075be:	f7ff bc4b 	b.w	8006e58 <_malloc_r>
 80075c2:	b92a      	cbnz	r2, 80075d0 <_realloc_r+0x24>
 80075c4:	f7ff fbdc 	bl	8006d80 <_free_r>
 80075c8:	2400      	movs	r4, #0
 80075ca:	4620      	mov	r0, r4
 80075cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d0:	f000 f81a 	bl	8007608 <_malloc_usable_size_r>
 80075d4:	4285      	cmp	r5, r0
 80075d6:	4606      	mov	r6, r0
 80075d8:	d802      	bhi.n	80075e0 <_realloc_r+0x34>
 80075da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075de:	d8f4      	bhi.n	80075ca <_realloc_r+0x1e>
 80075e0:	4629      	mov	r1, r5
 80075e2:	4640      	mov	r0, r8
 80075e4:	f7ff fc38 	bl	8006e58 <_malloc_r>
 80075e8:	4607      	mov	r7, r0
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d0ec      	beq.n	80075c8 <_realloc_r+0x1c>
 80075ee:	42b5      	cmp	r5, r6
 80075f0:	462a      	mov	r2, r5
 80075f2:	4621      	mov	r1, r4
 80075f4:	bf28      	it	cs
 80075f6:	4632      	movcs	r2, r6
 80075f8:	f7ff ffca 	bl	8007590 <memcpy>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4640      	mov	r0, r8
 8007600:	f7ff fbbe 	bl	8006d80 <_free_r>
 8007604:	463c      	mov	r4, r7
 8007606:	e7e0      	b.n	80075ca <_realloc_r+0x1e>

08007608 <_malloc_usable_size_r>:
 8007608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800760c:	1f18      	subs	r0, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	bfbc      	itt	lt
 8007612:	580b      	ldrlt	r3, [r1, r0]
 8007614:	18c0      	addlt	r0, r0, r3
 8007616:	4770      	bx	lr

08007618 <_init>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr

08007624 <_fini>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr
