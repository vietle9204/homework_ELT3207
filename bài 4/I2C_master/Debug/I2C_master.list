
I2C_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000680  08000680  00001680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000690  08000690  00002004  2**0
                  CONTENTS
  4 .ARM          00000008  08000690  08000690  00001690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000698  08000698  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000698  08000698  00001698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800069c  0800069c  0000169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006a0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006a4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006a4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000148b  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000058f  00000000  00000000  000034bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000159  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143b6  00000000  00000000  00003d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000255c  00000000  00000000  00018147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081076  00000000  00000000  0001a6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b719  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000608  00000000  00000000  0009b75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0009bd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000668 	.word	0x08000668

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000668 	.word	0x08000668

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
void I2C1_Write(uint8_t addr, uint8_t *data, uint8_t len);
void I2C1_Read(uint8_t addr, uint8_t *data, uint8_t len);
void delay_ms(uint32_t ms);
void LED_Blink(void);

int main(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0
    // 1. Cấu hình PA5 (Button) và PA6 (LED)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001fe:	4b35      	ldr	r3, [pc, #212]	@ (80002d4 <main+0xdc>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000202:	4a34      	ldr	r2, [pc, #208]	@ (80002d4 <main+0xdc>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER &= ~(GPIO_MODER_MODE5); // PA5: Input
 800020a:	4b33      	ldr	r3, [pc, #204]	@ (80002d8 <main+0xe0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a32      	ldr	r2, [pc, #200]	@ (80002d8 <main+0xe0>)
 8000210:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000214:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPD5_0; // Pull-up
 8000216:	4b30      	ldr	r3, [pc, #192]	@ (80002d8 <main+0xe0>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	4a2f      	ldr	r2, [pc, #188]	@ (80002d8 <main+0xe0>)
 800021c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000220:	60d3      	str	r3, [r2, #12]
    GPIOA->MODER |= GPIO_MODER_MODE6_0; // PA6: Output
 8000222:	4b2d      	ldr	r3, [pc, #180]	@ (80002d8 <main+0xe0>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a2c      	ldr	r2, [pc, #176]	@ (80002d8 <main+0xe0>)
 8000228:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800022c:	6013      	str	r3, [r2, #0]

    // 2. Cấu hình I2C1
    I2C1_Init();
 800022e:	f000 f859 	bl	80002e4 <I2C1_Init>

    uint8_t led_on_msg[] = "led on";
 8000232:	4a2a      	ldr	r2, [pc, #168]	@ (80002dc <main+0xe4>)
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800023c:	6018      	str	r0, [r3, #0]
 800023e:	3304      	adds	r3, #4
 8000240:	8019      	strh	r1, [r3, #0]
 8000242:	3302      	adds	r3, #2
 8000244:	0c0a      	lsrs	r2, r1, #16
 8000246:	701a      	strb	r2, [r3, #0]
    uint8_t led_off_msg[] = "led off";
 8000248:	4a25      	ldr	r2, [pc, #148]	@ (80002e0 <main+0xe8>)
 800024a:	f107 0308 	add.w	r3, r7, #8
 800024e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000252:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t response[7];

    while (1) {
        if (!(GPIOA->IDR & GPIO_IDR_ID5)) {  // Nút nhấn PA5 được nhấn
 8000256:	4b20      	ldr	r3, [pc, #128]	@ (80002d8 <main+0xe0>)
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	f003 0320 	and.w	r3, r3, #32
 800025e:	2b00      	cmp	r3, #0
 8000260:	d1f9      	bne.n	8000256 <main+0x5e>
            delay_ms(50); // Chống dội phím
 8000262:	2032      	movs	r0, #50	@ 0x32
 8000264:	f000 f942 	bl	80004ec <delay_ms>
            while (!(GPIOA->IDR & GPIO_IDR_ID5)); // Chờ thả nút
 8000268:	bf00      	nop
 800026a:	4b1b      	ldr	r3, [pc, #108]	@ (80002d8 <main+0xe0>)
 800026c:	691b      	ldr	r3, [r3, #16]
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <main+0x72>

            I2C1_Write(SLAVE_ADDR, led_on_msg, strlen((char*)led_on_msg)); // Gửi "led on"
 8000276:	f107 0310 	add.w	r3, r7, #16
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ffb4 	bl	80001e8 <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b2da      	uxtb	r2, r3
 8000284:	f107 0310 	add.w	r3, r7, #16
 8000288:	4619      	mov	r1, r3
 800028a:	2027      	movs	r0, #39	@ 0x27
 800028c:	f000 f868 	bl	8000360 <I2C1_Write>
            delay_ms(100);
 8000290:	2064      	movs	r0, #100	@ 0x64
 8000292:	f000 f92b 	bl	80004ec <delay_ms>
            I2C1_Read(SLAVE_ADDR, response, 6); // Nhận phản hồi
 8000296:	463b      	mov	r3, r7
 8000298:	2206      	movs	r2, #6
 800029a:	4619      	mov	r1, r3
 800029c:	2027      	movs	r0, #39	@ 0x27
 800029e:	f000 f8a7 	bl	80003f0 <I2C1_Read>
            response[6] = '\0'; // Thêm kết thúc chuỗi
 80002a2:	2300      	movs	r3, #0
 80002a4:	71bb      	strb	r3, [r7, #6]

            if (strcmp((char*)response, "led on") == 0) {
 80002a6:	463b      	mov	r3, r7
 80002a8:	490c      	ldr	r1, [pc, #48]	@ (80002dc <main+0xe4>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff92 	bl	80001d4 <strcmp>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d102      	bne.n	80002bc <main+0xc4>
                LED_Blink(); // Nháy LED PA6
 80002b6:	f000 f8fb 	bl	80004b0 <LED_Blink>
 80002ba:	e7cc      	b.n	8000256 <main+0x5e>
            } else if (strcmp((char*)response, "led off") == 0) {
 80002bc:	463b      	mov	r3, r7
 80002be:	4908      	ldr	r1, [pc, #32]	@ (80002e0 <main+0xe8>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff87 	bl	80001d4 <strcmp>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1c4      	bne.n	8000256 <main+0x5e>
                LED_Blink();
 80002cc:	f000 f8f0 	bl	80004b0 <LED_Blink>
        if (!(GPIOA->IDR & GPIO_IDR_ID5)) {  // Nút nhấn PA5 được nhấn
 80002d0:	e7c1      	b.n	8000256 <main+0x5e>
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	08000680 	.word	0x08000680
 80002e0:	08000688 	.word	0x08000688

080002e4 <I2C1_Init>:
            }
        }
    }
}

void I2C1_Init(void) {
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80002e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <I2C1_Init+0x70>)
 80002ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002ec:	4a19      	ldr	r2, [pc, #100]	@ (8000354 <I2C1_Init+0x70>)
 80002ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002f2:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002f4:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <I2C1_Init+0x70>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f8:	4a16      	ldr	r2, [pc, #88]	@ (8000354 <I2C1_Init+0x70>)
 80002fa:	f043 0302 	orr.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOB->MODER |= GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;
 8000300:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <I2C1_Init+0x74>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a14      	ldr	r2, [pc, #80]	@ (8000358 <I2C1_Init+0x74>)
 8000306:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800030a:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (4 << (6 * 4)) | (4 << (7 * 4));
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <I2C1_Init+0x74>)
 800030e:	6a1b      	ldr	r3, [r3, #32]
 8000310:	4a11      	ldr	r2, [pc, #68]	@ (8000358 <I2C1_Init+0x74>)
 8000312:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000316:	6213      	str	r3, [r2, #32]
    GPIOB->OTYPER |= GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7;
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <I2C1_Init+0x74>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a0e      	ldr	r2, [pc, #56]	@ (8000358 <I2C1_Init+0x74>)
 800031e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000322:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR |= GPIO_PUPDR_PUPD6_0 | GPIO_PUPDR_PUPD7_0;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <I2C1_Init+0x74>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4a0b      	ldr	r2, [pc, #44]	@ (8000358 <I2C1_Init+0x74>)
 800032a:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 800032e:	60d3      	str	r3, [r2, #12]

    I2C1->CR1 = I2C_CR1_PE;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <I2C1_Init+0x78>)
 8000332:	2201      	movs	r2, #1
 8000334:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 42; // APB1 = 42MHz
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <I2C1_Init+0x78>)
 8000338:	222a      	movs	r2, #42	@ 0x2a
 800033a:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 210; // 100kHz
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <I2C1_Init+0x78>)
 800033e:	22d2      	movs	r2, #210	@ 0xd2
 8000340:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <I2C1_Init+0x78>)
 8000344:	222b      	movs	r2, #43	@ 0x2b
 8000346:	621a      	str	r2, [r3, #32]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	40020400 	.word	0x40020400
 800035c:	40005400 	.word	0x40005400

08000360 <I2C1_Write>:

void I2C1_Write(uint8_t addr, uint8_t *data, uint8_t len) {
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	6039      	str	r1, [r7, #0]
 800036a:	71fb      	strb	r3, [r7, #7]
 800036c:	4613      	mov	r3, r2
 800036e:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8000370:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <I2C1_Write+0x8c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a1d      	ldr	r2, [pc, #116]	@ (80003ec <I2C1_Write+0x8c>)
 8000376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800037a:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 800037c:	bf00      	nop
 800037e:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <I2C1_Write+0x8c>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0f9      	beq.n	800037e <I2C1_Write+0x1e>

    I2C1->DR = (addr << 1);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4a17      	ldr	r2, [pc, #92]	@ (80003ec <I2C1_Write+0x8c>)
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000392:	bf00      	nop
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <I2C1_Write+0x8c>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0302 	and.w	r3, r3, #2
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f9      	beq.n	8000394 <I2C1_Write+0x34>
    (void) I2C1->SR2;
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <I2C1_Write+0x8c>)
 80003a2:	699b      	ldr	r3, [r3, #24]

    for (uint8_t i = 0; i < len; i++) {
 80003a4:	2300      	movs	r3, #0
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e00f      	b.n	80003ca <I2C1_Write+0x6a>
        I2C1->DR = data[i];
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	683a      	ldr	r2, [r7, #0]
 80003ae:	4413      	add	r3, r2
 80003b0:	781a      	ldrb	r2, [r3, #0]
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <I2C1_Write+0x8c>)
 80003b4:	611a      	str	r2, [r3, #16]
        while (!(I2C1->SR1 & I2C_SR1_BTF));
 80003b6:	bf00      	nop
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <I2C1_Write+0x8c>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0f9      	beq.n	80003b8 <I2C1_Write+0x58>
    for (uint8_t i = 0; i < len; i++) {
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	3301      	adds	r3, #1
 80003c8:	73fb      	strb	r3, [r7, #15]
 80003ca:	7bfa      	ldrb	r2, [r7, #15]
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d3eb      	bcc.n	80003aa <I2C1_Write+0x4a>
    }

    I2C1->CR1 |= I2C_CR1_STOP;
 80003d2:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <I2C1_Write+0x8c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a05      	ldr	r2, [pc, #20]	@ (80003ec <I2C1_Write+0x8c>)
 80003d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003dc:	6013      	str	r3, [r2, #0]
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40005400 	.word	0x40005400

080003f0 <I2C1_Read>:

void I2C1_Read(uint8_t addr, uint8_t *data, uint8_t len) {
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	6039      	str	r1, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	4613      	mov	r3, r2
 80003fe:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8000400:	4b2a      	ldr	r3, [pc, #168]	@ (80004ac <I2C1_Read+0xbc>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a29      	ldr	r2, [pc, #164]	@ (80004ac <I2C1_Read+0xbc>)
 8000406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800040a:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 800040c:	bf00      	nop
 800040e:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <I2C1_Read+0xbc>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0f9      	beq.n	800040e <I2C1_Read+0x1e>

    I2C1->DR = (addr << 1) | 1;
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	f043 0201 	orr.w	r2, r3, #1
 8000422:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <I2C1_Read+0xbc>)
 8000424:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000426:	bf00      	nop
 8000428:	4b20      	ldr	r3, [pc, #128]	@ (80004ac <I2C1_Read+0xbc>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f003 0302 	and.w	r3, r3, #2
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f9      	beq.n	8000428 <I2C1_Read+0x38>
    (void) I2C1->SR2;
 8000434:	4b1d      	ldr	r3, [pc, #116]	@ (80004ac <I2C1_Read+0xbc>)
 8000436:	699b      	ldr	r3, [r3, #24]

    for (uint8_t i = 0; i < len - 1; i++) {
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
 800043c:	e010      	b.n	8000460 <I2C1_Read+0x70>
        while (!(I2C1->SR1 & I2C_SR1_RXNE));
 800043e:	bf00      	nop
 8000440:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <I2C1_Read+0xbc>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0f9      	beq.n	8000440 <I2C1_Read+0x50>
        data[i] = I2C1->DR;
 800044c:	4b17      	ldr	r3, [pc, #92]	@ (80004ac <I2C1_Read+0xbc>)
 800044e:	6919      	ldr	r1, [r3, #16]
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	683a      	ldr	r2, [r7, #0]
 8000454:	4413      	add	r3, r2
 8000456:	b2ca      	uxtb	r2, r1
 8000458:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < len - 1; i++) {
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	3301      	adds	r3, #1
 800045e:	73fb      	strb	r3, [r7, #15]
 8000460:	7bfa      	ldrb	r2, [r7, #15]
 8000462:	79bb      	ldrb	r3, [r7, #6]
 8000464:	3b01      	subs	r3, #1
 8000466:	429a      	cmp	r2, r3
 8000468:	dbe9      	blt.n	800043e <I2C1_Read+0x4e>
    }

    I2C1->CR1 &= ~I2C_CR1_ACK;
 800046a:	4b10      	ldr	r3, [pc, #64]	@ (80004ac <I2C1_Read+0xbc>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a0f      	ldr	r2, [pc, #60]	@ (80004ac <I2C1_Read+0xbc>)
 8000470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000474:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= I2C_CR1_STOP;
 8000476:	4b0d      	ldr	r3, [pc, #52]	@ (80004ac <I2C1_Read+0xbc>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a0c      	ldr	r2, [pc, #48]	@ (80004ac <I2C1_Read+0xbc>)
 800047c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000480:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_RXNE));
 8000482:	bf00      	nop
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <I2C1_Read+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0f9      	beq.n	8000484 <I2C1_Read+0x94>
    data[len - 1] = I2C1->DR;
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <I2C1_Read+0xbc>)
 8000492:	6919      	ldr	r1, [r3, #16]
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	3b01      	subs	r3, #1
 8000498:	683a      	ldr	r2, [r7, #0]
 800049a:	4413      	add	r3, r2
 800049c:	b2ca      	uxtb	r2, r1
 800049e:	701a      	strb	r2, [r3, #0]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40005400 	.word	0x40005400

080004b0 <LED_Blink>:

void LED_Blink(void) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	e00c      	b.n	80004d6 <LED_Blink+0x26>
        GPIOA->ODR ^= GPIO_ODR_OD6;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	@ (80004e8 <LED_Blink+0x38>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a09      	ldr	r2, [pc, #36]	@ (80004e8 <LED_Blink+0x38>)
 80004c2:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80004c6:	6153      	str	r3, [r2, #20]
        delay_ms(500);
 80004c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004cc:	f000 f80e 	bl	80004ec <delay_ms>
    for (int i = 0; i < 3; i++) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3301      	adds	r3, #1
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	ddef      	ble.n	80004bc <LED_Blink+0xc>
    }
}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020000 	.word	0x40020000

080004ec <delay_ms>:

void delay_ms(uint32_t ms) {
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	e003      	b.n	8000502 <delay_ms+0x16>
        __NOP();
 80004fa:	bf00      	nop
    for (uint32_t i = 0; i < ms * 4000; i++) {
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3301      	adds	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000508:	fb02 f303 	mul.w	r3, r2, r3
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	429a      	cmp	r2, r3
 8000510:	d3f3      	bcc.n	80004fa <delay_ms+0xe>
    }
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <NMI_Handler+0x4>

08000528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <MemManage_Handler+0x4>

08000538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <UsageFault_Handler+0x4>

08000548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000576:	f000 f83f 	bl	80005f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <SystemInit+0x20>)
 8000586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800058a:	4a05      	ldr	r2, [pc, #20]	@ (80005a0 <SystemInit+0x20>)
 800058c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005a8:	f7ff ffea 	bl	8000580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ac:	480c      	ldr	r0, [pc, #48]	@ (80005e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005ae:	490d      	ldr	r1, [pc, #52]	@ (80005e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005c4:	4c0a      	ldr	r4, [pc, #40]	@ (80005f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d2:	f000 f825 	bl	8000620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005d6:	f7ff fe0f 	bl	80001f8 <main>
  bx  lr    
 80005da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005e8:	080006a0 	.word	0x080006a0
  ldr r2, =_sbss
 80005ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005f0:	20000024 	.word	0x20000024

080005f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC_IRQHandler>
	...

080005f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <HAL_IncTick+0x20>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_IncTick+0x24>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <HAL_IncTick+0x24>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000000 	.word	0x20000000
 800061c:	20000020 	.word	0x20000020

08000620 <__libc_init_array>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	4d0d      	ldr	r5, [pc, #52]	@ (8000658 <__libc_init_array+0x38>)
 8000624:	4c0d      	ldr	r4, [pc, #52]	@ (800065c <__libc_init_array+0x3c>)
 8000626:	1b64      	subs	r4, r4, r5
 8000628:	10a4      	asrs	r4, r4, #2
 800062a:	2600      	movs	r6, #0
 800062c:	42a6      	cmp	r6, r4
 800062e:	d109      	bne.n	8000644 <__libc_init_array+0x24>
 8000630:	4d0b      	ldr	r5, [pc, #44]	@ (8000660 <__libc_init_array+0x40>)
 8000632:	4c0c      	ldr	r4, [pc, #48]	@ (8000664 <__libc_init_array+0x44>)
 8000634:	f000 f818 	bl	8000668 <_init>
 8000638:	1b64      	subs	r4, r4, r5
 800063a:	10a4      	asrs	r4, r4, #2
 800063c:	2600      	movs	r6, #0
 800063e:	42a6      	cmp	r6, r4
 8000640:	d105      	bne.n	800064e <__libc_init_array+0x2e>
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f855 3b04 	ldr.w	r3, [r5], #4
 8000648:	4798      	blx	r3
 800064a:	3601      	adds	r6, #1
 800064c:	e7ee      	b.n	800062c <__libc_init_array+0xc>
 800064e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000652:	4798      	blx	r3
 8000654:	3601      	adds	r6, #1
 8000656:	e7f2      	b.n	800063e <__libc_init_array+0x1e>
 8000658:	08000698 	.word	0x08000698
 800065c:	08000698 	.word	0x08000698
 8000660:	08000698 	.word	0x08000698
 8000664:	0800069c 	.word	0x0800069c

08000668 <_init>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr

08000674 <_fini>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	bf00      	nop
 8000678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	469e      	mov	lr, r3
 800067e:	4770      	bx	lr
