
I2C_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004a4  080004a4  000014a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004b4  080004b4  00002004  2**0
                  CONTENTS
  4 .ARM          00000008  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c0  080004c0  000014c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004c4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  080004c8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080004c8  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013cb  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000056b  00000000  00000000  000033ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00003970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014b  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001452a  00000000  00000000  00003c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023c4  00000000  00000000  000181bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c86  00000000  00000000  0001a581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  0009c24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0009c804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800048c 	.word	0x0800048c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800048c 	.word	0x0800048c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <main>:
void I2C1_Write(uint8_t *data, uint8_t len);
void I2C1_Read(uint8_t *data, uint8_t len);

uint8_t buffer[7];

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    // Cấu hình PC13 (LED)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80001f0:	4b1a      	ldr	r3, [pc, #104]	@ (800025c <main+0x70>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f4:	4a19      	ldr	r2, [pc, #100]	@ (800025c <main+0x70>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOC->MODER |= GPIO_MODER_MODE13_0;
 80001fc:	4b18      	ldr	r3, [pc, #96]	@ (8000260 <main+0x74>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a17      	ldr	r2, [pc, #92]	@ (8000260 <main+0x74>)
 8000202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000206:	6013      	str	r3, [r2, #0]

    // Cấu hình I2C1
    I2C1_Init();
 8000208:	f000 f832 	bl	8000270 <I2C1_Init>

    while (1) {
        I2C1_Read(buffer, 6);
 800020c:	2106      	movs	r1, #6
 800020e:	4815      	ldr	r0, [pc, #84]	@ (8000264 <main+0x78>)
 8000210:	f000 f870 	bl	80002f4 <I2C1_Read>
        buffer[6] = '\0';
 8000214:	4b13      	ldr	r3, [pc, #76]	@ (8000264 <main+0x78>)
 8000216:	2200      	movs	r2, #0
 8000218:	719a      	strb	r2, [r3, #6]

        if (strcmp((char*)buffer, "led on") == 0) {
 800021a:	4913      	ldr	r1, [pc, #76]	@ (8000268 <main+0x7c>)
 800021c:	4811      	ldr	r0, [pc, #68]	@ (8000264 <main+0x78>)
 800021e:	f7ff ffdb 	bl	80001d8 <strcmp>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d108      	bne.n	800023a <main+0x4e>
            GPIOC->BSRR = GPIO_BSRR_BS13;
 8000228:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <main+0x74>)
 800022a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800022e:	619a      	str	r2, [r3, #24]
            I2C1_Write((uint8_t*)"led on", 6);
 8000230:	2106      	movs	r1, #6
 8000232:	480d      	ldr	r0, [pc, #52]	@ (8000268 <main+0x7c>)
 8000234:	f000 f838 	bl	80002a8 <I2C1_Write>
 8000238:	e7e8      	b.n	800020c <main+0x20>
        } else if (strcmp((char*)buffer, "led off") == 0) {
 800023a:	490c      	ldr	r1, [pc, #48]	@ (800026c <main+0x80>)
 800023c:	4809      	ldr	r0, [pc, #36]	@ (8000264 <main+0x78>)
 800023e:	f7ff ffcb 	bl	80001d8 <strcmp>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1e1      	bne.n	800020c <main+0x20>
            GPIOC->BSRR = GPIO_BSRR_BR13;
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <main+0x74>)
 800024a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800024e:	619a      	str	r2, [r3, #24]
            I2C1_Write((uint8_t*)"led off", 6);
 8000250:	2106      	movs	r1, #6
 8000252:	4806      	ldr	r0, [pc, #24]	@ (800026c <main+0x80>)
 8000254:	f000 f828 	bl	80002a8 <I2C1_Write>
        I2C1_Read(buffer, 6);
 8000258:	e7d8      	b.n	800020c <main+0x20>
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020800 	.word	0x40020800
 8000264:	20000020 	.word	0x20000020
 8000268:	080004a4 	.word	0x080004a4
 800026c:	080004ac 	.word	0x080004ac

08000270 <I2C1_Init>:
        }
    }
}

void I2C1_Init(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000274:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <I2C1_Init+0x30>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000278:	4a09      	ldr	r2, [pc, #36]	@ (80002a0 <I2C1_Init+0x30>)
 800027a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800027e:	6413      	str	r3, [r2, #64]	@ 0x40
    I2C1->OAR1 = (0x27 << 1);
 8000280:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <I2C1_Init+0x34>)
 8000282:	224e      	movs	r2, #78	@ 0x4e
 8000284:	609a      	str	r2, [r3, #8]
    I2C1->CR1 |= I2C_CR1_PE | I2C_CR1_ACK;
 8000286:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <I2C1_Init+0x34>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a06      	ldr	r2, [pc, #24]	@ (80002a4 <I2C1_Init+0x34>)
 800028c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40005400 	.word	0x40005400

080002a8 <I2C1_Write>:

void I2C1_Write(uint8_t *data, uint8_t len) {
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < len; i++) {
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	e00f      	b.n	80002da <I2C1_Write+0x32>
        while (!(I2C1->SR1 & I2C_SR1_TXE));
 80002ba:	bf00      	nop
 80002bc:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <I2C1_Write+0x48>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <I2C1_Write+0x14>
        I2C1->DR = data[i];
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	781a      	ldrb	r2, [r3, #0]
 80002d0:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <I2C1_Write+0x48>)
 80002d2:	611a      	str	r2, [r3, #16]
    for (uint8_t i = 0; i < len; i++) {
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	3301      	adds	r3, #1
 80002d8:	73fb      	strb	r3, [r7, #15]
 80002da:	7bfa      	ldrb	r2, [r7, #15]
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d3eb      	bcc.n	80002ba <I2C1_Write+0x12>
    }
}
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40005400 	.word	0x40005400

080002f4 <I2C1_Read>:

void I2C1_Read(uint8_t *data, uint8_t len) {
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < len; i++) {
 8000300:	2300      	movs	r3, #0
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e010      	b.n	8000328 <I2C1_Read+0x34>
        while (!(I2C1->SR1 & I2C_SR1_RXNE));
 8000306:	bf00      	nop
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <I2C1_Read+0x4c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <I2C1_Read+0x14>
        data[i] = I2C1->DR;
 8000314:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <I2C1_Read+0x4c>)
 8000316:	6919      	ldr	r1, [r3, #16]
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	4413      	add	r3, r2
 800031e:	b2ca      	uxtb	r2, r1
 8000320:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < len; i++) {
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	3301      	adds	r3, #1
 8000326:	73fb      	strb	r3, [r7, #15]
 8000328:	7bfa      	ldrb	r2, [r7, #15]
 800032a:	78fb      	ldrb	r3, [r7, #3]
 800032c:	429a      	cmp	r2, r3
 800032e:	d3ea      	bcc.n	8000306 <I2C1_Read+0x12>
    }
}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40005400 	.word	0x40005400

08000344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <NMI_Handler+0x4>

0800034c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <HardFault_Handler+0x4>

08000354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <MemManage_Handler+0x4>

0800035c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <UsageFault_Handler+0x4>

0800036c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039a:	f000 f83f 	bl	800041c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <SystemInit+0x20>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ae:	4a05      	ldr	r2, [pc, #20]	@ (80003c4 <SystemInit+0x20>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000400 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003cc:	f7ff ffea 	bl	80003a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d0:	480c      	ldr	r0, [pc, #48]	@ (8000404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003d2:	490d      	ldr	r1, [pc, #52]	@ (8000408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003d4:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003f6:	f000 f825 	bl	8000444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003fa:	f7ff fef7 	bl	80001ec <main>
  bx  lr    
 80003fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800040c:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000410:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000414:	2000002c 	.word	0x2000002c

08000418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC_IRQHandler>
	...

0800041c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <HAL_IncTick+0x20>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <HAL_IncTick+0x24>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4413      	add	r3, r2
 800042c:	4a04      	ldr	r2, [pc, #16]	@ (8000440 <HAL_IncTick+0x24>)
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	20000000 	.word	0x20000000
 8000440:	20000028 	.word	0x20000028

08000444 <__libc_init_array>:
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	4d0d      	ldr	r5, [pc, #52]	@ (800047c <__libc_init_array+0x38>)
 8000448:	4c0d      	ldr	r4, [pc, #52]	@ (8000480 <__libc_init_array+0x3c>)
 800044a:	1b64      	subs	r4, r4, r5
 800044c:	10a4      	asrs	r4, r4, #2
 800044e:	2600      	movs	r6, #0
 8000450:	42a6      	cmp	r6, r4
 8000452:	d109      	bne.n	8000468 <__libc_init_array+0x24>
 8000454:	4d0b      	ldr	r5, [pc, #44]	@ (8000484 <__libc_init_array+0x40>)
 8000456:	4c0c      	ldr	r4, [pc, #48]	@ (8000488 <__libc_init_array+0x44>)
 8000458:	f000 f818 	bl	800048c <_init>
 800045c:	1b64      	subs	r4, r4, r5
 800045e:	10a4      	asrs	r4, r4, #2
 8000460:	2600      	movs	r6, #0
 8000462:	42a6      	cmp	r6, r4
 8000464:	d105      	bne.n	8000472 <__libc_init_array+0x2e>
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	f855 3b04 	ldr.w	r3, [r5], #4
 800046c:	4798      	blx	r3
 800046e:	3601      	adds	r6, #1
 8000470:	e7ee      	b.n	8000450 <__libc_init_array+0xc>
 8000472:	f855 3b04 	ldr.w	r3, [r5], #4
 8000476:	4798      	blx	r3
 8000478:	3601      	adds	r6, #1
 800047a:	e7f2      	b.n	8000462 <__libc_init_array+0x1e>
 800047c:	080004bc 	.word	0x080004bc
 8000480:	080004bc 	.word	0x080004bc
 8000484:	080004bc 	.word	0x080004bc
 8000488:	080004c0 	.word	0x080004c0

0800048c <_init>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	bf00      	nop
 8000490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000492:	bc08      	pop	{r3}
 8000494:	469e      	mov	lr, r3
 8000496:	4770      	bx	lr

08000498 <_fini>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr
