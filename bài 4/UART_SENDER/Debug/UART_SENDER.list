
UART_SENDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000488  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800061c  0800061c  0000161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000640  08000640  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000640  08000640  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000640  08000640  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000640  08000640  00001640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000644  08000644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000648  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000004  0800064c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  0800064c  00002040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017fc  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000649  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00003e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000163  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014688  00000000  00000000  000041db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002504  00000000  00000000  00018863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ed5  00000000  00000000  0001ad67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009dc3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000064c  00000000  00000000  0009dc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0009e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000604 	.word	0x08000604

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000604 	.word	0x08000604

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <UART1_Init>:
#include "stm32f4xx.h"
#include <string.h>

void UART1_Init(void) {
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000214:	4b14      	ldr	r3, [pc, #80]	@ (8000268 <UART1_Init+0x58>)
 8000216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000218:	4a13      	ldr	r2, [pc, #76]	@ (8000268 <UART1_Init+0x58>)
 800021a:	f043 0310 	orr.w	r3, r3, #16
 800021e:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000220:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <UART1_Init+0x58>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a10      	ldr	r2, [pc, #64]	@ (8000268 <UART1_Init+0x58>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (2 << (9 * 2)) | (2 << (10 * 2));  // PA9, PA10 alternate function
 800022c:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <UART1_Init+0x5c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0e      	ldr	r2, [pc, #56]	@ (800026c <UART1_Init+0x5c>)
 8000232:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000236:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] |= (7 << (1 * 4)) | (7 << (2 * 4));  // AF7
 8000238:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <UART1_Init+0x5c>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800023c:	4a0b      	ldr	r2, [pc, #44]	@ (800026c <UART1_Init+0x5c>)
 800023e:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8000242:	6253      	str	r3, [r2, #36]	@ 0x24

    USART1->BRR = 0x0683; // 9600 baud @16MHz
 8000244:	4b0a      	ldr	r3, [pc, #40]	@ (8000270 <UART1_Init+0x60>)
 8000246:	f240 6283 	movw	r2, #1667	@ 0x683
 800024a:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <UART1_Init+0x60>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a07      	ldr	r2, [pc, #28]	@ (8000270 <UART1_Init+0x60>)
 8000252:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000256:	f043 030c 	orr.w	r3, r3, #12
 800025a:	60d3      	str	r3, [r2, #12]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000
 8000270:	40011000 	.word	0x40011000

08000274 <GPIO_Init>:

void GPIO_Init(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000278:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <GPIO_Init+0x54>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <GPIO_Init+0x54>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (1 << (6 * 2)); // PA6 output
 8000284:	4b11      	ldr	r3, [pc, #68]	@ (80002cc <GPIO_Init+0x58>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a10      	ldr	r2, [pc, #64]	@ (80002cc <GPIO_Init+0x58>)
 800028a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800028e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(3 << (0 * 2)); // PA5 input
 8000290:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <GPIO_Init+0x58>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0d      	ldr	r2, [pc, #52]	@ (80002cc <GPIO_Init+0x58>)
 8000296:	f023 0303 	bic.w	r3, r3, #3
 800029a:	6013      	str	r3, [r2, #0]
    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA;
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <GPIO_Init+0x5c>)
 800029e:	4a0c      	ldr	r2, [pc, #48]	@ (80002d0 <GPIO_Init+0x5c>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= EXTI_IMR_IM5;
 80002a4:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <GPIO_Init+0x60>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <GPIO_Init+0x60>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR5;
 80002b0:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <GPIO_Init+0x60>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	4a07      	ldr	r2, [pc, #28]	@ (80002d4 <GPIO_Init+0x60>)
 80002b6:	f043 0320 	orr.w	r3, r3, #32
 80002ba:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002bc:	2017      	movs	r0, #23
 80002be:	f7ff ff89 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40013800 	.word	0x40013800
 80002d4:	40013c00 	.word	0x40013c00

080002d8 <delay>:

void delay(volatile uint32_t t) {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    while (t--) __NOP();
 80002e0:	e000      	b.n	80002e4 <delay+0xc>
 80002e2:	bf00      	nop
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	1e5a      	subs	r2, r3, #1
 80002e8:	607a      	str	r2, [r7, #4]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f9      	bne.n	80002e2 <delay+0xa>
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <USART1_Send>:

void USART1_Send(char *str) {
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000304:	e00c      	b.n	8000320 <USART1_Send+0x24>
        while (!(USART1->SR & USART_SR_TXE));
 8000306:	bf00      	nop
 8000308:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <USART1_Send+0x3c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <USART1_Send+0xc>
        USART1->DR = *str++;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	607a      	str	r2, [r7, #4]
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <USART1_Send+0x3c>)
 800031e:	605a      	str	r2, [r3, #4]
    while (*str) {
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1ee      	bne.n	8000306 <USART1_Send+0xa>
    }
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40011000 	.word	0x40011000

0800033c <EXTI9_5_IRQHandler>:
volatile uint8_t buttonFlag = 0;
uint8_t ledState = 0;
char rxBuf[20];
volatile uint8_t rxIndex = 0;

void EXTI9_5_IRQHandler(void) {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR5) {
 8000340:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <EXTI9_5_IRQHandler+0x2c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0320 	and.w	r3, r3, #32
 8000348:	2b00      	cmp	r3, #0
 800034a:	d008      	beq.n	800035e <EXTI9_5_IRQHandler+0x22>
        buttonFlag = 1;
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <EXTI9_5_IRQHandler+0x30>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
        EXTI->PR |= EXTI_PR_PR5;
 8000352:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <EXTI9_5_IRQHandler+0x2c>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a04      	ldr	r2, [pc, #16]	@ (8000368 <EXTI9_5_IRQHandler+0x2c>)
 8000358:	f043 0320 	orr.w	r3, r3, #32
 800035c:	6153      	str	r3, [r2, #20]
    }
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40013c00 	.word	0x40013c00
 800036c:	20000020 	.word	0x20000020

08000370 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE) {
 8000376:	4b25      	ldr	r3, [pc, #148]	@ (800040c <USART1_IRQHandler+0x9c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 0320 	and.w	r3, r3, #32
 800037e:	2b00      	cmp	r3, #0
 8000380:	d03f      	beq.n	8000402 <USART1_IRQHandler+0x92>
        char c = USART1->DR;
 8000382:	4b22      	ldr	r3, [pc, #136]	@ (800040c <USART1_IRQHandler+0x9c>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	70fb      	strb	r3, [r7, #3]
        rxBuf[rxIndex++] = c;
 8000388:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <USART1_IRQHandler+0xa0>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	1c5a      	adds	r2, r3, #1
 8000390:	b2d1      	uxtb	r1, r2
 8000392:	4a1f      	ldr	r2, [pc, #124]	@ (8000410 <USART1_IRQHandler+0xa0>)
 8000394:	7011      	strb	r1, [r2, #0]
 8000396:	4619      	mov	r1, r3
 8000398:	4a1e      	ldr	r2, [pc, #120]	@ (8000414 <USART1_IRQHandler+0xa4>)
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	5453      	strb	r3, [r2, r1]
        if (c == '\n' || rxIndex >= 19) {
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	2b0a      	cmp	r3, #10
 80003a2:	d004      	beq.n	80003ae <USART1_IRQHandler+0x3e>
 80003a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <USART1_IRQHandler+0xa0>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	2b12      	cmp	r3, #18
 80003ac:	d929      	bls.n	8000402 <USART1_IRQHandler+0x92>
            rxBuf[rxIndex] = 0;
 80003ae:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <USART1_IRQHandler+0xa0>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <USART1_IRQHandler+0xa4>)
 80003b8:	2100      	movs	r1, #0
 80003ba:	5499      	strb	r1, [r3, r2]
            if (strstr(rxBuf, "led on") || strstr(rxBuf, "led off")) {
 80003bc:	4916      	ldr	r1, [pc, #88]	@ (8000418 <USART1_IRQHandler+0xa8>)
 80003be:	4815      	ldr	r0, [pc, #84]	@ (8000414 <USART1_IRQHandler+0xa4>)
 80003c0:	f000 f8e6 	bl	8000590 <strstr>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d106      	bne.n	80003d8 <USART1_IRQHandler+0x68>
 80003ca:	4914      	ldr	r1, [pc, #80]	@ (800041c <USART1_IRQHandler+0xac>)
 80003cc:	4811      	ldr	r0, [pc, #68]	@ (8000414 <USART1_IRQHandler+0xa4>)
 80003ce:	f000 f8df 	bl	8000590 <strstr>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d011      	beq.n	80003fc <USART1_IRQHandler+0x8c>
                for (int i = 0; i < 6; i++) {
 80003d8:	2300      	movs	r3, #0
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	e00b      	b.n	80003f6 <USART1_IRQHandler+0x86>
                    GPIOA->ODR ^= (1 << 6);
 80003de:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <USART1_IRQHandler+0xb0>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000420 <USART1_IRQHandler+0xb0>)
 80003e4:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80003e8:	6153      	str	r3, [r2, #20]
                    delay(800000);
 80003ea:	480e      	ldr	r0, [pc, #56]	@ (8000424 <USART1_IRQHandler+0xb4>)
 80003ec:	f7ff ff74 	bl	80002d8 <delay>
                for (int i = 0; i < 6; i++) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3301      	adds	r3, #1
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2b05      	cmp	r3, #5
 80003fa:	ddf0      	ble.n	80003de <USART1_IRQHandler+0x6e>
                }
            }
            rxIndex = 0;
 80003fc:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <USART1_IRQHandler+0xa0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40011000 	.word	0x40011000
 8000410:	20000038 	.word	0x20000038
 8000414:	20000024 	.word	0x20000024
 8000418:	0800061c 	.word	0x0800061c
 800041c:	08000624 	.word	0x08000624
 8000420:	40020000 	.word	0x40020000
 8000424:	000c3500 	.word	0x000c3500

08000428 <main>:

int main(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    UART1_Init();
 800042c:	f7ff fef0 	bl	8000210 <UART1_Init>
    GPIO_Init();
 8000430:	f7ff ff20 	bl	8000274 <GPIO_Init>
    NVIC_EnableIRQ(USART1_IRQn);
 8000434:	2025      	movs	r0, #37	@ 0x25
 8000436:	f7ff fecd 	bl	80001d4 <__NVIC_EnableIRQ>
    USART1->CR1 |= USART_CR1_RXNEIE;
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <main+0x54>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	4a0f      	ldr	r2, [pc, #60]	@ (800047c <main+0x54>)
 8000440:	f043 0320 	orr.w	r3, r3, #32
 8000444:	60d3      	str	r3, [r2, #12]

    while (1) {
        if (buttonFlag) {
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <main+0x58>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	b2db      	uxtb	r3, r3
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0fa      	beq.n	8000446 <main+0x1e>
            if (ledState == 0) {
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <main+0x5c>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d106      	bne.n	8000466 <main+0x3e>
                USART1_Send("on led\n");
 8000458:	480b      	ldr	r0, [pc, #44]	@ (8000488 <main+0x60>)
 800045a:	f7ff ff4f 	bl	80002fc <USART1_Send>
                ledState = 1;
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <main+0x5c>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
 8000464:	e005      	b.n	8000472 <main+0x4a>
            } else {
                USART1_Send("off led\n");
 8000466:	4809      	ldr	r0, [pc, #36]	@ (800048c <main+0x64>)
 8000468:	f7ff ff48 	bl	80002fc <USART1_Send>
                ledState = 0;
 800046c:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <main+0x5c>)
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
            }
            buttonFlag = 0;
 8000472:	4b03      	ldr	r3, [pc, #12]	@ (8000480 <main+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
        if (buttonFlag) {
 8000478:	e7e5      	b.n	8000446 <main+0x1e>
 800047a:	bf00      	nop
 800047c:	40011000 	.word	0x40011000
 8000480:	20000020 	.word	0x20000020
 8000484:	20000021 	.word	0x20000021
 8000488:	0800062c 	.word	0x0800062c
 800048c:	08000634 	.word	0x08000634

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <NMI_Handler+0x4>

08000498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e6:	f000 f83f 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <SystemInit+0x20>)
 80004f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004fa:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <SystemInit+0x20>)
 80004fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800054c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000518:	f7ff ffea 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800051c:	480c      	ldr	r0, [pc, #48]	@ (8000550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800051e:	490d      	ldr	r1, [pc, #52]	@ (8000554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000520:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000534:	4c0a      	ldr	r4, [pc, #40]	@ (8000560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000542:	f000 f83b 	bl	80005bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000546:	f7ff ff6f 	bl	8000428 <main>
  bx  lr    
 800054a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800054c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000558:	08000648 	.word	0x08000648
  ldr r2, =_sbss
 800055c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000560:	20000040 	.word	0x20000040

08000564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC_IRQHandler>
	...

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000
 800058c:	2000003c 	.word	0x2000003c

08000590 <strstr>:
 8000590:	780a      	ldrb	r2, [r1, #0]
 8000592:	b570      	push	{r4, r5, r6, lr}
 8000594:	b96a      	cbnz	r2, 80005b2 <strstr+0x22>
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	429a      	cmp	r2, r3
 800059a:	d109      	bne.n	80005b0 <strstr+0x20>
 800059c:	460c      	mov	r4, r1
 800059e:	4605      	mov	r5, r0
 80005a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0f6      	beq.n	8000596 <strstr+0x6>
 80005a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80005ac:	429e      	cmp	r6, r3
 80005ae:	d0f7      	beq.n	80005a0 <strstr+0x10>
 80005b0:	3001      	adds	r0, #1
 80005b2:	7803      	ldrb	r3, [r0, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1ef      	bne.n	8000598 <strstr+0x8>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e7ec      	b.n	8000596 <strstr+0x6>

080005bc <__libc_init_array>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	4d0d      	ldr	r5, [pc, #52]	@ (80005f4 <__libc_init_array+0x38>)
 80005c0:	4c0d      	ldr	r4, [pc, #52]	@ (80005f8 <__libc_init_array+0x3c>)
 80005c2:	1b64      	subs	r4, r4, r5
 80005c4:	10a4      	asrs	r4, r4, #2
 80005c6:	2600      	movs	r6, #0
 80005c8:	42a6      	cmp	r6, r4
 80005ca:	d109      	bne.n	80005e0 <__libc_init_array+0x24>
 80005cc:	4d0b      	ldr	r5, [pc, #44]	@ (80005fc <__libc_init_array+0x40>)
 80005ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000600 <__libc_init_array+0x44>)
 80005d0:	f000 f818 	bl	8000604 <_init>
 80005d4:	1b64      	subs	r4, r4, r5
 80005d6:	10a4      	asrs	r4, r4, #2
 80005d8:	2600      	movs	r6, #0
 80005da:	42a6      	cmp	r6, r4
 80005dc:	d105      	bne.n	80005ea <__libc_init_array+0x2e>
 80005de:	bd70      	pop	{r4, r5, r6, pc}
 80005e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e4:	4798      	blx	r3
 80005e6:	3601      	adds	r6, #1
 80005e8:	e7ee      	b.n	80005c8 <__libc_init_array+0xc>
 80005ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ee:	4798      	blx	r3
 80005f0:	3601      	adds	r6, #1
 80005f2:	e7f2      	b.n	80005da <__libc_init_array+0x1e>
 80005f4:	08000640 	.word	0x08000640
 80005f8:	08000640 	.word	0x08000640
 80005fc:	08000640 	.word	0x08000640
 8000600:	08000644 	.word	0x08000644

08000604 <_init>:
 8000604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000606:	bf00      	nop
 8000608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060a:	bc08      	pop	{r3}
 800060c:	469e      	mov	lr, r3
 800060e:	4770      	bx	lr

08000610 <_fini>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
 8000614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000616:	bc08      	pop	{r3}
 8000618:	469e      	mov	lr, r3
 800061a:	4770      	bx	lr
